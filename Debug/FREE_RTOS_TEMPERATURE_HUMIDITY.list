
FREE_RTOS_TEMPERATURE_HUMIDITY.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca0c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f4  0800cbc0  0800cbc0  0001cbc0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d1b4  0800d1b4  000203cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800d1b4  0800d1b4  0001d1b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d1bc  0800d1bc  000203cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d1bc  0800d1bc  0001d1bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d1c0  0800d1c0  0001d1c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  0800d1c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000203cc  2**0
                  CONTENTS
 10 .bss          00004bac  200003cc  200003cc  000203cc  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004f78  20004f78  000203cc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a96a  00000000  00000000  000203fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a5c  00000000  00000000  0003ad66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001628  00000000  00000000  0003e7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001520  00000000  00000000  0003fdf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026fc1  00000000  00000000  00041310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184ef  00000000  00000000  000682d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e66e7  00000000  00000000  000807c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00166ea7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000071f0  00000000  00000000  00166ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200003cc 	.word	0x200003cc
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800cba4 	.word	0x0800cba4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200003d0 	.word	0x200003d0
 80001ec:	0800cba4 	.word	0x0800cba4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <pinOutput>:
#define lineDown() HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_RESET)
#define lineUp() HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_SET)
#define getLine() (HAL_GPIO_ReadPin(DHT_Port, DHT_Pin) == GPIO_PIN_SET)
#define Delay(d) HAL_Delay(d)

static void pinOutput(void) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]

//По умолчанию на линии высокий уровень
HAL_GPIO_WritePin(DHT_Port, DHT_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	2120      	movs	r1, #32
 8001030:	4809      	ldr	r0, [pc, #36]	; (8001058 <pinOutput+0x40>)
 8001032:	f002 fb47 	bl	80036c4 <HAL_GPIO_WritePin>

//Настройка порта на выход
GPIO_InitStruct.Pin = DHT_Pin;
 8001036:	2320      	movs	r3, #32
 8001038:	607b      	str	r3, [r7, #4]
GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD; //Открытый сток
 800103a:	2311      	movs	r3, #17
 800103c:	60bb      	str	r3, [r7, #8]
#if DHT_PullUp == 1
   GPIO_InitStruct.Pull = GPIO_PULLUP; //Подтяжка к питанию
#else
    GPIO_InitStruct.Pull = GPIO_NOPULL; //Без подтяжки
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
#endif
GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH; //Высокая скорость работы порта
 8001042:	2302      	movs	r3, #2
 8001044:	613b      	str	r3, [r7, #16]
HAL_GPIO_Init(DHT_Port, &GPIO_InitStruct);
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	4619      	mov	r1, r3
 800104a:	4803      	ldr	r0, [pc, #12]	; (8001058 <pinOutput+0x40>)
 800104c:	f002 f976 	bl	800333c <HAL_GPIO_Init>
}
 8001050:	bf00      	nop
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	40020000 	.word	0x40020000

0800105c <pinInput>:

static void pinInput(void) {
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
 8001068:	605a      	str	r2, [r3, #4]
 800106a:	609a      	str	r2, [r3, #8]
 800106c:	60da      	str	r2, [r3, #12]
 800106e:	611a      	str	r2, [r3, #16]

//Настройка порта на вход
GPIO_InitStruct.Pin = DHT_Pin;
 8001070:	2320      	movs	r3, #32
 8001072:	607b      	str	r3, [r7, #4]
GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	2300      	movs	r3, #0
 8001076:	60bb      	str	r3, [r7, #8]
  #if DHT_PullUp == 1
GPIO_InitStruct.Pull = GPIO_PULLUP; //Подтяжка к питанию
  #else
GPIO_InitStruct.Pull = GPIO_NOPULL; //Без подтяжки
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
   #endif
HAL_GPIO_Init(DHT_Port, &GPIO_InitStruct);
 800107c:	1d3b      	adds	r3, r7, #4
 800107e:	4619      	mov	r1, r3
 8001080:	4803      	ldr	r0, [pc, #12]	; (8001090 <pinInput+0x34>)
 8001082:	f002 f95b 	bl	800333c <HAL_GPIO_Init>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	40020000 	.word	0x40020000

08001094 <DHT_getData>:

DHT_data DHT_getData(DHT_type t) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b08e      	sub	sp, #56	; 0x38
 8001098:	af00      	add	r7, sp, #0
 800109a:	4603      	mov	r3, r0
 800109c:	73fb      	strb	r3, [r7, #15]
DHT_data data = {0.0f, 0.0f};
 800109e:	f04f 0300 	mov.w	r3, #0
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	f04f 0300 	mov.w	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]

/* Запрос данных у датчика */
//Перевод пина “на выход”
pinOutput();
 80010aa:	f7ff ffb5 	bl	8001018 <pinOutput>
//Опускание линии данных на 15 мс
lineDown();
 80010ae:	2200      	movs	r2, #0
 80010b0:	2120      	movs	r1, #32
 80010b2:	488f      	ldr	r0, [pc, #572]	; (80012f0 <DHT_getData+0x25c>)
 80010b4:	f002 fb06 	bl	80036c4 <HAL_GPIO_WritePin>
//Delay(15);
osDelay(15);
 80010b8:	200f      	movs	r0, #15
 80010ba:	f004 f9b9 	bl	8005430 <osDelay>
//Подъём линии, перевод порта “на вход”
lineUp();
 80010be:	2201      	movs	r2, #1
 80010c0:	2120      	movs	r1, #32
 80010c2:	488b      	ldr	r0, [pc, #556]	; (80012f0 <DHT_getData+0x25c>)
 80010c4:	f002 fafe 	bl	80036c4 <HAL_GPIO_WritePin>
pinInput();
 80010c8:	f7ff ffc8 	bl	800105c <pinInput>

/* Ожидание ответа от датчика */
uint16_t timeout = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	86fb      	strh	r3, [r7, #54]	; 0x36
//Ожидание спада
while(getLine()) {
 80010d0:	e010      	b.n	80010f4 <DHT_getData+0x60>
   timeout++;
 80010d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010d4:	3301      	adds	r3, #1
 80010d6:	86fb      	strh	r3, [r7, #54]	; 0x36
   if (timeout > DHT_timeout) return data;
 80010d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80010da:	f242 7210 	movw	r2, #10000	; 0x2710
 80010de:	4293      	cmp	r3, r2
 80010e0:	d908      	bls.n	80010f4 <DHT_getData+0x60>
 80010e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e6:	f107 021c 	add.w	r2, r7, #28
 80010ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010ee:	e883 0003 	stmia.w	r3, {r0, r1}
 80010f2:	e0ef      	b.n	80012d4 <DHT_getData+0x240>
while(getLine()) {
 80010f4:	2120      	movs	r1, #32
 80010f6:	487e      	ldr	r0, [pc, #504]	; (80012f0 <DHT_getData+0x25c>)
 80010f8:	f002 facc 	bl	8003694 <HAL_GPIO_ReadPin>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d0e7      	beq.n	80010d2 <DHT_getData+0x3e>
}
timeout = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	86fb      	strh	r3, [r7, #54]	; 0x36
//Ожидание подъёма
while(!getLine()) {
 8001106:	e010      	b.n	800112a <DHT_getData+0x96>
   timeout++;
 8001108:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800110a:	3301      	adds	r3, #1
 800110c:	86fb      	strh	r3, [r7, #54]	; 0x36
   if (timeout > DHT_timeout) return data;
 800110e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001110:	f242 7210 	movw	r2, #10000	; 0x2710
 8001114:	4293      	cmp	r3, r2
 8001116:	d908      	bls.n	800112a <DHT_getData+0x96>
 8001118:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111c:	f107 021c 	add.w	r2, r7, #28
 8001120:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001124:	e883 0003 	stmia.w	r3, {r0, r1}
 8001128:	e0d4      	b.n	80012d4 <DHT_getData+0x240>
while(!getLine()) {
 800112a:	2120      	movs	r1, #32
 800112c:	4870      	ldr	r0, [pc, #448]	; (80012f0 <DHT_getData+0x25c>)
 800112e:	f002 fab1 	bl	8003694 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	2b01      	cmp	r3, #1
 8001136:	d1e7      	bne.n	8001108 <DHT_getData+0x74>
}
timeout = 0;
 8001138:	2300      	movs	r3, #0
 800113a:	86fb      	strh	r3, [r7, #54]	; 0x36
//Ожидание спада
while(getLine()) {
 800113c:	e010      	b.n	8001160 <DHT_getData+0xcc>
    timeout++;
 800113e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001140:	3301      	adds	r3, #1
 8001142:	86fb      	strh	r3, [r7, #54]	; 0x36
     if (timeout > DHT_timeout) return data;
 8001144:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001146:	f242 7210 	movw	r2, #10000	; 0x2710
 800114a:	4293      	cmp	r3, r2
 800114c:	d908      	bls.n	8001160 <DHT_getData+0xcc>
 800114e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001152:	f107 021c 	add.w	r2, r7, #28
 8001156:	e892 0003 	ldmia.w	r2, {r0, r1}
 800115a:	e883 0003 	stmia.w	r3, {r0, r1}
 800115e:	e0b9      	b.n	80012d4 <DHT_getData+0x240>
while(getLine()) {
 8001160:	2120      	movs	r1, #32
 8001162:	4863      	ldr	r0, [pc, #396]	; (80012f0 <DHT_getData+0x25c>)
 8001164:	f002 fa96 	bl	8003694 <HAL_GPIO_ReadPin>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d0e7      	beq.n	800113e <DHT_getData+0xaa>
}

/* Чтение ответа от датчика */
uint8_t rawData[5] = {0,0,0,0,0};
 800116e:	4a61      	ldr	r2, [pc, #388]	; (80012f4 <DHT_getData+0x260>)
 8001170:	f107 0314 	add.w	r3, r7, #20
 8001174:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001178:	6018      	str	r0, [r3, #0]
 800117a:	3304      	adds	r3, #4
 800117c:	7019      	strb	r1, [r3, #0]
for(uint8_t a = 0; a < 5; a++) {
 800117e:	2300      	movs	r3, #0
 8001180:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001184:	e045      	b.n	8001212 <DHT_getData+0x17e>
     for(uint8_t b = 7; b != 255; b--) {
 8001186:	2307      	movs	r3, #7
 8001188:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 800118c:	e038      	b.n	8001200 <DHT_getData+0x16c>
           uint32_t hT = 0, lT = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	633b      	str	r3, [r7, #48]	; 0x30
 8001192:	2300      	movs	r3, #0
 8001194:	62fb      	str	r3, [r7, #44]	; 0x2c
           //Пока линия в низком уровне, инкремент переменной lT
            while(!getLine()) lT++;
 8001196:	e002      	b.n	800119e <DHT_getData+0x10a>
 8001198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800119a:	3301      	adds	r3, #1
 800119c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800119e:	2120      	movs	r1, #32
 80011a0:	4853      	ldr	r0, [pc, #332]	; (80012f0 <DHT_getData+0x25c>)
 80011a2:	f002 fa77 	bl	8003694 <HAL_GPIO_ReadPin>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	d1f5      	bne.n	8001198 <DHT_getData+0x104>
            //Пока линия в высоком уровне, инкремент переменной hT
            while(getLine()) hT++;
 80011ac:	e002      	b.n	80011b4 <DHT_getData+0x120>
 80011ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011b0:	3301      	adds	r3, #1
 80011b2:	633b      	str	r3, [r7, #48]	; 0x30
 80011b4:	2120      	movs	r1, #32
 80011b6:	484e      	ldr	r0, [pc, #312]	; (80012f0 <DHT_getData+0x25c>)
 80011b8:	f002 fa6c 	bl	8003694 <HAL_GPIO_ReadPin>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d0f5      	beq.n	80011ae <DHT_getData+0x11a>
            //Если hT больше lT, то пришла единица
             if(hT > lT) rawData[a] |= (1<<b);
 80011c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c6:	429a      	cmp	r2, r3
 80011c8:	d915      	bls.n	80011f6 <DHT_getData+0x162>
 80011ca:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80011ce:	3338      	adds	r3, #56	; 0x38
 80011d0:	443b      	add	r3, r7
 80011d2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80011d6:	b25a      	sxtb	r2, r3
 80011d8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011dc:	2101      	movs	r1, #1
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	b25b      	sxtb	r3, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	b25a      	sxtb	r2, r3
 80011e8:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80011ec:	b2d2      	uxtb	r2, r2
 80011ee:	3338      	adds	r3, #56	; 0x38
 80011f0:	443b      	add	r3, r7
 80011f2:	f803 2c24 	strb.w	r2, [r3, #-36]
     for(uint8_t b = 7; b != 255; b--) {
 80011f6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80011fa:	3b01      	subs	r3, #1
 80011fc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8001200:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001204:	2bff      	cmp	r3, #255	; 0xff
 8001206:	d1c2      	bne.n	800118e <DHT_getData+0xfa>
for(uint8_t a = 0; a < 5; a++) {
 8001208:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800120c:	3301      	adds	r3, #1
 800120e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001212:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001216:	2b04      	cmp	r3, #4
 8001218:	d9b5      	bls.n	8001186 <DHT_getData+0xf2>
          }
 }
/* Проверка целостности данных */
if((uint8_t)(rawData[0] + rawData[1] + rawData[2] + rawData[3]) == rawData[4]) {
 800121a:	7d3a      	ldrb	r2, [r7, #20]
 800121c:	7d7b      	ldrb	r3, [r7, #21]
 800121e:	4413      	add	r3, r2
 8001220:	b2da      	uxtb	r2, r3
 8001222:	7dbb      	ldrb	r3, [r7, #22]
 8001224:	4413      	add	r3, r2
 8001226:	b2da      	uxtb	r2, r3
 8001228:	7dfb      	ldrb	r3, [r7, #23]
 800122a:	4413      	add	r3, r2
 800122c:	b2da      	uxtb	r2, r3
 800122e:	7e3b      	ldrb	r3, [r7, #24]
 8001230:	429a      	cmp	r2, r3
 8001232:	d147      	bne.n	80012c4 <DHT_getData+0x230>
    //Если контрольная сумма совпадает, то конвертация и возврат полученных значений
    if (t == DHT22) {
 8001234:	7bfb      	ldrb	r3, [r7, #15]
 8001236:	2b01      	cmp	r3, #1
 8001238:	d133      	bne.n	80012a2 <DHT_getData+0x20e>
         data.hum = (float)(((uint16_t)rawData[0]<<8) | rawData[1])*0.1f;
 800123a:	7d3b      	ldrb	r3, [r7, #20]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	7d7a      	ldrb	r2, [r7, #21]
 8001240:	4313      	orrs	r3, r2
 8001242:	ee07 3a90 	vmov	s15, r3
 8001246:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800124a:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 80012f8 <DHT_getData+0x264>
 800124e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001252:	edc7 7a07 	vstr	s15, [r7, #28]
         //Проверка на отрицательность температуры
         if(!(rawData[2] & (1<<7))) {
 8001256:	7dbb      	ldrb	r3, [r7, #22]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	db0e      	blt.n	800127c <DHT_getData+0x1e8>
               data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*0.1f;
 800125e:	7dbb      	ldrb	r3, [r7, #22]
 8001260:	021b      	lsls	r3, r3, #8
 8001262:	7dfa      	ldrb	r2, [r7, #23]
 8001264:	4313      	orrs	r3, r2
 8001266:	ee07 3a90 	vmov	s15, r3
 800126a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800126e:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80012f8 <DHT_getData+0x264>
 8001272:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001276:	edc7 7a08 	vstr	s15, [r7, #32]
 800127a:	e012      	b.n	80012a2 <DHT_getData+0x20e>
          } else {
                 rawData[2] &= ~(1<<7);
 800127c:	7dbb      	ldrb	r3, [r7, #22]
 800127e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001282:	b2db      	uxtb	r3, r3
 8001284:	75bb      	strb	r3, [r7, #22]
                data.temp = (float)(((uint16_t)rawData[2]<<8) | rawData[3])*-0.1f;
 8001286:	7dbb      	ldrb	r3, [r7, #22]
 8001288:	021b      	lsls	r3, r3, #8
 800128a:	7dfa      	ldrb	r2, [r7, #23]
 800128c:	4313      	orrs	r3, r2
 800128e:	ee07 3a90 	vmov	s15, r3
 8001292:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001296:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80012fc <DHT_getData+0x268>
 800129a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800129e:	edc7 7a08 	vstr	s15, [r7, #32]
              }
   }
if (t == DHT11) {
 80012a2:	7bfb      	ldrb	r3, [r7, #15]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d10d      	bne.n	80012c4 <DHT_getData+0x230>
    data.hum = (float)rawData[0];
 80012a8:	7d3b      	ldrb	r3, [r7, #20]
 80012aa:	ee07 3a90 	vmov	s15, r3
 80012ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012b2:	edc7 7a07 	vstr	s15, [r7, #28]
    data.temp = (float)rawData[2];;
 80012b6:	7dbb      	ldrb	r3, [r7, #22]
 80012b8:	ee07 3a90 	vmov	s15, r3
 80012bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012c0:	edc7 7a08 	vstr	s15, [r7, #32]
  }
}

return data;
 80012c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012c8:	f107 021c 	add.w	r2, r7, #28
 80012cc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80012d0:	e883 0003 	stmia.w	r3, {r0, r1}
}
 80012d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d8:	ee07 2a10 	vmov	s14, r2
 80012dc:	ee07 3a90 	vmov	s15, r3
 80012e0:	eeb0 0a47 	vmov.f32	s0, s14
 80012e4:	eef0 0a67 	vmov.f32	s1, s15
 80012e8:	3738      	adds	r7, #56	; 0x38
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40020000 	.word	0x40020000
 80012f4:	0800cbc0 	.word	0x0800cbc0
 80012f8:	3dcccccd 	.word	0x3dcccccd
 80012fc:	bdcccccd 	.word	0xbdcccccd

08001300 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	db0c      	blt.n	800132c <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001312:	79fb      	ldrb	r3, [r7, #7]
 8001314:	f003 021f 	and.w	r2, r3, #31
 8001318:	4907      	ldr	r1, [pc, #28]	; (8001338 <__NVIC_ClearPendingIRQ+0x38>)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	095b      	lsrs	r3, r3, #5
 8001320:	2001      	movs	r0, #1
 8001322:	fa00 f202 	lsl.w	r2, r0, r2
 8001326:	3360      	adds	r3, #96	; 0x60
 8001328:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800132c:	bf00      	nop
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000e100 	.word	0xe000e100

0800133c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001340:	f001 fe60 	bl	8003004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001344:	f000 f868 	bl	8001418 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001348:	f000 f9ac 	bl	80016a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 800134c:	f000 f8d4 	bl	80014f8 <MX_SPI1_Init>
  MX_TIM1_Init();
 8001350:	f000 f908 	bl	8001564 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001354:	f000 f958 	bl	8001608 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(100);
 8001358:	2064      	movs	r0, #100	; 0x64
 800135a:	f001 fe95 	bl	8003088 <HAL_Delay>
  max7219_Init();
 800135e:	f000 fd6f 	bl	8001e40 <max7219_Init>
  HAL_Delay(100);///////////////////////////////////////////////////////////////////////
 8001362:	2064      	movs	r0, #100	; 0x64
 8001364:	f001 fe90 	bl	8003088 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim2);
 8001368:	481b      	ldr	r0, [pc, #108]	; (80013d8 <main+0x9c>)
 800136a:	f003 fae1 	bl	8004930 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800136e:	f003 ff83 	bl	8005278 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myDataQueue */
  myDataQueueHandle = osMessageQueueNew (1, sizeof(QUEUE_t), &myDataQueue_attributes);
 8001372:	4a1a      	ldr	r2, [pc, #104]	; (80013dc <main+0xa0>)
 8001374:	2108      	movs	r1, #8
 8001376:	2001      	movs	r0, #1
 8001378:	f004 f875 	bl	8005466 <osMessageQueueNew>
 800137c:	4603      	mov	r3, r0
 800137e:	4a18      	ldr	r2, [pc, #96]	; (80013e0 <main+0xa4>)
 8001380:	6013      	str	r3, [r2, #0]

  /* creation of myTempDisplayQueue */
  myTempDisplayQueueHandle = osMessageQueueNew (1, sizeof(Queue_Temp_Hum_t), &myTempDisplayQueue_attributes);
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <main+0xa8>)
 8001384:	2108      	movs	r1, #8
 8001386:	2001      	movs	r0, #1
 8001388:	f004 f86d 	bl	8005466 <osMessageQueueNew>
 800138c:	4603      	mov	r3, r0
 800138e:	4a16      	ldr	r2, [pc, #88]	; (80013e8 <main+0xac>)
 8001390:	6013      	str	r3, [r2, #0]

  /* creation of myCalcDisplayQueue */
  myCalcDisplayQueueHandle = osMessageQueueNew (1, sizeof(Queue_Dev_t), &myCalcDisplayQueue_attributes);
 8001392:	4a16      	ldr	r2, [pc, #88]	; (80013ec <main+0xb0>)
 8001394:	2110      	movs	r1, #16
 8001396:	2001      	movs	r0, #1
 8001398:	f004 f865 	bl	8005466 <osMessageQueueNew>
 800139c:	4603      	mov	r3, r0
 800139e:	4a14      	ldr	r2, [pc, #80]	; (80013f0 <main+0xb4>)
 80013a0:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of myDHT22Task */
  myDHT22TaskHandle = osThreadNew(StartDHT22Task, NULL, &myDHT22Task_attributes);
 80013a2:	4a14      	ldr	r2, [pc, #80]	; (80013f4 <main+0xb8>)
 80013a4:	2100      	movs	r1, #0
 80013a6:	4814      	ldr	r0, [pc, #80]	; (80013f8 <main+0xbc>)
 80013a8:	f003 ffb0 	bl	800530c <osThreadNew>
 80013ac:	4603      	mov	r3, r0
 80013ae:	4a13      	ldr	r2, [pc, #76]	; (80013fc <main+0xc0>)
 80013b0:	6013      	str	r3, [r2, #0]

  /* creation of myCalculationTa */
  myCalculationTaHandle = osThreadNew(StartCalculationTask, NULL, &myCalculationTa_attributes);
 80013b2:	4a13      	ldr	r2, [pc, #76]	; (8001400 <main+0xc4>)
 80013b4:	2100      	movs	r1, #0
 80013b6:	4813      	ldr	r0, [pc, #76]	; (8001404 <main+0xc8>)
 80013b8:	f003 ffa8 	bl	800530c <osThreadNew>
 80013bc:	4603      	mov	r3, r0
 80013be:	4a12      	ldr	r2, [pc, #72]	; (8001408 <main+0xcc>)
 80013c0:	6013      	str	r3, [r2, #0]

  /* creation of myDisplayTask */
  myDisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &myDisplayTask_attributes);
 80013c2:	4a12      	ldr	r2, [pc, #72]	; (800140c <main+0xd0>)
 80013c4:	2100      	movs	r1, #0
 80013c6:	4812      	ldr	r0, [pc, #72]	; (8001410 <main+0xd4>)
 80013c8:	f003 ffa0 	bl	800530c <osThreadNew>
 80013cc:	4603      	mov	r3, r0
 80013ce:	4a11      	ldr	r2, [pc, #68]	; (8001414 <main+0xd8>)
 80013d0:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80013d2:	f003 ff75 	bl	80052c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <main+0x9a>
 80013d8:	20000488 	.word	0x20000488
 80013dc:	0800ccac 	.word	0x0800ccac
 80013e0:	200004dc 	.word	0x200004dc
 80013e4:	0800ccc4 	.word	0x0800ccc4
 80013e8:	200004e0 	.word	0x200004e0
 80013ec:	0800ccdc 	.word	0x0800ccdc
 80013f0:	200004e4 	.word	0x200004e4
 80013f4:	0800cc40 	.word	0x0800cc40
 80013f8:	080017ed 	.word	0x080017ed
 80013fc:	200004d0 	.word	0x200004d0
 8001400:	0800cc64 	.word	0x0800cc64
 8001404:	080018a1 	.word	0x080018a1
 8001408:	200004d4 	.word	0x200004d4
 800140c:	0800cc88 	.word	0x0800cc88
 8001410:	08001be5 	.word	0x08001be5
 8001414:	200004d8 	.word	0x200004d8

08001418 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b094      	sub	sp, #80	; 0x50
 800141c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800141e:	f107 0320 	add.w	r3, r7, #32
 8001422:	2230      	movs	r2, #48	; 0x30
 8001424:	2100      	movs	r1, #0
 8001426:	4618      	mov	r0, r3
 8001428:	f006 ffb9 	bl	800839e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	4b2b      	ldr	r3, [pc, #172]	; (80014f0 <SystemClock_Config+0xd8>)
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	4a2a      	ldr	r2, [pc, #168]	; (80014f0 <SystemClock_Config+0xd8>)
 8001446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800144a:	6413      	str	r3, [r2, #64]	; 0x40
 800144c:	4b28      	ldr	r3, [pc, #160]	; (80014f0 <SystemClock_Config+0xd8>)
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
 800145c:	4b25      	ldr	r3, [pc, #148]	; (80014f4 <SystemClock_Config+0xdc>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a24      	ldr	r2, [pc, #144]	; (80014f4 <SystemClock_Config+0xdc>)
 8001462:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001466:	6013      	str	r3, [r2, #0]
 8001468:	4b22      	ldr	r3, [pc, #136]	; (80014f4 <SystemClock_Config+0xdc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001470:	607b      	str	r3, [r7, #4]
 8001472:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001474:	2301      	movs	r3, #1
 8001476:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001478:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800147c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800147e:	2302      	movs	r3, #2
 8001480:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001482:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001486:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001488:	2304      	movs	r3, #4
 800148a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800148c:	23b4      	movs	r3, #180	; 0xb4
 800148e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001490:	2302      	movs	r3, #2
 8001492:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001494:	2307      	movs	r3, #7
 8001496:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001498:	f107 0320 	add.w	r3, r7, #32
 800149c:	4618      	mov	r0, r3
 800149e:	f002 f993 	bl	80037c8 <HAL_RCC_OscConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <SystemClock_Config+0x94>
  {
    Error_Handler();
 80014a8:	f000 fc48 	bl	8001d3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80014ac:	f002 f93c 	bl	8003728 <HAL_PWREx_EnableOverDrive>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80014b6:	f000 fc41 	bl	8001d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ba:	230f      	movs	r3, #15
 80014bc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014be:	2302      	movs	r3, #2
 80014c0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014c2:	2300      	movs	r3, #0
 80014c4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80014c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	2105      	movs	r1, #5
 80014d8:	4618      	mov	r0, r3
 80014da:	f002 fbed 	bl	8003cb8 <HAL_RCC_ClockConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80014e4:	f000 fc2a 	bl	8001d3c <Error_Handler>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3750      	adds	r7, #80	; 0x50
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40023800 	.word	0x40023800
 80014f4:	40007000 	.word	0x40007000

080014f8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80014fc:	4b17      	ldr	r3, [pc, #92]	; (800155c <MX_SPI1_Init+0x64>)
 80014fe:	4a18      	ldr	r2, [pc, #96]	; (8001560 <MX_SPI1_Init+0x68>)
 8001500:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001502:	4b16      	ldr	r3, [pc, #88]	; (800155c <MX_SPI1_Init+0x64>)
 8001504:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001508:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800150a:	4b14      	ldr	r3, [pc, #80]	; (800155c <MX_SPI1_Init+0x64>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001510:	4b12      	ldr	r3, [pc, #72]	; (800155c <MX_SPI1_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001516:	4b11      	ldr	r3, [pc, #68]	; (800155c <MX_SPI1_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151c:	4b0f      	ldr	r3, [pc, #60]	; (800155c <MX_SPI1_Init+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001522:	4b0e      	ldr	r3, [pc, #56]	; (800155c <MX_SPI1_Init+0x64>)
 8001524:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001528:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800152a:	4b0c      	ldr	r3, [pc, #48]	; (800155c <MX_SPI1_Init+0x64>)
 800152c:	2218      	movs	r2, #24
 800152e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001530:	4b0a      	ldr	r3, [pc, #40]	; (800155c <MX_SPI1_Init+0x64>)
 8001532:	2200      	movs	r2, #0
 8001534:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001536:	4b09      	ldr	r3, [pc, #36]	; (800155c <MX_SPI1_Init+0x64>)
 8001538:	2200      	movs	r2, #0
 800153a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153c:	4b07      	ldr	r3, [pc, #28]	; (800155c <MX_SPI1_Init+0x64>)
 800153e:	2200      	movs	r2, #0
 8001540:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001542:	4b06      	ldr	r3, [pc, #24]	; (800155c <MX_SPI1_Init+0x64>)
 8001544:	220a      	movs	r2, #10
 8001546:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001548:	4804      	ldr	r0, [pc, #16]	; (800155c <MX_SPI1_Init+0x64>)
 800154a:	f002 fdf3 	bl	8004134 <HAL_SPI_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001554:	f000 fbf2 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001558:	bf00      	nop
 800155a:	bd80      	pop	{r7, pc}
 800155c:	200003e8 	.word	0x200003e8
 8001560:	40013000 	.word	0x40013000

08001564 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156a:	f107 0308 	add.w	r3, r7, #8
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
 800157e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001580:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <MX_TIM1_Init+0x9c>)
 8001582:	4a20      	ldr	r2, [pc, #128]	; (8001604 <MX_TIM1_Init+0xa0>)
 8001584:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1000-1;
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <MX_TIM1_Init+0x9c>)
 8001588:	f240 32e7 	movw	r2, #999	; 0x3e7
 800158c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800158e:	4b1c      	ldr	r3, [pc, #112]	; (8001600 <MX_TIM1_Init+0x9c>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 900-1;
 8001594:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_TIM1_Init+0x9c>)
 8001596:	f240 3283 	movw	r2, #899	; 0x383
 800159a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM1_Init+0x9c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80015a2:	4b17      	ldr	r3, [pc, #92]	; (8001600 <MX_TIM1_Init+0x9c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_TIM1_Init+0x9c>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80015ae:	4814      	ldr	r0, [pc, #80]	; (8001600 <MX_TIM1_Init+0x9c>)
 80015b0:	f003 f96e 	bl	8004890 <HAL_TIM_Base_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80015ba:	f000 fbbf 	bl	8001d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80015c4:	f107 0308 	add.w	r3, r7, #8
 80015c8:	4619      	mov	r1, r3
 80015ca:	480d      	ldr	r0, [pc, #52]	; (8001600 <MX_TIM1_Init+0x9c>)
 80015cc:	f003 fb57 	bl	8004c7e <HAL_TIM_ConfigClockSource>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80015d6:	f000 fbb1 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015da:	2300      	movs	r3, #0
 80015dc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015e2:	463b      	mov	r3, r7
 80015e4:	4619      	mov	r1, r3
 80015e6:	4806      	ldr	r0, [pc, #24]	; (8001600 <MX_TIM1_Init+0x9c>)
 80015e8:	f003 fd72 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 80015ec:	4603      	mov	r3, r0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80015f2:	f000 fba3 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015f6:	bf00      	nop
 80015f8:	3718      	adds	r7, #24
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	20000440 	.word	0x20000440
 8001604:	40010000 	.word	0x40010000

08001608 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	463b      	mov	r3, r7
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001624:	4b1e      	ldr	r3, [pc, #120]	; (80016a0 <MX_TIM2_Init+0x98>)
 8001626:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800162a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 9000-1;
 800162c:	4b1c      	ldr	r3, [pc, #112]	; (80016a0 <MX_TIM2_Init+0x98>)
 800162e:	f242 3227 	movw	r2, #8999	; 0x2327
 8001632:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001634:	4b1a      	ldr	r3, [pc, #104]	; (80016a0 <MX_TIM2_Init+0x98>)
 8001636:	2200      	movs	r2, #0
 8001638:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 800163a:	4b19      	ldr	r3, [pc, #100]	; (80016a0 <MX_TIM2_Init+0x98>)
 800163c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001640:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001642:	4b17      	ldr	r3, [pc, #92]	; (80016a0 <MX_TIM2_Init+0x98>)
 8001644:	2200      	movs	r2, #0
 8001646:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b15      	ldr	r3, [pc, #84]	; (80016a0 <MX_TIM2_Init+0x98>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800164e:	4814      	ldr	r0, [pc, #80]	; (80016a0 <MX_TIM2_Init+0x98>)
 8001650:	f003 f91e 	bl	8004890 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800165a:	f000 fb6f 	bl	8001d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001662:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001664:	f107 0308 	add.w	r3, r7, #8
 8001668:	4619      	mov	r1, r3
 800166a:	480d      	ldr	r0, [pc, #52]	; (80016a0 <MX_TIM2_Init+0x98>)
 800166c:	f003 fb07 	bl	8004c7e <HAL_TIM_ConfigClockSource>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001676:	f000 fb61 	bl	8001d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001682:	463b      	mov	r3, r7
 8001684:	4619      	mov	r1, r3
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <MX_TIM2_Init+0x98>)
 8001688:	f003 fd22 	bl	80050d0 <HAL_TIMEx_MasterConfigSynchronization>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001692:	f000 fb53 	bl	8001d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001696:	bf00      	nop
 8001698:	3718      	adds	r7, #24
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000488 	.word	0x20000488

080016a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016aa:	f107 0314 	add.w	r3, r7, #20
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
 80016b2:	605a      	str	r2, [r3, #4]
 80016b4:	609a      	str	r2, [r3, #8]
 80016b6:	60da      	str	r2, [r3, #12]
 80016b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
 80016be:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <MX_GPIO_Init+0x10c>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	4a3b      	ldr	r2, [pc, #236]	; (80017b0 <MX_GPIO_Init+0x10c>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ca:	4b39      	ldr	r3, [pc, #228]	; (80017b0 <MX_GPIO_Init+0x10c>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
 80016da:	4b35      	ldr	r3, [pc, #212]	; (80017b0 <MX_GPIO_Init+0x10c>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a34      	ldr	r2, [pc, #208]	; (80017b0 <MX_GPIO_Init+0x10c>)
 80016e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b32      	ldr	r3, [pc, #200]	; (80017b0 <MX_GPIO_Init+0x10c>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ee:	60fb      	str	r3, [r7, #12]
 80016f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f2:	2300      	movs	r3, #0
 80016f4:	60bb      	str	r3, [r7, #8]
 80016f6:	4b2e      	ldr	r3, [pc, #184]	; (80017b0 <MX_GPIO_Init+0x10c>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a2d      	ldr	r2, [pc, #180]	; (80017b0 <MX_GPIO_Init+0x10c>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b2b      	ldr	r3, [pc, #172]	; (80017b0 <MX_GPIO_Init+0x10c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60bb      	str	r3, [r7, #8]
 800170c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b27      	ldr	r3, [pc, #156]	; (80017b0 <MX_GPIO_Init+0x10c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a26      	ldr	r2, [pc, #152]	; (80017b0 <MX_GPIO_Init+0x10c>)
 8001718:	f043 0302 	orr.w	r3, r3, #2
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b24      	ldr	r3, [pc, #144]	; (80017b0 <MX_GPIO_Init+0x10c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f003 0302 	and.w	r3, r3, #2
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_CS_Pin|GPIO_PIN_5, GPIO_PIN_RESET);
 800172a:	2200      	movs	r2, #0
 800172c:	2130      	movs	r1, #48	; 0x30
 800172e:	4821      	ldr	r0, [pc, #132]	; (80017b4 <MX_GPIO_Init+0x110>)
 8001730:	f001 ffc8 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001734:	2200      	movs	r2, #0
 8001736:	f244 0181 	movw	r1, #16513	; 0x4081
 800173a:	481f      	ldr	r0, [pc, #124]	; (80017b8 <MX_GPIO_Init+0x114>)
 800173c:	f001 ffc2 	bl	80036c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001740:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001744:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001746:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800174a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800174c:	2302      	movs	r3, #2
 800174e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4819      	ldr	r0, [pc, #100]	; (80017bc <MX_GPIO_Init+0x118>)
 8001758:	f001 fdf0 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_CS_Pin PA5 */
  GPIO_InitStruct.Pin = SPI_CS_Pin|GPIO_PIN_5;
 800175c:	2330      	movs	r3, #48	; 0x30
 800175e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	4619      	mov	r1, r3
 8001772:	4810      	ldr	r0, [pc, #64]	; (80017b4 <MX_GPIO_Init+0x110>)
 8001774:	f001 fde2 	bl	800333c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001778:	f244 0381 	movw	r3, #16513	; 0x4081
 800177c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	4619      	mov	r1, r3
 8001790:	4809      	ldr	r0, [pc, #36]	; (80017b8 <MX_GPIO_Init+0x114>)
 8001792:	f001 fdd3 	bl	800333c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001796:	2200      	movs	r2, #0
 8001798:	2105      	movs	r1, #5
 800179a:	2028      	movs	r0, #40	; 0x28
 800179c:	f001 fd74 	bl	8003288 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80017a0:	2028      	movs	r0, #40	; 0x28
 80017a2:	f001 fd8d 	bl	80032c0 <HAL_NVIC_EnableIRQ>

}
 80017a6:	bf00      	nop
 80017a8:	3728      	adds	r7, #40	; 0x28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020000 	.word	0x40020000
 80017b8:	40020400 	.word	0x40020400
 80017bc:	40020800 	.word	0x40020800

080017c0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_13)
 80017ca:	88fb      	ldrh	r3, [r7, #6]
 80017cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80017d0:	d105      	bne.n	80017de <HAL_GPIO_EXTI_Callback+0x1e>
	{
		HAL_NVIC_DisableIRQ(EXTI15_10_IRQn); // сразу же отключаем прерывания на этом пине
 80017d2:	2028      	movs	r0, #40	; 0x28
 80017d4:	f001 fd82 	bl	80032dc <HAL_NVIC_DisableIRQ>
		// либо выполняем какое-то действие прямо тут, либо поднимаем флажок
		HAL_TIM_Base_Start_IT(&htim1); // запускаем таймер //200 ms
 80017d8:	4803      	ldr	r0, [pc, #12]	; (80017e8 <HAL_GPIO_EXTI_Callback+0x28>)
 80017da:	f003 f8a9 	bl	8004930 <HAL_TIM_Base_Start_IT>
	}
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	20000440 	.word	0x20000440

080017ec <StartDHT22Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDHT22Task */
void StartDHT22Task(void *argument)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b08a      	sub	sp, #40	; 0x28
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]

	float temper, humid;
  /* Infinite loop */
  for(;;)
  {
	  DHT_data d = DHT_getData(DHT22);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f7ff fc4d 	bl	8001094 <DHT_getData>
 80017fa:	eeb0 7a40 	vmov.f32	s14, s0
 80017fe:	eef0 7a60 	vmov.f32	s15, s1
 8001802:	ed87 7a02 	vstr	s14, [r7, #8]
 8001806:	edc7 7a03 	vstr	s15, [r7, #12]
	  temper = roundf(d.temp * 10)/10;
 800180a:	edd7 7a03 	vldr	s15, [r7, #12]
 800180e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001816:	eeb0 0a67 	vmov.f32	s0, s15
 800181a:	f00b f99f 	bl	800cb5c <roundf>
 800181e:	eeb0 7a40 	vmov.f32	s14, s0
 8001822:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001826:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800182a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  humid = roundf(d.hum * 10)/10;
 800182e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001832:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001836:	ee67 7a87 	vmul.f32	s15, s15, s14
 800183a:	eeb0 0a67 	vmov.f32	s0, s15
 800183e:	f00b f98d 	bl	800cb5c <roundf>
 8001842:	eeb0 7a40 	vmov.f32	s14, s0
 8001846:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800184a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800184e:	edc7 7a08 	vstr	s15, [r7, #32]

	  measure.temper = temper;//roundf(d.temp * 10)/10;   /* round(d.temp * 10) / 10;roundf(val * 100) / 100;    Result: 37.77 floorf(val * 100) / 100; ceilf(val * 100) / 100;*/
 8001852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001854:	61bb      	str	r3, [r7, #24]
	  measure.humid = humid;//roundf(d.hum * 10)/10;
 8001856:	6a3b      	ldr	r3, [r7, #32]
 8001858:	61fb      	str	r3, [r7, #28]
	  Measure.Temper = temper;
 800185a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185c:	613b      	str	r3, [r7, #16]
	  Measure.Humid = humid;
 800185e:	6a3b      	ldr	r3, [r7, #32]
 8001860:	617b      	str	r3, [r7, #20]
	  osDelay(1000);
 8001862:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001866:	f003 fde3 	bl	8005430 <osDelay>
	  //HAL_Delay(1000);
	  //xQueueSend(myDataQueueHandle, &measure, 10);
	  osMessageQueuePut(myDataQueueHandle, &measure, 0, osWaitForever);
 800186a:	4b0b      	ldr	r3, [pc, #44]	; (8001898 <StartDHT22Task+0xac>)
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	f107 0118 	add.w	r1, r7, #24
 8001872:	f04f 33ff 	mov.w	r3, #4294967295
 8001876:	2200      	movs	r2, #0
 8001878:	f003 fe68 	bl	800554c <osMessageQueuePut>
	  osMessageQueuePut(myTempDisplayQueueHandle, &Measure, 0, osWaitForever);
 800187c:	4b07      	ldr	r3, [pc, #28]	; (800189c <StartDHT22Task+0xb0>)
 800187e:	6818      	ldr	r0, [r3, #0]
 8001880:	f107 0110 	add.w	r1, r7, #16
 8001884:	f04f 33ff 	mov.w	r3, #4294967295
 8001888:	2200      	movs	r2, #0
 800188a:	f003 fe5f 	bl	800554c <osMessageQueuePut>
	  osDelay(1);
 800188e:	2001      	movs	r0, #1
 8001890:	f003 fdce 	bl	8005430 <osDelay>
  {
 8001894:	e7ae      	b.n	80017f4 <StartDHT22Task+0x8>
 8001896:	bf00      	nop
 8001898:	200004dc 	.word	0x200004dc
 800189c:	200004e0 	.word	0x200004e0

080018a0 <StartCalculationTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCalculationTask */
void StartCalculationTask(void *argument)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08e      	sub	sp, #56	; 0x38
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
	static float tMin = 100, hMin = 100;
	static float tMax, hMax;
	float sum_temper;
	float sum_humid;

	for (int i = 0; i < 60; ++i)
 80018a8:	2300      	movs	r3, #0
 80018aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ac:	e00e      	b.n	80018cc <StartCalculationTask+0x2c>
	{
		value_t_per_t [i] = 111;
 80018ae:	4aae      	ldr	r2, [pc, #696]	; (8001b68 <StartCalculationTask+0x2c8>)
 80018b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	4413      	add	r3, r2
 80018b6:	4aad      	ldr	r2, [pc, #692]	; (8001b6c <StartCalculationTask+0x2cc>)
 80018b8:	601a      	str	r2, [r3, #0]
		value_h_per_t [i] = 111;
 80018ba:	4aad      	ldr	r2, [pc, #692]	; (8001b70 <StartCalculationTask+0x2d0>)
 80018bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	4aaa      	ldr	r2, [pc, #680]	; (8001b6c <StartCalculationTask+0x2cc>)
 80018c4:	601a      	str	r2, [r3, #0]
	for (int i = 0; i < 60; ++i)
 80018c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c8:	3301      	adds	r3, #1
 80018ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018ce:	2b3b      	cmp	r3, #59	; 0x3b
 80018d0:	dded      	ble.n	80018ae <StartCalculationTask+0xe>

  /* Infinite loop */
	for(;;)
	{
		//if(xQueueReceive(myDataQueueHandle, &measure, 10) == pdTRUE)
		if(osMessageQueueGet(myDataQueueHandle, &measure, 0, osWaitForever) == osOK)
 80018d2:	4ba8      	ldr	r3, [pc, #672]	; (8001b74 <StartCalculationTask+0x2d4>)
 80018d4:	6818      	ldr	r0, [r3, #0]
 80018d6:	f107 0118 	add.w	r1, r7, #24
 80018da:	f04f 33ff 	mov.w	r3, #4294967295
 80018de:	2200      	movs	r2, #0
 80018e0:	f003 fe94 	bl	800560c <osMessageQueueGet>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f040 8167 	bne.w	8001bba <StartCalculationTask+0x31a>
		{
			if(time_flag == 1)
 80018ec:	4ba2      	ldr	r3, [pc, #648]	; (8001b78 <StartCalculationTask+0x2d8>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	f040 8162 	bne.w	8001bba <StartCalculationTask+0x31a>
			{
				if(seconds_counter < 60)
 80018f6:	4ba1      	ldr	r3, [pc, #644]	; (8001b7c <StartCalculationTask+0x2dc>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b3b      	cmp	r3, #59	; 0x3b
 80018fc:	d809      	bhi.n	8001912 <StartCalculationTask+0x72>
				{
					seconds_counter ++;
 80018fe:	4b9f      	ldr	r3, [pc, #636]	; (8001b7c <StartCalculationTask+0x2dc>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	3301      	adds	r3, #1
 8001904:	b2da      	uxtb	r2, r3
 8001906:	4b9d      	ldr	r3, [pc, #628]	; (8001b7c <StartCalculationTask+0x2dc>)
 8001908:	701a      	strb	r2, [r3, #0]
					time_flag = 0;
 800190a:	4b9b      	ldr	r3, [pc, #620]	; (8001b78 <StartCalculationTask+0x2d8>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
 8001910:	e153      	b.n	8001bba <StartCalculationTask+0x31a>
				}
				else{
					if(counter < 60)
 8001912:	4b9b      	ldr	r3, [pc, #620]	; (8001b80 <StartCalculationTask+0x2e0>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	2b3b      	cmp	r3, #59	; 0x3b
 8001918:	f200 8146 	bhi.w	8001ba8 <StartCalculationTask+0x308>
					{
						value_t_per_t [counter] = measure.temper;
 800191c:	4b98      	ldr	r3, [pc, #608]	; (8001b80 <StartCalculationTask+0x2e0>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	4991      	ldr	r1, [pc, #580]	; (8001b68 <StartCalculationTask+0x2c8>)
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	440b      	add	r3, r1
 8001928:	601a      	str	r2, [r3, #0]
						value_h_per_t [counter] = measure.humid;
 800192a:	4b95      	ldr	r3, [pc, #596]	; (8001b80 <StartCalculationTask+0x2e0>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	498f      	ldr	r1, [pc, #572]	; (8001b70 <StartCalculationTask+0x2d0>)
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	601a      	str	r2, [r3, #0]

						//якщо не пройшла година то розраховуються знач. пройденого часу в хв.
						for(int i = 0; i < 60; ++i)
 8001938:	2300      	movs	r3, #0
 800193a:	62bb      	str	r3, [r7, #40]	; 0x28
 800193c:	e019      	b.n	8001972 <StartCalculationTask+0xd2>
						{
							if(value_t_per_t [i] == 111)
 800193e:	4a8a      	ldr	r2, [pc, #552]	; (8001b68 <StartCalculationTask+0x2c8>)
 8001940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	4413      	add	r3, r2
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001b84 <StartCalculationTask+0x2e4>
 800194e:	eef4 7a47 	vcmp.f32	s15, s14
 8001952:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001956:	d106      	bne.n	8001966 <StartCalculationTask+0xc6>
							{
								position = (i-1);
 8001958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800195a:	b2db      	uxtb	r3, r3
 800195c:	3b01      	subs	r3, #1
 800195e:	b2da      	uxtb	r2, r3
 8001960:	4b89      	ldr	r3, [pc, #548]	; (8001b88 <StartCalculationTask+0x2e8>)
 8001962:	701a      	strb	r2, [r3, #0]
								break;
 8001964:	e008      	b.n	8001978 <StartCalculationTask+0xd8>
							}
							else position = 60;
 8001966:	4b88      	ldr	r3, [pc, #544]	; (8001b88 <StartCalculationTask+0x2e8>)
 8001968:	223c      	movs	r2, #60	; 0x3c
 800196a:	701a      	strb	r2, [r3, #0]
						for(int i = 0; i < 60; ++i)
 800196c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800196e:	3301      	adds	r3, #1
 8001970:	62bb      	str	r3, [r7, #40]	; 0x28
 8001972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001974:	2b3b      	cmp	r3, #59	; 0x3b
 8001976:	dde2      	ble.n	800193e <StartCalculationTask+0x9e>
						}

						for(int i = 0; i < position; ++i)
 8001978:	2300      	movs	r3, #0
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
 800197c:	e06c      	b.n	8001a58 <StartCalculationTask+0x1b8>
						{
							if(tMax <= value_t_per_t [i])
 800197e:	4a7a      	ldr	r2, [pc, #488]	; (8001b68 <StartCalculationTask+0x2c8>)
 8001980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	ed93 7a00 	vldr	s14, [r3]
 800198a:	4b80      	ldr	r3, [pc, #512]	; (8001b8c <StartCalculationTask+0x2ec>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001998:	db06      	blt.n	80019a8 <StartCalculationTask+0x108>
							{
								tMax = value_t_per_t [i];
 800199a:	4a73      	ldr	r2, [pc, #460]	; (8001b68 <StartCalculationTask+0x2c8>)
 800199c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a79      	ldr	r2, [pc, #484]	; (8001b8c <StartCalculationTask+0x2ec>)
 80019a6:	6013      	str	r3, [r2, #0]
							}
							if(hMax <= value_h_per_t [i])
 80019a8:	4a71      	ldr	r2, [pc, #452]	; (8001b70 <StartCalculationTask+0x2d0>)
 80019aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	4413      	add	r3, r2
 80019b0:	ed93 7a00 	vldr	s14, [r3]
 80019b4:	4b76      	ldr	r3, [pc, #472]	; (8001b90 <StartCalculationTask+0x2f0>)
 80019b6:	edd3 7a00 	vldr	s15, [r3]
 80019ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c2:	db06      	blt.n	80019d2 <StartCalculationTask+0x132>
							{
								hMax = value_h_per_t [i];
 80019c4:	4a6a      	ldr	r2, [pc, #424]	; (8001b70 <StartCalculationTask+0x2d0>)
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a70      	ldr	r2, [pc, #448]	; (8001b90 <StartCalculationTask+0x2f0>)
 80019d0:	6013      	str	r3, [r2, #0]
							}

							if(tMin >= value_t_per_t [i])
 80019d2:	4a65      	ldr	r2, [pc, #404]	; (8001b68 <StartCalculationTask+0x2c8>)
 80019d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	ed93 7a00 	vldr	s14, [r3]
 80019de:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <StartCalculationTask+0x2f4>)
 80019e0:	edd3 7a00 	vldr	s15, [r3]
 80019e4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ec:	d811      	bhi.n	8001a12 <StartCalculationTask+0x172>
							{
								if (value_t_per_t [i] != 0)
 80019ee:	4a5e      	ldr	r2, [pc, #376]	; (8001b68 <StartCalculationTask+0x2c8>)
 80019f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80019fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a02:	d006      	beq.n	8001a12 <StartCalculationTask+0x172>
									tMin = value_t_per_t [i];
 8001a04:	4a58      	ldr	r2, [pc, #352]	; (8001b68 <StartCalculationTask+0x2c8>)
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a61      	ldr	r2, [pc, #388]	; (8001b94 <StartCalculationTask+0x2f4>)
 8001a10:	6013      	str	r3, [r2, #0]
							}
							if(hMin >= value_h_per_t [i])
 8001a12:	4a57      	ldr	r2, [pc, #348]	; (8001b70 <StartCalculationTask+0x2d0>)
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	ed93 7a00 	vldr	s14, [r3]
 8001a1e:	4b5e      	ldr	r3, [pc, #376]	; (8001b98 <StartCalculationTask+0x2f8>)
 8001a20:	edd3 7a00 	vldr	s15, [r3]
 8001a24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a2c:	d811      	bhi.n	8001a52 <StartCalculationTask+0x1b2>
							{
								if (value_h_per_t [i] != 0)
 8001a2e:	4a50      	ldr	r2, [pc, #320]	; (8001b70 <StartCalculationTask+0x2d0>)
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	4413      	add	r3, r2
 8001a36:	edd3 7a00 	vldr	s15, [r3]
 8001a3a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a42:	d006      	beq.n	8001a52 <StartCalculationTask+0x1b2>
									hMin = value_h_per_t [i];
 8001a44:	4a4a      	ldr	r2, [pc, #296]	; (8001b70 <StartCalculationTask+0x2d0>)
 8001a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a52      	ldr	r2, [pc, #328]	; (8001b98 <StartCalculationTask+0x2f8>)
 8001a50:	6013      	str	r3, [r2, #0]
						for(int i = 0; i < position; ++i)
 8001a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a54:	3301      	adds	r3, #1
 8001a56:	627b      	str	r3, [r7, #36]	; 0x24
 8001a58:	4b4b      	ldr	r3, [pc, #300]	; (8001b88 <StartCalculationTask+0x2e8>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a60:	4293      	cmp	r3, r2
 8001a62:	db8c      	blt.n	800197e <StartCalculationTask+0xde>
							}
						}

						counter ++;
 8001a64:	4b46      	ldr	r3, [pc, #280]	; (8001b80 <StartCalculationTask+0x2e0>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	3301      	adds	r3, #1
 8001a6a:	b2da      	uxtb	r2, r3
 8001a6c:	4b44      	ldr	r3, [pc, #272]	; (8001b80 <StartCalculationTask+0x2e0>)
 8001a6e:	701a      	strb	r2, [r3, #0]
						for(int i = 0; i < position; ++i)
 8001a70:	2300      	movs	r3, #0
 8001a72:	623b      	str	r3, [r7, #32]
 8001a74:	e01a      	b.n	8001aac <StartCalculationTask+0x20c>
						{
							sum_temper = sum_temper + value_t_per_t [i];
 8001a76:	4a3c      	ldr	r2, [pc, #240]	; (8001b68 <StartCalculationTask+0x2c8>)
 8001a78:	6a3b      	ldr	r3, [r7, #32]
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	4413      	add	r3, r2
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
							sum_humid = sum_humid + value_h_per_t [i];
 8001a8e:	4a38      	ldr	r2, [pc, #224]	; (8001b70 <StartCalculationTask+0x2d0>)
 8001a90:	6a3b      	ldr	r3, [r7, #32]
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8001a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001aa2:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
						for(int i = 0; i < position; ++i)
 8001aa6:	6a3b      	ldr	r3, [r7, #32]
 8001aa8:	3301      	adds	r3, #1
 8001aaa:	623b      	str	r3, [r7, #32]
 8001aac:	4b36      	ldr	r3, [pc, #216]	; (8001b88 <StartCalculationTask+0x2e8>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	dbde      	blt.n	8001a76 <StartCalculationTask+0x1d6>
						}
						tMid = sum_temper / position;
 8001ab8:	4b33      	ldr	r3, [pc, #204]	; (8001b88 <StartCalculationTask+0x2e8>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	ee07 3a90 	vmov	s15, r3
 8001ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac4:	edd7 6a0d 	vldr	s13, [r7, #52]	; 0x34
 8001ac8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001acc:	4b33      	ldr	r3, [pc, #204]	; (8001b9c <StartCalculationTask+0x2fc>)
 8001ace:	edc3 7a00 	vstr	s15, [r3]
						hMid = sum_humid / position;
 8001ad2:	4b2d      	ldr	r3, [pc, #180]	; (8001b88 <StartCalculationTask+0x2e8>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ade:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
 8001ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ae6:	4b2e      	ldr	r3, [pc, #184]	; (8001ba0 <StartCalculationTask+0x300>)
 8001ae8:	edc3 7a00 	vstr	s15, [r3]
						sum_temper = 0;
 8001aec:	f04f 0300 	mov.w	r3, #0
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
						sum_humid = 0;
 8001af2:	f04f 0300 	mov.w	r3, #0
 8001af6:	633b      	str	r3, [r7, #48]	; 0x30
						deviation.max_deviation_t_pos = tMax - tMid;
 8001af8:	4b24      	ldr	r3, [pc, #144]	; (8001b8c <StartCalculationTask+0x2ec>)
 8001afa:	ed93 7a00 	vldr	s14, [r3]
 8001afe:	4b27      	ldr	r3, [pc, #156]	; (8001b9c <StartCalculationTask+0x2fc>)
 8001b00:	edd3 7a00 	vldr	s15, [r3]
 8001b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b08:	edc7 7a02 	vstr	s15, [r7, #8]
						deviation.max_deviation_h_pos = hMax - hMid;
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <StartCalculationTask+0x2f0>)
 8001b0e:	ed93 7a00 	vldr	s14, [r3]
 8001b12:	4b23      	ldr	r3, [pc, #140]	; (8001ba0 <StartCalculationTask+0x300>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b1c:	edc7 7a04 	vstr	s15, [r7, #16]
						deviation.max_deviation_t_neg = tMin - tMid;
 8001b20:	4b1c      	ldr	r3, [pc, #112]	; (8001b94 <StartCalculationTask+0x2f4>)
 8001b22:	ed93 7a00 	vldr	s14, [r3]
 8001b26:	4b1d      	ldr	r3, [pc, #116]	; (8001b9c <StartCalculationTask+0x2fc>)
 8001b28:	edd3 7a00 	vldr	s15, [r3]
 8001b2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b30:	edc7 7a03 	vstr	s15, [r7, #12]
						deviation.max_deviation_h_neg = hMin - hMid;
 8001b34:	4b18      	ldr	r3, [pc, #96]	; (8001b98 <StartCalculationTask+0x2f8>)
 8001b36:	ed93 7a00 	vldr	s14, [r3]
 8001b3a:	4b19      	ldr	r3, [pc, #100]	; (8001ba0 <StartCalculationTask+0x300>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b44:	edc7 7a05 	vstr	s15, [r7, #20]

						tMax = 0;
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <StartCalculationTask+0x2ec>)
 8001b4a:	f04f 0200 	mov.w	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
						hMax = 0;
 8001b50:	4b0f      	ldr	r3, [pc, #60]	; (8001b90 <StartCalculationTask+0x2f0>)
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
						tMin = 100;
 8001b58:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <StartCalculationTask+0x2f4>)
 8001b5a:	4a12      	ldr	r2, [pc, #72]	; (8001ba4 <StartCalculationTask+0x304>)
 8001b5c:	601a      	str	r2, [r3, #0]
						hMin = 100;
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <StartCalculationTask+0x2f8>)
 8001b60:	4a10      	ldr	r2, [pc, #64]	; (8001ba4 <StartCalculationTask+0x304>)
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	e023      	b.n	8001bae <StartCalculationTask+0x30e>
 8001b66:	bf00      	nop
 8001b68:	20000000 	.word	0x20000000
 8001b6c:	42de0000 	.word	0x42de0000
 8001b70:	200000f0 	.word	0x200000f0
 8001b74:	200004dc 	.word	0x200004dc
 8001b78:	200004ea 	.word	0x200004ea
 8001b7c:	200004e8 	.word	0x200004e8
 8001b80:	200004e9 	.word	0x200004e9
 8001b84:	42de0000 	.word	0x42de0000
 8001b88:	200004ec 	.word	0x200004ec
 8001b8c:	200004f0 	.word	0x200004f0
 8001b90:	200004f4 	.word	0x200004f4
 8001b94:	200001e0 	.word	0x200001e0
 8001b98:	200001e4 	.word	0x200001e4
 8001b9c:	200004f8 	.word	0x200004f8
 8001ba0:	200004fc 	.word	0x200004fc
 8001ba4:	42c80000 	.word	0x42c80000
					}
					else
					{
						counter = 0;
 8001ba8:	4b0a      	ldr	r3, [pc, #40]	; (8001bd4 <StartCalculationTask+0x334>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]
					}
					time_flag = 0;
 8001bae:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <StartCalculationTask+0x338>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	701a      	strb	r2, [r3, #0]
					//Скидання секундного прапорця
					seconds_counter = 0;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <StartCalculationTask+0x33c>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	701a      	strb	r2, [r3, #0]
				}

			}
			//time_flag = 0;
		}
		osMessageQueuePut(myCalcDisplayQueueHandle, &deviation, 0, osWaitForever);
 8001bba:	4b09      	ldr	r3, [pc, #36]	; (8001be0 <StartCalculationTask+0x340>)
 8001bbc:	6818      	ldr	r0, [r3, #0]
 8001bbe:	f107 0108 	add.w	r1, r7, #8
 8001bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f003 fcc0 	bl	800554c <osMessageQueuePut>
		osDelay(1);
 8001bcc:	2001      	movs	r0, #1
 8001bce:	f003 fc2f 	bl	8005430 <osDelay>
		if(osMessageQueueGet(myDataQueueHandle, &measure, 0, osWaitForever) == osOK)
 8001bd2:	e67e      	b.n	80018d2 <StartCalculationTask+0x32>
 8001bd4:	200004e9 	.word	0x200004e9
 8001bd8:	200004ea 	.word	0x200004ea
 8001bdc:	200004e8 	.word	0x200004e8
 8001be0:	200004e4 	.word	0x200004e4

08001be4 <StartDisplayTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b088      	sub	sp, #32
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
	Queue_Temp_Hum_t Measure;
	Queue_Dev_t deviation;
  /* Infinite loop */
  for(;;)
  {
	  osMessageQueueGet(myTempDisplayQueueHandle, &Measure, 0, osWaitForever);
 8001bec:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <StartDisplayTask+0xb0>)
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	f107 0118 	add.w	r1, r7, #24
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f003 fd07 	bl	800560c <osMessageQueueGet>
	  osMessageQueueGet(myCalcDisplayQueueHandle, &deviation, 0, osWaitForever);
 8001bfe:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <StartDisplayTask+0xb4>)
 8001c00:	6818      	ldr	r0, [r3, #0]
 8001c02:	f107 0108 	add.w	r1, r7, #8
 8001c06:	f04f 33ff 	mov.w	r3, #4294967295
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f003 fcfe 	bl	800560c <osMessageQueueGet>
	  switch(btn_state)
 8001c10:	4b22      	ldr	r3, [pc, #136]	; (8001c9c <StartDisplayTask+0xb8>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b05      	cmp	r3, #5
 8001c16:	d839      	bhi.n	8001c8c <StartDisplayTask+0xa8>
 8001c18:	a201      	add	r2, pc, #4	; (adr r2, 8001c20 <StartDisplayTask+0x3c>)
 8001c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c1e:	bf00      	nop
 8001c20:	08001c39 	.word	0x08001c39
 8001c24:	08001c47 	.word	0x08001c47
 8001c28:	08001c55 	.word	0x08001c55
 8001c2c:	08001c63 	.word	0x08001c63
 8001c30:	08001c71 	.word	0x08001c71
 8001c34:	08001c7f 	.word	0x08001c7f
	  {
	  case 0:
		  max7219_Send_float(Measure.Temper);
 8001c38:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c40:	f000 fa3e 	bl	80020c0 <max7219_Send_float>
		  break;
 8001c44:	e022      	b.n	8001c8c <StartDisplayTask+0xa8>
	  case 1:
		  max7219_Send_float(Measure.Humid);
 8001c46:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001c4e:	f000 fa37 	bl	80020c0 <max7219_Send_float>
		  break;
 8001c52:	e01b      	b.n	8001c8c <StartDisplayTask+0xa8>
	  case 2:
		  max7219_Send_float(deviation.max_deviation_t_pos);
 8001c54:	edd7 7a02 	vldr	s15, [r7, #8]
 8001c58:	eeb0 0a67 	vmov.f32	s0, s15
 8001c5c:	f000 fa30 	bl	80020c0 <max7219_Send_float>
	  		  break;
 8001c60:	e014      	b.n	8001c8c <StartDisplayTask+0xa8>
	  case 3:
		  max7219_Send_float(deviation.max_deviation_t_neg);
 8001c62:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c66:	eeb0 0a67 	vmov.f32	s0, s15
 8001c6a:	f000 fa29 	bl	80020c0 <max7219_Send_float>
	  		  break;
 8001c6e:	e00d      	b.n	8001c8c <StartDisplayTask+0xa8>
	  case 4:
		  max7219_Send_float(deviation.max_deviation_h_pos);
 8001c70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001c74:	eeb0 0a67 	vmov.f32	s0, s15
 8001c78:	f000 fa22 	bl	80020c0 <max7219_Send_float>
	  		  break;
 8001c7c:	e006      	b.n	8001c8c <StartDisplayTask+0xa8>
	  case 5:
		  max7219_Send_float(deviation.max_deviation_h_neg);
 8001c7e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c82:	eeb0 0a67 	vmov.f32	s0, s15
 8001c86:	f000 fa1b 	bl	80020c0 <max7219_Send_float>
	  		  break;
 8001c8a:	bf00      	nop
	  }
	  osDelay(1);
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f003 fbcf 	bl	8005430 <osDelay>
	  osMessageQueueGet(myTempDisplayQueueHandle, &Measure, 0, osWaitForever);
 8001c92:	e7ab      	b.n	8001bec <StartDisplayTask+0x8>
 8001c94:	200004e0 	.word	0x200004e0
 8001c98:	200004e4 	.word	0x200004e4
 8001c9c:	200004eb 	.word	0x200004eb

08001ca0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a1c      	ldr	r2, [pc, #112]	; (8001d20 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d101      	bne.n	8001cb6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001cb2:	f001 f9c9 	bl	8003048 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  if(htim->Instance == TIM1)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a1a      	ldr	r2, [pc, #104]	; (8001d24 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d122      	bne.n	8001d06 <HAL_TIM_PeriodElapsedCallback+0x66>
  {
	  HAL_TIM_Base_Stop_IT(&htim1); // останавливаем таймер
 8001cc0:	4819      	ldr	r0, [pc, #100]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8001cc2:	f002 fea5 	bl	8004a10 <HAL_TIM_Base_Stop_IT>
	  __HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_13);  // очищаем бит EXTI_PR (бит прерывания)
 8001cc6:	4b19      	ldr	r3, [pc, #100]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8001cc8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ccc:	615a      	str	r2, [r3, #20]
	  NVIC_ClearPendingIRQ(EXTI15_10_IRQn); // очищаем бит NVIC_ICPRx (бит очереди)
 8001cce:	2028      	movs	r0, #40	; 0x28
 8001cd0:	f7ff fb16 	bl	8001300 <__NVIC_ClearPendingIRQ>
	  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);   // включаем внешнее прерывание
 8001cd4:	2028      	movs	r0, #40	; 0x28
 8001cd6:	f001 faf3 	bl	80032c0 <HAL_NVIC_EnableIRQ>
	  //btn_cur = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);

	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 1)
 8001cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001cde:	4814      	ldr	r0, [pc, #80]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8001ce0:	f001 fcd8 	bl	8003694 <HAL_GPIO_ReadPin>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d10d      	bne.n	8001d06 <HAL_TIM_PeriodElapsedCallback+0x66>
	  {
		  if(btn_state < 5)
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b04      	cmp	r3, #4
 8001cf0:	d806      	bhi.n	8001d00 <HAL_TIM_PeriodElapsedCallback+0x60>
		  {
			  btn_state ++;
 8001cf2:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	3301      	adds	r3, #1
 8001cf8:	b2da      	uxtb	r2, r3
 8001cfa:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001cfc:	701a      	strb	r2, [r3, #0]
 8001cfe:	e002      	b.n	8001d06 <HAL_TIM_PeriodElapsedCallback+0x66>
		  }
		  else btn_state = 0;
 8001d00:	4b0c      	ldr	r3, [pc, #48]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	701a      	strb	r2, [r3, #0]
	  }
  }

  if(htim->Instance == TIM2)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d0e:	d102      	bne.n	8001d16 <HAL_TIM_PeriodElapsedCallback+0x76>
//	  else
//	  {
//		  time_flag = 1;
//		  time_counter = 0;
//	  }
	  time_flag = 1;
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE END Callback 1 */
}
 8001d16:	bf00      	nop
 8001d18:	3708      	adds	r7, #8
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40001000 	.word	0x40001000
 8001d24:	40010000 	.word	0x40010000
 8001d28:	20000440 	.word	0x20000440
 8001d2c:	40013c00 	.word	0x40013c00
 8001d30:	40020800 	.word	0x40020800
 8001d34:	200004eb 	.word	0x200004eb
 8001d38:	200004ea 	.word	0x200004ea

08001d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d40:	b672      	cpsid	i
}
 8001d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <Error_Handler+0x8>
	...

08001d48 <max7219_Transmit>:
/*----------Общение с max7219 по spi-----------------*/
///Общение с max7219 по spi(выбор регистра и отправка данных).
///(См. Datasheet MAX7219/MAX7221. Cтр.7, табл. 2).
/// \param adress - адрес регистра, в который производится отправка данных;
/// \param data - данные.
void max7219_Transmit(uint8_t adress, uint8_t data) {
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	4603      	mov	r3, r0
 8001d50:	460a      	mov	r2, r1
 8001d52:	71fb      	strb	r3, [r7, #7]
 8001d54:	4613      	mov	r3, r2
 8001d56:	71bb      	strb	r3, [r7, #6]
	uint8_t tx_buffer[1] = { 0 };
 8001d58:	2300      	movs	r3, #0
 8001d5a:	733b      	strb	r3, [r7, #12]
	cs_set();
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	2110      	movs	r1, #16
 8001d60:	480e      	ldr	r0, [pc, #56]	; (8001d9c <max7219_Transmit+0x54>)
 8001d62:	f001 fcaf 	bl	80036c4 <HAL_GPIO_WritePin>
	tx_buffer[0] = adress;
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi1, tx_buffer, 1, 100);
 8001d6a:	f107 010c 	add.w	r1, r7, #12
 8001d6e:	2364      	movs	r3, #100	; 0x64
 8001d70:	2201      	movs	r2, #1
 8001d72:	480b      	ldr	r0, [pc, #44]	; (8001da0 <max7219_Transmit+0x58>)
 8001d74:	f002 fa67 	bl	8004246 <HAL_SPI_Transmit>
	tx_buffer[0] = data;
 8001d78:	79bb      	ldrb	r3, [r7, #6]
 8001d7a:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&hspi1, tx_buffer, 1, 100);
 8001d7c:	f107 010c 	add.w	r1, r7, #12
 8001d80:	2364      	movs	r3, #100	; 0x64
 8001d82:	2201      	movs	r2, #1
 8001d84:	4806      	ldr	r0, [pc, #24]	; (8001da0 <max7219_Transmit+0x58>)
 8001d86:	f002 fa5e 	bl	8004246 <HAL_SPI_Transmit>
	cs_reset();
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	2110      	movs	r1, #16
 8001d8e:	4803      	ldr	r0, [pc, #12]	; (8001d9c <max7219_Transmit+0x54>)
 8001d90:	f001 fc98 	bl	80036c4 <HAL_GPIO_WritePin>
}
 8001d94:	bf00      	nop
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	200003e8 	.word	0x200003e8

08001da4 <max7219_Shutdown>:
/*----------Общение с max7219 по spi-----------------*/

/*--------------------Режим сна----------------------*/
///Режим сна.(См. Datasheet MAX7219/MAX7221. Стр.7, табл. 3).
/// \param data - данные. 0 - Режим сна. 1 - Нормальный режим.
void max7219_Shutdown(bool data){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]
	max7219_Transmit(0x0C, data);
 8001dae:	79fb      	ldrb	r3, [r7, #7]
 8001db0:	4619      	mov	r1, r3
 8001db2:	200c      	movs	r0, #12
 8001db4:	f7ff ffc8 	bl	8001d48 <max7219_Transmit>
}
 8001db8:	bf00      	nop
 8001dba:	3708      	adds	r7, #8
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <max7219_Display_Test>:
/*--------------------Режим сна----------------------*/

/*-------------------Тест дисплея--------------------*/
///Тест дисплея.(См. Datasheet MAX7219/MAX7221. Стр.10, табл. 10).
/// \param data - данные. 0 - Нормальный режим. 1 - Тест дисплея.
void max7219_Display_Test(bool data){
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	71fb      	strb	r3, [r7, #7]
	max7219_Transmit(0x0F, data);
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	4619      	mov	r1, r3
 8001dce:	200f      	movs	r0, #15
 8001dd0:	f7ff ffba 	bl	8001d48 <max7219_Transmit>
}
 8001dd4:	bf00      	nop
 8001dd6:	3708      	adds	r7, #8
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}

08001ddc <max7219_Display_Clean>:
/*-------------------Тест дисплея--------------------*/

/*-----------------Очистка дисплея-------------------*/
///Очистка дисплея. (См. мой урок https://youtu.be/BonEEaQX8vg).
void max7219_Display_Clean(void){
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
	max7219_Transmit(0x01, 0x00);
 8001de0:	2100      	movs	r1, #0
 8001de2:	2001      	movs	r0, #1
 8001de4:	f7ff ffb0 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(0x02, 0x00);
 8001de8:	2100      	movs	r1, #0
 8001dea:	2002      	movs	r0, #2
 8001dec:	f7ff ffac 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(0x03, 0x00);
 8001df0:	2100      	movs	r1, #0
 8001df2:	2003      	movs	r0, #3
 8001df4:	f7ff ffa8 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(0x04, 0x00);
 8001df8:	2100      	movs	r1, #0
 8001dfa:	2004      	movs	r0, #4
 8001dfc:	f7ff ffa4 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(0x05, 0x00);
 8001e00:	2100      	movs	r1, #0
 8001e02:	2005      	movs	r0, #5
 8001e04:	f7ff ffa0 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(0x06, 0x00);
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2006      	movs	r0, #6
 8001e0c:	f7ff ff9c 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(0x07, 0x00);
 8001e10:	2100      	movs	r1, #0
 8001e12:	2007      	movs	r0, #7
 8001e14:	f7ff ff98 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(0x08, 0x00);
 8001e18:	2100      	movs	r1, #0
 8001e1a:	2008      	movs	r0, #8
 8001e1c:	f7ff ff94 	bl	8001d48 <max7219_Transmit>
}
 8001e20:	bf00      	nop
 8001e22:	bd80      	pop	{r7, pc}

08001e24 <max7219_Intensity>:
/*-----------------Очистка дисплея-------------------*/

/*-----------------Яркость дисплея-------------------*/
///Яркость дисплея.(См. Datasheet MAX7219/MAX7221. Стр.9, табл. 7).
/// \param data - данные. Значения от 0x00 до 0x0F.
void max7219_Intensity(uint8_t data){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	71fb      	strb	r3, [r7, #7]
max7219_Transmit(0x0A, data);
 8001e2e:	79fb      	ldrb	r3, [r7, #7]
 8001e30:	4619      	mov	r1, r3
 8001e32:	200a      	movs	r0, #10
 8001e34:	f7ff ff88 	bl	8001d48 <max7219_Transmit>
}
 8001e38:	bf00      	nop
 8001e3a:	3708      	adds	r7, #8
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <max7219_Init>:
/*-----------------Яркость дисплея-------------------*/

/*--------------Инициализация дисплея----------------*/
///Инициализация дисплея.
void max7219_Init(void) {
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
	max7219_Transmit(0x09, 0x00); //Работа без режима декодирование
 8001e44:	2100      	movs	r1, #0
 8001e46:	2009      	movs	r0, #9
 8001e48:	f7ff ff7e 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(0x0B, 0x07); //Количество используемых разрядов
 8001e4c:	2107      	movs	r1, #7
 8001e4e:	200b      	movs	r0, #11
 8001e50:	f7ff ff7a 	bl	8001d48 <max7219_Transmit>
	max7219_Intensity(0x0F); //Интенсивность свечения на максимум
 8001e54:	200f      	movs	r0, #15
 8001e56:	f7ff ffe5 	bl	8001e24 <max7219_Intensity>
	max7219_Shutdown(1); //Вывести дисплей из сна в нормальный режим работы
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f7ff ffa2 	bl	8001da4 <max7219_Shutdown>
	max7219_Display_Test(1); //Проверка дисплея
 8001e60:	2001      	movs	r0, #1
 8001e62:	f7ff ffad 	bl	8001dc0 <max7219_Display_Test>
	HAL_Delay(2000); //Время на визуальный осмотр
 8001e66:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001e6a:	f001 f90d 	bl	8003088 <HAL_Delay>
	max7219_Display_Test(0); //Перевод дисплея в нормальный режим работы
 8001e6e:	2000      	movs	r0, #0
 8001e70:	f7ff ffa6 	bl	8001dc0 <max7219_Display_Test>
	max7219_Display_Clean(); //Очистка дисплея
 8001e74:	f7ff ffb2 	bl	8001ddc <max7219_Display_Clean>
}
 8001e78:	bf00      	nop
 8001e7a:	bd80      	pop	{r7, pc}

08001e7c <max7219_send_symbol>:
/*--------------Инициализация дисплея----------------*/

/*-----------Отправка символов на дисплей------------*/
///Отправка символов на дисплей. Функция вспомогательная.
/// \param *tx_buffer - Массив с данными, которые будут выводиться на дисплей.
void max7219_send_symbol(uint8_t *tx_buffer) {
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
	max7219_Transmit(8, tx_buffer[0]);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	2008      	movs	r0, #8
 8001e8c:	f7ff ff5c 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(7, tx_buffer[1]);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3301      	adds	r3, #1
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	4619      	mov	r1, r3
 8001e98:	2007      	movs	r0, #7
 8001e9a:	f7ff ff55 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(6, tx_buffer[2]);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	2006      	movs	r0, #6
 8001ea8:	f7ff ff4e 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(5, tx_buffer[3]);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	3303      	adds	r3, #3
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	2005      	movs	r0, #5
 8001eb6:	f7ff ff47 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(4, tx_buffer[4]);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	2004      	movs	r0, #4
 8001ec4:	f7ff ff40 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(3, tx_buffer[5]);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3305      	adds	r3, #5
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	4619      	mov	r1, r3
 8001ed0:	2003      	movs	r0, #3
 8001ed2:	f7ff ff39 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(2, tx_buffer[6]);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3306      	adds	r3, #6
 8001eda:	781b      	ldrb	r3, [r3, #0]
 8001edc:	4619      	mov	r1, r3
 8001ede:	2002      	movs	r0, #2
 8001ee0:	f7ff ff32 	bl	8001d48 <max7219_Transmit>
	max7219_Transmit(1, tx_buffer[7]);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3307      	adds	r3, #7
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	4619      	mov	r1, r3
 8001eec:	2001      	movs	r0, #1
 8001eee:	f7ff ff2b 	bl	8001d48 <max7219_Transmit>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
	...

08001efc <max7219_num>:
/*-----------Отправка символов на дисплей------------*/

/*---Подготовка данных к выводу на дисплей. Цифры, минус, пробел---*/
///Подготовка данных к выводу на дисплей. Цифры, минус, пробел. Функция вспомогательная.
void max7219_num(uint8_t rg, uint32_t value) {
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4603      	mov	r3, r0
 8001f04:	6039      	str	r1, [r7, #0]
 8001f06:	71fb      	strb	r3, [r7, #7]
	switch (value) {
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	2bff      	cmp	r3, #255	; 0xff
 8001f0c:	d070      	beq.n	8001ff0 <max7219_num+0xf4>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	2bff      	cmp	r3, #255	; 0xff
 8001f12:	d872      	bhi.n	8001ffa <max7219_num+0xfe>
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	d820      	bhi.n	8001f5c <max7219_num+0x60>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	2b0c      	cmp	r3, #12
 8001f1e:	d86c      	bhi.n	8001ffa <max7219_num+0xfe>
 8001f20:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <max7219_num+0x2c>)
 8001f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f26:	bf00      	nop
 8001f28:	08001f65 	.word	0x08001f65
 8001f2c:	08001f6f 	.word	0x08001f6f
 8001f30:	08001f79 	.word	0x08001f79
 8001f34:	08001f83 	.word	0x08001f83
 8001f38:	08001f8d 	.word	0x08001f8d
 8001f3c:	08001f97 	.word	0x08001f97
 8001f40:	08001fa1 	.word	0x08001fa1
 8001f44:	08001fab 	.word	0x08001fab
 8001f48:	08001fb5 	.word	0x08001fb5
 8001f4c:	08001fbf 	.word	0x08001fbf
 8001f50:	08001fc9 	.word	0x08001fc9
 8001f54:	08001fd3 	.word	0x08001fd3
 8001f58:	08001fdd 	.word	0x08001fdd
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2bfe      	cmp	r3, #254	; 0xfe
 8001f60:	d041      	beq.n	8001fe6 <max7219_num+0xea>
		break;
	case 255:
		symbol[rg] = _255;
		break;
	}
}
 8001f62:	e04a      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _0;
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	4a28      	ldr	r2, [pc, #160]	; (8002008 <max7219_num+0x10c>)
 8001f68:	217e      	movs	r1, #126	; 0x7e
 8001f6a:	54d1      	strb	r1, [r2, r3]
		break;
 8001f6c:	e045      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _1;
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	4a25      	ldr	r2, [pc, #148]	; (8002008 <max7219_num+0x10c>)
 8001f72:	2130      	movs	r1, #48	; 0x30
 8001f74:	54d1      	strb	r1, [r2, r3]
		break;
 8001f76:	e040      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _2;
 8001f78:	79fb      	ldrb	r3, [r7, #7]
 8001f7a:	4a23      	ldr	r2, [pc, #140]	; (8002008 <max7219_num+0x10c>)
 8001f7c:	216d      	movs	r1, #109	; 0x6d
 8001f7e:	54d1      	strb	r1, [r2, r3]
		break;
 8001f80:	e03b      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _3;
 8001f82:	79fb      	ldrb	r3, [r7, #7]
 8001f84:	4a20      	ldr	r2, [pc, #128]	; (8002008 <max7219_num+0x10c>)
 8001f86:	2179      	movs	r1, #121	; 0x79
 8001f88:	54d1      	strb	r1, [r2, r3]
		break;
 8001f8a:	e036      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _4;
 8001f8c:	79fb      	ldrb	r3, [r7, #7]
 8001f8e:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <max7219_num+0x10c>)
 8001f90:	2133      	movs	r1, #51	; 0x33
 8001f92:	54d1      	strb	r1, [r2, r3]
		break;
 8001f94:	e031      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _5;
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	4a1b      	ldr	r2, [pc, #108]	; (8002008 <max7219_num+0x10c>)
 8001f9a:	215b      	movs	r1, #91	; 0x5b
 8001f9c:	54d1      	strb	r1, [r2, r3]
		break;
 8001f9e:	e02c      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _6;
 8001fa0:	79fb      	ldrb	r3, [r7, #7]
 8001fa2:	4a19      	ldr	r2, [pc, #100]	; (8002008 <max7219_num+0x10c>)
 8001fa4:	215f      	movs	r1, #95	; 0x5f
 8001fa6:	54d1      	strb	r1, [r2, r3]
		break;
 8001fa8:	e027      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _7;
 8001faa:	79fb      	ldrb	r3, [r7, #7]
 8001fac:	4a16      	ldr	r2, [pc, #88]	; (8002008 <max7219_num+0x10c>)
 8001fae:	2170      	movs	r1, #112	; 0x70
 8001fb0:	54d1      	strb	r1, [r2, r3]
		break;
 8001fb2:	e022      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _8;
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	4a14      	ldr	r2, [pc, #80]	; (8002008 <max7219_num+0x10c>)
 8001fb8:	217f      	movs	r1, #127	; 0x7f
 8001fba:	54d1      	strb	r1, [r2, r3]
		break;
 8001fbc:	e01d      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _9;
 8001fbe:	79fb      	ldrb	r3, [r7, #7]
 8001fc0:	4a11      	ldr	r2, [pc, #68]	; (8002008 <max7219_num+0x10c>)
 8001fc2:	217b      	movs	r1, #123	; 0x7b
 8001fc4:	54d1      	strb	r1, [r2, r3]
		break;
 8001fc6:	e018      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _t;
 8001fc8:	79fb      	ldrb	r3, [r7, #7]
 8001fca:	4a0f      	ldr	r2, [pc, #60]	; (8002008 <max7219_num+0x10c>)
 8001fcc:	210f      	movs	r1, #15
 8001fce:	54d1      	strb	r1, [r2, r3]
		break;
 8001fd0:	e013      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _H;
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <max7219_num+0x10c>)
 8001fd6:	2137      	movs	r1, #55	; 0x37
 8001fd8:	54d1      	strb	r1, [r2, r3]
		break;
 8001fda:	e00e      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _d;
 8001fdc:	79fb      	ldrb	r3, [r7, #7]
 8001fde:	4a0a      	ldr	r2, [pc, #40]	; (8002008 <max7219_num+0x10c>)
 8001fe0:	213d      	movs	r1, #61	; 0x3d
 8001fe2:	54d1      	strb	r1, [r2, r3]
		break;
 8001fe4:	e009      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _254;
 8001fe6:	79fb      	ldrb	r3, [r7, #7]
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <max7219_num+0x10c>)
 8001fea:	2101      	movs	r1, #1
 8001fec:	54d1      	strb	r1, [r2, r3]
		break;
 8001fee:	e004      	b.n	8001ffa <max7219_num+0xfe>
		symbol[rg] = _255;
 8001ff0:	79fb      	ldrb	r3, [r7, #7]
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <max7219_num+0x10c>)
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	54d1      	strb	r1, [r2, r3]
		break;
 8001ff8:	bf00      	nop
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000500 	.word	0x20000500

0800200c <max7219_num_point>:
/*---Подготовка данных к выводу на дисплей. Цифры, минус, пробел---*/

/*---Подготовка данных к выводу на дисплей. Цифры с точкой---*/
///Подготовка данных к выводу на дисплей. Цифры с точкой. Функция вспомогательная.
void max7219_num_point(uint8_t rg, uint32_t value) {
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	4603      	mov	r3, r0
 8002014:	6039      	str	r1, [r7, #0]
 8002016:	71fb      	strb	r3, [r7, #7]
	switch (value) {
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	2b09      	cmp	r3, #9
 800201c:	d848      	bhi.n	80020b0 <max7219_num_point+0xa4>
 800201e:	a201      	add	r2, pc, #4	; (adr r2, 8002024 <max7219_num_point+0x18>)
 8002020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002024:	0800204d 	.word	0x0800204d
 8002028:	08002057 	.word	0x08002057
 800202c:	08002061 	.word	0x08002061
 8002030:	0800206b 	.word	0x0800206b
 8002034:	08002075 	.word	0x08002075
 8002038:	0800207f 	.word	0x0800207f
 800203c:	08002089 	.word	0x08002089
 8002040:	08002093 	.word	0x08002093
 8002044:	0800209d 	.word	0x0800209d
 8002048:	080020a7 	.word	0x080020a7
	case 0:
		symbol[rg] = _0_point;
 800204c:	79fb      	ldrb	r3, [r7, #7]
 800204e:	4a1b      	ldr	r2, [pc, #108]	; (80020bc <max7219_num_point+0xb0>)
 8002050:	21fe      	movs	r1, #254	; 0xfe
 8002052:	54d1      	strb	r1, [r2, r3]
		break;
 8002054:	e02c      	b.n	80020b0 <max7219_num_point+0xa4>
	case 1:
		symbol[rg] = _1_point;
 8002056:	79fb      	ldrb	r3, [r7, #7]
 8002058:	4a18      	ldr	r2, [pc, #96]	; (80020bc <max7219_num_point+0xb0>)
 800205a:	21b0      	movs	r1, #176	; 0xb0
 800205c:	54d1      	strb	r1, [r2, r3]
		break;
 800205e:	e027      	b.n	80020b0 <max7219_num_point+0xa4>
	case 2:
		symbol[rg] = _2_point;
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	4a16      	ldr	r2, [pc, #88]	; (80020bc <max7219_num_point+0xb0>)
 8002064:	21ed      	movs	r1, #237	; 0xed
 8002066:	54d1      	strb	r1, [r2, r3]
		break;
 8002068:	e022      	b.n	80020b0 <max7219_num_point+0xa4>
	case 3:
		symbol[rg] = _3_point;
 800206a:	79fb      	ldrb	r3, [r7, #7]
 800206c:	4a13      	ldr	r2, [pc, #76]	; (80020bc <max7219_num_point+0xb0>)
 800206e:	21f9      	movs	r1, #249	; 0xf9
 8002070:	54d1      	strb	r1, [r2, r3]
		break;
 8002072:	e01d      	b.n	80020b0 <max7219_num_point+0xa4>
	case 4:
		symbol[rg] = _4_point;
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	4a11      	ldr	r2, [pc, #68]	; (80020bc <max7219_num_point+0xb0>)
 8002078:	21b3      	movs	r1, #179	; 0xb3
 800207a:	54d1      	strb	r1, [r2, r3]
		break;
 800207c:	e018      	b.n	80020b0 <max7219_num_point+0xa4>
	case 5:
		symbol[rg] = _5_point;
 800207e:	79fb      	ldrb	r3, [r7, #7]
 8002080:	4a0e      	ldr	r2, [pc, #56]	; (80020bc <max7219_num_point+0xb0>)
 8002082:	21db      	movs	r1, #219	; 0xdb
 8002084:	54d1      	strb	r1, [r2, r3]
		break;
 8002086:	e013      	b.n	80020b0 <max7219_num_point+0xa4>
	case 6:
		symbol[rg] = _6_point;
 8002088:	79fb      	ldrb	r3, [r7, #7]
 800208a:	4a0c      	ldr	r2, [pc, #48]	; (80020bc <max7219_num_point+0xb0>)
 800208c:	21df      	movs	r1, #223	; 0xdf
 800208e:	54d1      	strb	r1, [r2, r3]
		break;
 8002090:	e00e      	b.n	80020b0 <max7219_num_point+0xa4>
	case 7:
		symbol[rg] = _7_point;
 8002092:	79fb      	ldrb	r3, [r7, #7]
 8002094:	4a09      	ldr	r2, [pc, #36]	; (80020bc <max7219_num_point+0xb0>)
 8002096:	21f0      	movs	r1, #240	; 0xf0
 8002098:	54d1      	strb	r1, [r2, r3]
		break;
 800209a:	e009      	b.n	80020b0 <max7219_num_point+0xa4>
	case 8:
		symbol[rg] = _8_point;
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	4a07      	ldr	r2, [pc, #28]	; (80020bc <max7219_num_point+0xb0>)
 80020a0:	21ff      	movs	r1, #255	; 0xff
 80020a2:	54d1      	strb	r1, [r2, r3]
		break;
 80020a4:	e004      	b.n	80020b0 <max7219_num_point+0xa4>
	case 9:
		symbol[rg] = _9_point;
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	4a04      	ldr	r2, [pc, #16]	; (80020bc <max7219_num_point+0xb0>)
 80020aa:	21fb      	movs	r1, #251	; 0xfb
 80020ac:	54d1      	strb	r1, [r2, r3]
		break;
 80020ae:	bf00      	nop
	}
}
 80020b0:	bf00      	nop
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	20000500 	.word	0x20000500

080020c0 <max7219_Send_float>:
//		}
//	}
//
//}

void max7219_Send_float(float value) {
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b088      	sub	sp, #32
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	ed87 0a01 	vstr	s0, [r7, #4]
	if (value > 99999.999f || value < -9999.999f) {
 80020ca:	edd7 7a01 	vldr	s15, [r7, #4]
 80020ce:	ed9f 7aaf 	vldr	s14, [pc, #700]	; 800238c <max7219_Send_float+0x2cc>
 80020d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020da:	dc08      	bgt.n	80020ee <max7219_Send_float+0x2e>
 80020dc:	edd7 7a01 	vldr	s15, [r7, #4]
 80020e0:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8002390 <max7219_Send_float+0x2d0>
 80020e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80020e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020ec:	d524      	bpl.n	8002138 <max7219_Send_float+0x78>
		max7219_num(0, 254);
 80020ee:	21fe      	movs	r1, #254	; 0xfe
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff ff03 	bl	8001efc <max7219_num>
		max7219_num(1, 254);
 80020f6:	21fe      	movs	r1, #254	; 0xfe
 80020f8:	2001      	movs	r0, #1
 80020fa:	f7ff feff 	bl	8001efc <max7219_num>
		max7219_num(2, 254);
 80020fe:	21fe      	movs	r1, #254	; 0xfe
 8002100:	2002      	movs	r0, #2
 8002102:	f7ff fefb 	bl	8001efc <max7219_num>
		max7219_num(3, 254);
 8002106:	21fe      	movs	r1, #254	; 0xfe
 8002108:	2003      	movs	r0, #3
 800210a:	f7ff fef7 	bl	8001efc <max7219_num>
		max7219_num(4, 254);
 800210e:	21fe      	movs	r1, #254	; 0xfe
 8002110:	2004      	movs	r0, #4
 8002112:	f7ff fef3 	bl	8001efc <max7219_num>
		max7219_num(5, 254);
 8002116:	21fe      	movs	r1, #254	; 0xfe
 8002118:	2005      	movs	r0, #5
 800211a:	f7ff feef 	bl	8001efc <max7219_num>
		max7219_num(6, 254);
 800211e:	21fe      	movs	r1, #254	; 0xfe
 8002120:	2006      	movs	r0, #6
 8002122:	f7ff feeb 	bl	8001efc <max7219_num>
		max7219_num(7, 254);
 8002126:	21fe      	movs	r1, #254	; 0xfe
 8002128:	2007      	movs	r0, #7
 800212a:	f7ff fee7 	bl	8001efc <max7219_num>
		max7219_send_symbol(symbol);
 800212e:	4899      	ldr	r0, [pc, #612]	; (8002394 <max7219_Send_float+0x2d4>)
 8002130:	f7ff fea4 	bl	8001e7c <max7219_send_symbol>
			max7219_num(7, BCD_Arr[2]);
			max7219_send_symbol(symbol);
		}
	}

}
 8002134:	f000 bce7 	b.w	8002b06 <max7219_Send_float+0xa46>
		int32_t value_conv = value * 1000;
 8002138:	edd7 7a01 	vldr	s15, [r7, #4]
 800213c:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002398 <max7219_Send_float+0x2d8>
 8002140:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002144:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002148:	ee17 3a90 	vmov	r3, s15
 800214c:	61fb      	str	r3, [r7, #28]
		value = value * 1000;
 800214e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002152:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8002398 <max7219_Send_float+0x2d8>
 8002156:	ee67 7a87 	vmul.f32	s15, s15, s14
 800215a:	edc7 7a01 	vstr	s15, [r7, #4]
		if (value_conv < 0) {
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	2b00      	cmp	r3, #0
 8002162:	da05      	bge.n	8002170 <max7219_Send_float+0xb0>
			positive_value = false;
 8002164:	2300      	movs	r3, #0
 8002166:	76fb      	strb	r3, [r7, #27]
			value_conv = value_conv * (-1);
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	425b      	negs	r3, r3
 800216c:	61fb      	str	r3, [r7, #28]
 800216e:	e001      	b.n	8002174 <max7219_Send_float+0xb4>
			positive_value = true;
 8002170:	2301      	movs	r3, #1
 8002172:	76fb      	strb	r3, [r7, #27]
		uint8_t BCD_Arr[8] = { 0, };
 8002174:	2300      	movs	r3, #0
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	2300      	movs	r3, #0
 800217a:	613b      	str	r3, [r7, #16]
		lenght = value_conv;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	617b      	str	r3, [r7, #20]
		while (value_conv >= 10000000) {
 8002180:	e007      	b.n	8002192 <max7219_Send_float+0xd2>
			value_conv -= 10000000;
 8002182:	69fa      	ldr	r2, [r7, #28]
 8002184:	4b85      	ldr	r3, [pc, #532]	; (800239c <max7219_Send_float+0x2dc>)
 8002186:	4413      	add	r3, r2
 8002188:	61fb      	str	r3, [r7, #28]
			BCD_Arr[7]++;
 800218a:	7cfb      	ldrb	r3, [r7, #19]
 800218c:	3301      	adds	r3, #1
 800218e:	b2db      	uxtb	r3, r3
 8002190:	74fb      	strb	r3, [r7, #19]
		while (value_conv >= 10000000) {
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	4a82      	ldr	r2, [pc, #520]	; (80023a0 <max7219_Send_float+0x2e0>)
 8002196:	4293      	cmp	r3, r2
 8002198:	daf3      	bge.n	8002182 <max7219_Send_float+0xc2>
		while (value_conv >= 1000000) {
 800219a:	e009      	b.n	80021b0 <max7219_Send_float+0xf0>
			value_conv -= 1000000;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f5a3 2374 	sub.w	r3, r3, #999424	; 0xf4000
 80021a2:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
 80021a6:	61fb      	str	r3, [r7, #28]
			BCD_Arr[6]++;
 80021a8:	7cbb      	ldrb	r3, [r7, #18]
 80021aa:	3301      	adds	r3, #1
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	74bb      	strb	r3, [r7, #18]
		while (value_conv >= 1000000) {
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	4a7c      	ldr	r2, [pc, #496]	; (80023a4 <max7219_Send_float+0x2e4>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	dcf1      	bgt.n	800219c <max7219_Send_float+0xdc>
		while (value_conv >= 100000) {
 80021b8:	e008      	b.n	80021cc <max7219_Send_float+0x10c>
			value_conv -= 100000;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	f5a3 33c3 	sub.w	r3, r3, #99840	; 0x18600
 80021c0:	3ba0      	subs	r3, #160	; 0xa0
 80021c2:	61fb      	str	r3, [r7, #28]
			BCD_Arr[5]++;
 80021c4:	7c7b      	ldrb	r3, [r7, #17]
 80021c6:	3301      	adds	r3, #1
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	747b      	strb	r3, [r7, #17]
		while (value_conv >= 100000) {
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	4a76      	ldr	r2, [pc, #472]	; (80023a8 <max7219_Send_float+0x2e8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	dcf2      	bgt.n	80021ba <max7219_Send_float+0xfa>
		while (value_conv >= 10000) {
 80021d4:	e008      	b.n	80021e8 <max7219_Send_float+0x128>
			value_conv -= 10000;
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f5a3 531c 	sub.w	r3, r3, #9984	; 0x2700
 80021dc:	3b10      	subs	r3, #16
 80021de:	61fb      	str	r3, [r7, #28]
			BCD_Arr[4]++;
 80021e0:	7c3b      	ldrb	r3, [r7, #16]
 80021e2:	3301      	adds	r3, #1
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	743b      	strb	r3, [r7, #16]
		while (value_conv >= 10000) {
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f242 720f 	movw	r2, #9999	; 0x270f
 80021ee:	4293      	cmp	r3, r2
 80021f0:	dcf1      	bgt.n	80021d6 <max7219_Send_float+0x116>
		while (value_conv >= 1000) {
 80021f2:	e007      	b.n	8002204 <max7219_Send_float+0x144>
			value_conv -= 1000;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f5a3 737a 	sub.w	r3, r3, #1000	; 0x3e8
 80021fa:	61fb      	str	r3, [r7, #28]
			BCD_Arr[3]++;
 80021fc:	7bfb      	ldrb	r3, [r7, #15]
 80021fe:	3301      	adds	r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	73fb      	strb	r3, [r7, #15]
		while (value_conv >= 1000) {
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800220a:	daf3      	bge.n	80021f4 <max7219_Send_float+0x134>
		while (value_conv >= 100) {
 800220c:	e006      	b.n	800221c <max7219_Send_float+0x15c>
			value_conv -= 100;
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b64      	subs	r3, #100	; 0x64
 8002212:	61fb      	str	r3, [r7, #28]
			BCD_Arr[2]++;
 8002214:	7bbb      	ldrb	r3, [r7, #14]
 8002216:	3301      	adds	r3, #1
 8002218:	b2db      	uxtb	r3, r3
 800221a:	73bb      	strb	r3, [r7, #14]
		while (value_conv >= 100) {
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	2b63      	cmp	r3, #99	; 0x63
 8002220:	dcf5      	bgt.n	800220e <max7219_Send_float+0x14e>
		while (value_conv >= 10) {
 8002222:	e006      	b.n	8002232 <max7219_Send_float+0x172>
			value_conv -= 10;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	3b0a      	subs	r3, #10
 8002228:	61fb      	str	r3, [r7, #28]
			BCD_Arr[1]++;
 800222a:	7b7b      	ldrb	r3, [r7, #13]
 800222c:	3301      	adds	r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	737b      	strb	r3, [r7, #13]
		while (value_conv >= 10) {
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	2b09      	cmp	r3, #9
 8002236:	dcf5      	bgt.n	8002224 <max7219_Send_float+0x164>
		BCD_Arr[0] = (uint8_t) (value_conv);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	b2db      	uxtb	r3, r3
 800223c:	733b      	strb	r3, [r7, #12]
		if (lenght < 10) {
 800223e:	697b      	ldr	r3, [r7, #20]
 8002240:	2b09      	cmp	r3, #9
 8002242:	f300 8088 	bgt.w	8002356 <max7219_Send_float+0x296>
			max7219_num(0, 255);
 8002246:	21ff      	movs	r1, #255	; 0xff
 8002248:	2000      	movs	r0, #0
 800224a:	f7ff fe57 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 800224e:	4b57      	ldr	r3, [pc, #348]	; (80023ac <max7219_Send_float+0x2ec>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d104      	bne.n	8002260 <max7219_Send_float+0x1a0>
				max7219_num(1, 10);
 8002256:	210a      	movs	r1, #10
 8002258:	2001      	movs	r0, #1
 800225a:	f7ff fe4f 	bl	8001efc <max7219_num>
 800225e:	e027      	b.n	80022b0 <max7219_Send_float+0x1f0>
			} else if (btn_state == 1){
 8002260:	4b52      	ldr	r3, [pc, #328]	; (80023ac <max7219_Send_float+0x2ec>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b01      	cmp	r3, #1
 8002266:	d104      	bne.n	8002272 <max7219_Send_float+0x1b2>
				max7219_num(1, 11);
 8002268:	210b      	movs	r1, #11
 800226a:	2001      	movs	r0, #1
 800226c:	f7ff fe46 	bl	8001efc <max7219_num>
 8002270:	e01e      	b.n	80022b0 <max7219_Send_float+0x1f0>
			} else if (btn_state == 2){
 8002272:	4b4e      	ldr	r3, [pc, #312]	; (80023ac <max7219_Send_float+0x2ec>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	2b02      	cmp	r3, #2
 8002278:	d104      	bne.n	8002284 <max7219_Send_float+0x1c4>
				max7219_num(1, 12);
 800227a:	210c      	movs	r1, #12
 800227c:	2001      	movs	r0, #1
 800227e:	f7ff fe3d 	bl	8001efc <max7219_num>
 8002282:	e015      	b.n	80022b0 <max7219_Send_float+0x1f0>
			} else if (btn_state == 3){
 8002284:	4b49      	ldr	r3, [pc, #292]	; (80023ac <max7219_Send_float+0x2ec>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d104      	bne.n	8002296 <max7219_Send_float+0x1d6>
				max7219_num(1, 12);
 800228c:	210c      	movs	r1, #12
 800228e:	2001      	movs	r0, #1
 8002290:	f7ff fe34 	bl	8001efc <max7219_num>
 8002294:	e00c      	b.n	80022b0 <max7219_Send_float+0x1f0>
			} else if (btn_state == 4){
 8002296:	4b45      	ldr	r3, [pc, #276]	; (80023ac <max7219_Send_float+0x2ec>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b04      	cmp	r3, #4
 800229c:	d104      	bne.n	80022a8 <max7219_Send_float+0x1e8>
				max7219_num(1, 12);
 800229e:	210c      	movs	r1, #12
 80022a0:	2001      	movs	r0, #1
 80022a2:	f7ff fe2b 	bl	8001efc <max7219_num>
 80022a6:	e003      	b.n	80022b0 <max7219_Send_float+0x1f0>
				max7219_num(1, 12);
 80022a8:	210c      	movs	r1, #12
 80022aa:	2001      	movs	r0, #1
 80022ac:	f7ff fe26 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 80022b0:	4b3e      	ldr	r3, [pc, #248]	; (80023ac <max7219_Send_float+0x2ec>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d104      	bne.n	80022c2 <max7219_Send_float+0x202>
				max7219_num(2, 255);
 80022b8:	21ff      	movs	r1, #255	; 0xff
 80022ba:	2002      	movs	r0, #2
 80022bc:	f7ff fe1e 	bl	8001efc <max7219_num>
 80022c0:	e027      	b.n	8002312 <max7219_Send_float+0x252>
			} else if (btn_state == 1){
 80022c2:	4b3a      	ldr	r3, [pc, #232]	; (80023ac <max7219_Send_float+0x2ec>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	2b01      	cmp	r3, #1
 80022c8:	d104      	bne.n	80022d4 <max7219_Send_float+0x214>
				max7219_num(2, 255);
 80022ca:	21ff      	movs	r1, #255	; 0xff
 80022cc:	2002      	movs	r0, #2
 80022ce:	f7ff fe15 	bl	8001efc <max7219_num>
 80022d2:	e01e      	b.n	8002312 <max7219_Send_float+0x252>
			} else if (btn_state == 2){
 80022d4:	4b35      	ldr	r3, [pc, #212]	; (80023ac <max7219_Send_float+0x2ec>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d104      	bne.n	80022e6 <max7219_Send_float+0x226>
				max7219_num(2, 10);
 80022dc:	210a      	movs	r1, #10
 80022de:	2002      	movs	r0, #2
 80022e0:	f7ff fe0c 	bl	8001efc <max7219_num>
 80022e4:	e015      	b.n	8002312 <max7219_Send_float+0x252>
			} else if (btn_state == 3){
 80022e6:	4b31      	ldr	r3, [pc, #196]	; (80023ac <max7219_Send_float+0x2ec>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d104      	bne.n	80022f8 <max7219_Send_float+0x238>
				max7219_num(2, 10);
 80022ee:	210a      	movs	r1, #10
 80022f0:	2002      	movs	r0, #2
 80022f2:	f7ff fe03 	bl	8001efc <max7219_num>
 80022f6:	e00c      	b.n	8002312 <max7219_Send_float+0x252>
			} else if (btn_state == 4){
 80022f8:	4b2c      	ldr	r3, [pc, #176]	; (80023ac <max7219_Send_float+0x2ec>)
 80022fa:	781b      	ldrb	r3, [r3, #0]
 80022fc:	2b04      	cmp	r3, #4
 80022fe:	d104      	bne.n	800230a <max7219_Send_float+0x24a>
				max7219_num(2, 11);
 8002300:	210b      	movs	r1, #11
 8002302:	2002      	movs	r0, #2
 8002304:	f7ff fdfa 	bl	8001efc <max7219_num>
 8002308:	e003      	b.n	8002312 <max7219_Send_float+0x252>
				max7219_num(2, 11);
 800230a:	210b      	movs	r1, #11
 800230c:	2002      	movs	r0, #2
 800230e:	f7ff fdf5 	bl	8001efc <max7219_num>
			max7219_num(3, 255);
 8002312:	21ff      	movs	r1, #255	; 0xff
 8002314:	2003      	movs	r0, #3
 8002316:	f7ff fdf1 	bl	8001efc <max7219_num>
			max7219_num(4, 255);
 800231a:	21ff      	movs	r1, #255	; 0xff
 800231c:	2004      	movs	r0, #4
 800231e:	f7ff fded 	bl	8001efc <max7219_num>
			if (positive_value == true) {
 8002322:	7efb      	ldrb	r3, [r7, #27]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d004      	beq.n	8002332 <max7219_Send_float+0x272>
				max7219_num(5, 255);
 8002328:	21ff      	movs	r1, #255	; 0xff
 800232a:	2005      	movs	r0, #5
 800232c:	f7ff fde6 	bl	8001efc <max7219_num>
 8002330:	e003      	b.n	800233a <max7219_Send_float+0x27a>
				max7219_num(5, 254);
 8002332:	21fe      	movs	r1, #254	; 0xfe
 8002334:	2005      	movs	r0, #5
 8002336:	f7ff fde1 	bl	8001efc <max7219_num>
			max7219_num_point(6, BCD_Arr[3]);
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	4619      	mov	r1, r3
 800233e:	2006      	movs	r0, #6
 8002340:	f7ff fe64 	bl	800200c <max7219_num_point>
			max7219_num(7, BCD_Arr[2]);
 8002344:	7bbb      	ldrb	r3, [r7, #14]
 8002346:	4619      	mov	r1, r3
 8002348:	2007      	movs	r0, #7
 800234a:	f7ff fdd7 	bl	8001efc <max7219_num>
			max7219_send_symbol(symbol);
 800234e:	4811      	ldr	r0, [pc, #68]	; (8002394 <max7219_Send_float+0x2d4>)
 8002350:	f7ff fd94 	bl	8001e7c <max7219_send_symbol>
}
 8002354:	e3d7      	b.n	8002b06 <max7219_Send_float+0xa46>
		} else if (lenght < 100) {
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	2b63      	cmp	r3, #99	; 0x63
 800235a:	f300 809b 	bgt.w	8002494 <max7219_Send_float+0x3d4>
			max7219_num(0, 255);
 800235e:	21ff      	movs	r1, #255	; 0xff
 8002360:	2000      	movs	r0, #0
 8002362:	f7ff fdcb 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 8002366:	4b11      	ldr	r3, [pc, #68]	; (80023ac <max7219_Send_float+0x2ec>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d104      	bne.n	8002378 <max7219_Send_float+0x2b8>
				max7219_num(1, 10);
 800236e:	210a      	movs	r1, #10
 8002370:	2001      	movs	r0, #1
 8002372:	f7ff fdc3 	bl	8001efc <max7219_num>
 8002376:	e03a      	b.n	80023ee <max7219_Send_float+0x32e>
			} else if (btn_state == 1){
 8002378:	4b0c      	ldr	r3, [pc, #48]	; (80023ac <max7219_Send_float+0x2ec>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	2b01      	cmp	r3, #1
 800237e:	d117      	bne.n	80023b0 <max7219_Send_float+0x2f0>
				max7219_num(1, 11);
 8002380:	210b      	movs	r1, #11
 8002382:	2001      	movs	r0, #1
 8002384:	f7ff fdba 	bl	8001efc <max7219_num>
 8002388:	e031      	b.n	80023ee <max7219_Send_float+0x32e>
 800238a:	bf00      	nop
 800238c:	47c35000 	.word	0x47c35000
 8002390:	c61c3fff 	.word	0xc61c3fff
 8002394:	20000500 	.word	0x20000500
 8002398:	447a0000 	.word	0x447a0000
 800239c:	ff676980 	.word	0xff676980
 80023a0:	00989680 	.word	0x00989680
 80023a4:	000f423f 	.word	0x000f423f
 80023a8:	0001869f 	.word	0x0001869f
 80023ac:	200004eb 	.word	0x200004eb
			} else if (btn_state == 2){
 80023b0:	4bae      	ldr	r3, [pc, #696]	; (800266c <max7219_Send_float+0x5ac>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d104      	bne.n	80023c2 <max7219_Send_float+0x302>
				max7219_num(1, 12);
 80023b8:	210c      	movs	r1, #12
 80023ba:	2001      	movs	r0, #1
 80023bc:	f7ff fd9e 	bl	8001efc <max7219_num>
 80023c0:	e015      	b.n	80023ee <max7219_Send_float+0x32e>
			} else if (btn_state == 3){
 80023c2:	4baa      	ldr	r3, [pc, #680]	; (800266c <max7219_Send_float+0x5ac>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d104      	bne.n	80023d4 <max7219_Send_float+0x314>
				max7219_num(1, 12);
 80023ca:	210c      	movs	r1, #12
 80023cc:	2001      	movs	r0, #1
 80023ce:	f7ff fd95 	bl	8001efc <max7219_num>
 80023d2:	e00c      	b.n	80023ee <max7219_Send_float+0x32e>
			} else if (btn_state == 4){
 80023d4:	4ba5      	ldr	r3, [pc, #660]	; (800266c <max7219_Send_float+0x5ac>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b04      	cmp	r3, #4
 80023da:	d104      	bne.n	80023e6 <max7219_Send_float+0x326>
				max7219_num(1, 12);
 80023dc:	210c      	movs	r1, #12
 80023de:	2001      	movs	r0, #1
 80023e0:	f7ff fd8c 	bl	8001efc <max7219_num>
 80023e4:	e003      	b.n	80023ee <max7219_Send_float+0x32e>
				max7219_num(1, 12);
 80023e6:	210c      	movs	r1, #12
 80023e8:	2001      	movs	r0, #1
 80023ea:	f7ff fd87 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 80023ee:	4b9f      	ldr	r3, [pc, #636]	; (800266c <max7219_Send_float+0x5ac>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d104      	bne.n	8002400 <max7219_Send_float+0x340>
				max7219_num(2, 255);
 80023f6:	21ff      	movs	r1, #255	; 0xff
 80023f8:	2002      	movs	r0, #2
 80023fa:	f7ff fd7f 	bl	8001efc <max7219_num>
 80023fe:	e027      	b.n	8002450 <max7219_Send_float+0x390>
			} else if (btn_state == 1){
 8002400:	4b9a      	ldr	r3, [pc, #616]	; (800266c <max7219_Send_float+0x5ac>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b01      	cmp	r3, #1
 8002406:	d104      	bne.n	8002412 <max7219_Send_float+0x352>
				max7219_num(2, 255);
 8002408:	21ff      	movs	r1, #255	; 0xff
 800240a:	2002      	movs	r0, #2
 800240c:	f7ff fd76 	bl	8001efc <max7219_num>
 8002410:	e01e      	b.n	8002450 <max7219_Send_float+0x390>
			} else if (btn_state == 2){
 8002412:	4b96      	ldr	r3, [pc, #600]	; (800266c <max7219_Send_float+0x5ac>)
 8002414:	781b      	ldrb	r3, [r3, #0]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d104      	bne.n	8002424 <max7219_Send_float+0x364>
				max7219_num(2, 10);
 800241a:	210a      	movs	r1, #10
 800241c:	2002      	movs	r0, #2
 800241e:	f7ff fd6d 	bl	8001efc <max7219_num>
 8002422:	e015      	b.n	8002450 <max7219_Send_float+0x390>
			} else if (btn_state == 3){
 8002424:	4b91      	ldr	r3, [pc, #580]	; (800266c <max7219_Send_float+0x5ac>)
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d104      	bne.n	8002436 <max7219_Send_float+0x376>
				max7219_num(2, 10);
 800242c:	210a      	movs	r1, #10
 800242e:	2002      	movs	r0, #2
 8002430:	f7ff fd64 	bl	8001efc <max7219_num>
 8002434:	e00c      	b.n	8002450 <max7219_Send_float+0x390>
			} else if (btn_state == 4){
 8002436:	4b8d      	ldr	r3, [pc, #564]	; (800266c <max7219_Send_float+0x5ac>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	2b04      	cmp	r3, #4
 800243c:	d104      	bne.n	8002448 <max7219_Send_float+0x388>
				max7219_num(2, 11);
 800243e:	210b      	movs	r1, #11
 8002440:	2002      	movs	r0, #2
 8002442:	f7ff fd5b 	bl	8001efc <max7219_num>
 8002446:	e003      	b.n	8002450 <max7219_Send_float+0x390>
				max7219_num(2, 11);
 8002448:	210b      	movs	r1, #11
 800244a:	2002      	movs	r0, #2
 800244c:	f7ff fd56 	bl	8001efc <max7219_num>
			max7219_num(3, 255);
 8002450:	21ff      	movs	r1, #255	; 0xff
 8002452:	2003      	movs	r0, #3
 8002454:	f7ff fd52 	bl	8001efc <max7219_num>
			if (positive_value == true) {
 8002458:	7efb      	ldrb	r3, [r7, #27]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d004      	beq.n	8002468 <max7219_Send_float+0x3a8>
				max7219_num(4, 255);
 800245e:	21ff      	movs	r1, #255	; 0xff
 8002460:	2004      	movs	r0, #4
 8002462:	f7ff fd4b 	bl	8001efc <max7219_num>
 8002466:	e003      	b.n	8002470 <max7219_Send_float+0x3b0>
				max7219_num(4, 254);
 8002468:	21fe      	movs	r1, #254	; 0xfe
 800246a:	2004      	movs	r0, #4
 800246c:	f7ff fd46 	bl	8001efc <max7219_num>
			max7219_num_point(5, BCD_Arr[3]);
 8002470:	7bfb      	ldrb	r3, [r7, #15]
 8002472:	4619      	mov	r1, r3
 8002474:	2005      	movs	r0, #5
 8002476:	f7ff fdc9 	bl	800200c <max7219_num_point>
			max7219_num(6, BCD_Arr[2]);
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	4619      	mov	r1, r3
 800247e:	2006      	movs	r0, #6
 8002480:	f7ff fd3c 	bl	8001efc <max7219_num>
			max7219_num(7, 255);
 8002484:	21ff      	movs	r1, #255	; 0xff
 8002486:	2007      	movs	r0, #7
 8002488:	f7ff fd38 	bl	8001efc <max7219_num>
			max7219_send_symbol(symbol);
 800248c:	4878      	ldr	r0, [pc, #480]	; (8002670 <max7219_Send_float+0x5b0>)
 800248e:	f7ff fcf5 	bl	8001e7c <max7219_send_symbol>
}
 8002492:	e338      	b.n	8002b06 <max7219_Send_float+0xa46>
		} else if (lenght < 1000) {
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800249a:	f280 8088 	bge.w	80025ae <max7219_Send_float+0x4ee>
			max7219_num(0, 255);
 800249e:	21ff      	movs	r1, #255	; 0xff
 80024a0:	2000      	movs	r0, #0
 80024a2:	f7ff fd2b 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 80024a6:	4b71      	ldr	r3, [pc, #452]	; (800266c <max7219_Send_float+0x5ac>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d104      	bne.n	80024b8 <max7219_Send_float+0x3f8>
				max7219_num(1, 10);
 80024ae:	210a      	movs	r1, #10
 80024b0:	2001      	movs	r0, #1
 80024b2:	f7ff fd23 	bl	8001efc <max7219_num>
 80024b6:	e027      	b.n	8002508 <max7219_Send_float+0x448>
			} else if (btn_state == 1){
 80024b8:	4b6c      	ldr	r3, [pc, #432]	; (800266c <max7219_Send_float+0x5ac>)
 80024ba:	781b      	ldrb	r3, [r3, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d104      	bne.n	80024ca <max7219_Send_float+0x40a>
				max7219_num(1, 11);
 80024c0:	210b      	movs	r1, #11
 80024c2:	2001      	movs	r0, #1
 80024c4:	f7ff fd1a 	bl	8001efc <max7219_num>
 80024c8:	e01e      	b.n	8002508 <max7219_Send_float+0x448>
			} else if (btn_state == 2){
 80024ca:	4b68      	ldr	r3, [pc, #416]	; (800266c <max7219_Send_float+0x5ac>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b02      	cmp	r3, #2
 80024d0:	d104      	bne.n	80024dc <max7219_Send_float+0x41c>
				max7219_num(1, 12);
 80024d2:	210c      	movs	r1, #12
 80024d4:	2001      	movs	r0, #1
 80024d6:	f7ff fd11 	bl	8001efc <max7219_num>
 80024da:	e015      	b.n	8002508 <max7219_Send_float+0x448>
			} else if (btn_state == 3){
 80024dc:	4b63      	ldr	r3, [pc, #396]	; (800266c <max7219_Send_float+0x5ac>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d104      	bne.n	80024ee <max7219_Send_float+0x42e>
				max7219_num(1, 12);
 80024e4:	210c      	movs	r1, #12
 80024e6:	2001      	movs	r0, #1
 80024e8:	f7ff fd08 	bl	8001efc <max7219_num>
 80024ec:	e00c      	b.n	8002508 <max7219_Send_float+0x448>
			} else if (btn_state == 4){
 80024ee:	4b5f      	ldr	r3, [pc, #380]	; (800266c <max7219_Send_float+0x5ac>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d104      	bne.n	8002500 <max7219_Send_float+0x440>
				max7219_num(1, 12);
 80024f6:	210c      	movs	r1, #12
 80024f8:	2001      	movs	r0, #1
 80024fa:	f7ff fcff 	bl	8001efc <max7219_num>
 80024fe:	e003      	b.n	8002508 <max7219_Send_float+0x448>
				max7219_num(1, 12);
 8002500:	210c      	movs	r1, #12
 8002502:	2001      	movs	r0, #1
 8002504:	f7ff fcfa 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 8002508:	4b58      	ldr	r3, [pc, #352]	; (800266c <max7219_Send_float+0x5ac>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d104      	bne.n	800251a <max7219_Send_float+0x45a>
				max7219_num(2, 255);
 8002510:	21ff      	movs	r1, #255	; 0xff
 8002512:	2002      	movs	r0, #2
 8002514:	f7ff fcf2 	bl	8001efc <max7219_num>
 8002518:	e027      	b.n	800256a <max7219_Send_float+0x4aa>
			} else if (btn_state == 1){
 800251a:	4b54      	ldr	r3, [pc, #336]	; (800266c <max7219_Send_float+0x5ac>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d104      	bne.n	800252c <max7219_Send_float+0x46c>
				max7219_num(2, 255);
 8002522:	21ff      	movs	r1, #255	; 0xff
 8002524:	2002      	movs	r0, #2
 8002526:	f7ff fce9 	bl	8001efc <max7219_num>
 800252a:	e01e      	b.n	800256a <max7219_Send_float+0x4aa>
			} else if (btn_state == 2){
 800252c:	4b4f      	ldr	r3, [pc, #316]	; (800266c <max7219_Send_float+0x5ac>)
 800252e:	781b      	ldrb	r3, [r3, #0]
 8002530:	2b02      	cmp	r3, #2
 8002532:	d104      	bne.n	800253e <max7219_Send_float+0x47e>
				max7219_num(2, 10);
 8002534:	210a      	movs	r1, #10
 8002536:	2002      	movs	r0, #2
 8002538:	f7ff fce0 	bl	8001efc <max7219_num>
 800253c:	e015      	b.n	800256a <max7219_Send_float+0x4aa>
			} else if (btn_state == 3){
 800253e:	4b4b      	ldr	r3, [pc, #300]	; (800266c <max7219_Send_float+0x5ac>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b03      	cmp	r3, #3
 8002544:	d104      	bne.n	8002550 <max7219_Send_float+0x490>
				max7219_num(2, 10);
 8002546:	210a      	movs	r1, #10
 8002548:	2002      	movs	r0, #2
 800254a:	f7ff fcd7 	bl	8001efc <max7219_num>
 800254e:	e00c      	b.n	800256a <max7219_Send_float+0x4aa>
			} else if (btn_state == 4){
 8002550:	4b46      	ldr	r3, [pc, #280]	; (800266c <max7219_Send_float+0x5ac>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b04      	cmp	r3, #4
 8002556:	d104      	bne.n	8002562 <max7219_Send_float+0x4a2>
				max7219_num(2, 11);
 8002558:	210b      	movs	r1, #11
 800255a:	2002      	movs	r0, #2
 800255c:	f7ff fcce 	bl	8001efc <max7219_num>
 8002560:	e003      	b.n	800256a <max7219_Send_float+0x4aa>
				max7219_num(2, 11);
 8002562:	210b      	movs	r1, #11
 8002564:	2002      	movs	r0, #2
 8002566:	f7ff fcc9 	bl	8001efc <max7219_num>
			max7219_num(3, 255);
 800256a:	21ff      	movs	r1, #255	; 0xff
 800256c:	2003      	movs	r0, #3
 800256e:	f7ff fcc5 	bl	8001efc <max7219_num>
			if (positive_value == true) {
 8002572:	7efb      	ldrb	r3, [r7, #27]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d004      	beq.n	8002582 <max7219_Send_float+0x4c2>
				max7219_num(4, 255);
 8002578:	21ff      	movs	r1, #255	; 0xff
 800257a:	2004      	movs	r0, #4
 800257c:	f7ff fcbe 	bl	8001efc <max7219_num>
 8002580:	e003      	b.n	800258a <max7219_Send_float+0x4ca>
				max7219_num(4, 254);
 8002582:	21fe      	movs	r1, #254	; 0xfe
 8002584:	2004      	movs	r0, #4
 8002586:	f7ff fcb9 	bl	8001efc <max7219_num>
			max7219_num_point(5, BCD_Arr[3]);
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	4619      	mov	r1, r3
 800258e:	2005      	movs	r0, #5
 8002590:	f7ff fd3c 	bl	800200c <max7219_num_point>
			max7219_num(6, BCD_Arr[2]);
 8002594:	7bbb      	ldrb	r3, [r7, #14]
 8002596:	4619      	mov	r1, r3
 8002598:	2006      	movs	r0, #6
 800259a:	f7ff fcaf 	bl	8001efc <max7219_num>
			max7219_num(7, 255);
 800259e:	21ff      	movs	r1, #255	; 0xff
 80025a0:	2007      	movs	r0, #7
 80025a2:	f7ff fcab 	bl	8001efc <max7219_num>
			max7219_send_symbol(symbol);
 80025a6:	4832      	ldr	r0, [pc, #200]	; (8002670 <max7219_Send_float+0x5b0>)
 80025a8:	f7ff fc68 	bl	8001e7c <max7219_send_symbol>
}
 80025ac:	e2ab      	b.n	8002b06 <max7219_Send_float+0xa46>
		} else if (lenght < 10000) {
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	f242 720f 	movw	r2, #9999	; 0x270f
 80025b4:	4293      	cmp	r3, r2
 80025b6:	f300 808c 	bgt.w	80026d2 <max7219_Send_float+0x612>
			max7219_num(0, 255);
 80025ba:	21ff      	movs	r1, #255	; 0xff
 80025bc:	2000      	movs	r0, #0
 80025be:	f7ff fc9d 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 80025c2:	4b2a      	ldr	r3, [pc, #168]	; (800266c <max7219_Send_float+0x5ac>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d104      	bne.n	80025d4 <max7219_Send_float+0x514>
				max7219_num(1, 10);
 80025ca:	210a      	movs	r1, #10
 80025cc:	2001      	movs	r0, #1
 80025ce:	f7ff fc95 	bl	8001efc <max7219_num>
 80025d2:	e027      	b.n	8002624 <max7219_Send_float+0x564>
			} else if (btn_state == 1){
 80025d4:	4b25      	ldr	r3, [pc, #148]	; (800266c <max7219_Send_float+0x5ac>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d104      	bne.n	80025e6 <max7219_Send_float+0x526>
				max7219_num(1, 11);
 80025dc:	210b      	movs	r1, #11
 80025de:	2001      	movs	r0, #1
 80025e0:	f7ff fc8c 	bl	8001efc <max7219_num>
 80025e4:	e01e      	b.n	8002624 <max7219_Send_float+0x564>
			} else if (btn_state == 2){
 80025e6:	4b21      	ldr	r3, [pc, #132]	; (800266c <max7219_Send_float+0x5ac>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d104      	bne.n	80025f8 <max7219_Send_float+0x538>
				max7219_num(1, 12);
 80025ee:	210c      	movs	r1, #12
 80025f0:	2001      	movs	r0, #1
 80025f2:	f7ff fc83 	bl	8001efc <max7219_num>
 80025f6:	e015      	b.n	8002624 <max7219_Send_float+0x564>
			} else if (btn_state == 3){
 80025f8:	4b1c      	ldr	r3, [pc, #112]	; (800266c <max7219_Send_float+0x5ac>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d104      	bne.n	800260a <max7219_Send_float+0x54a>
				max7219_num(1, 12);
 8002600:	210c      	movs	r1, #12
 8002602:	2001      	movs	r0, #1
 8002604:	f7ff fc7a 	bl	8001efc <max7219_num>
 8002608:	e00c      	b.n	8002624 <max7219_Send_float+0x564>
			} else if (btn_state == 4){
 800260a:	4b18      	ldr	r3, [pc, #96]	; (800266c <max7219_Send_float+0x5ac>)
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	2b04      	cmp	r3, #4
 8002610:	d104      	bne.n	800261c <max7219_Send_float+0x55c>
				max7219_num(1, 12);
 8002612:	210c      	movs	r1, #12
 8002614:	2001      	movs	r0, #1
 8002616:	f7ff fc71 	bl	8001efc <max7219_num>
 800261a:	e003      	b.n	8002624 <max7219_Send_float+0x564>
				max7219_num(1, 12);
 800261c:	210c      	movs	r1, #12
 800261e:	2001      	movs	r0, #1
 8002620:	f7ff fc6c 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 8002624:	4b11      	ldr	r3, [pc, #68]	; (800266c <max7219_Send_float+0x5ac>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d104      	bne.n	8002636 <max7219_Send_float+0x576>
				max7219_num(2, 255);
 800262c:	21ff      	movs	r1, #255	; 0xff
 800262e:	2002      	movs	r0, #2
 8002630:	f7ff fc64 	bl	8001efc <max7219_num>
 8002634:	e02b      	b.n	800268e <max7219_Send_float+0x5ce>
			} else if (btn_state == 1){
 8002636:	4b0d      	ldr	r3, [pc, #52]	; (800266c <max7219_Send_float+0x5ac>)
 8002638:	781b      	ldrb	r3, [r3, #0]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d104      	bne.n	8002648 <max7219_Send_float+0x588>
				max7219_num(2, 255);
 800263e:	21ff      	movs	r1, #255	; 0xff
 8002640:	2002      	movs	r0, #2
 8002642:	f7ff fc5b 	bl	8001efc <max7219_num>
 8002646:	e022      	b.n	800268e <max7219_Send_float+0x5ce>
			} else if (btn_state == 2){
 8002648:	4b08      	ldr	r3, [pc, #32]	; (800266c <max7219_Send_float+0x5ac>)
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d104      	bne.n	800265a <max7219_Send_float+0x59a>
				max7219_num(2, 10);
 8002650:	210a      	movs	r1, #10
 8002652:	2002      	movs	r0, #2
 8002654:	f7ff fc52 	bl	8001efc <max7219_num>
 8002658:	e019      	b.n	800268e <max7219_Send_float+0x5ce>
			} else if (btn_state == 3){
 800265a:	4b04      	ldr	r3, [pc, #16]	; (800266c <max7219_Send_float+0x5ac>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d108      	bne.n	8002674 <max7219_Send_float+0x5b4>
				max7219_num(2, 10);
 8002662:	210a      	movs	r1, #10
 8002664:	2002      	movs	r0, #2
 8002666:	f7ff fc49 	bl	8001efc <max7219_num>
 800266a:	e010      	b.n	800268e <max7219_Send_float+0x5ce>
 800266c:	200004eb 	.word	0x200004eb
 8002670:	20000500 	.word	0x20000500
			} else if (btn_state == 4){
 8002674:	4bb1      	ldr	r3, [pc, #708]	; (800293c <max7219_Send_float+0x87c>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b04      	cmp	r3, #4
 800267a:	d104      	bne.n	8002686 <max7219_Send_float+0x5c6>
				max7219_num(2, 11);
 800267c:	210b      	movs	r1, #11
 800267e:	2002      	movs	r0, #2
 8002680:	f7ff fc3c 	bl	8001efc <max7219_num>
 8002684:	e003      	b.n	800268e <max7219_Send_float+0x5ce>
				max7219_num(2, 11);
 8002686:	210b      	movs	r1, #11
 8002688:	2002      	movs	r0, #2
 800268a:	f7ff fc37 	bl	8001efc <max7219_num>
			max7219_num(3, 255);
 800268e:	21ff      	movs	r1, #255	; 0xff
 8002690:	2003      	movs	r0, #3
 8002692:	f7ff fc33 	bl	8001efc <max7219_num>
			if (positive_value == true) {
 8002696:	7efb      	ldrb	r3, [r7, #27]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d004      	beq.n	80026a6 <max7219_Send_float+0x5e6>
				max7219_num(4, 255);
 800269c:	21ff      	movs	r1, #255	; 0xff
 800269e:	2004      	movs	r0, #4
 80026a0:	f7ff fc2c 	bl	8001efc <max7219_num>
 80026a4:	e003      	b.n	80026ae <max7219_Send_float+0x5ee>
				max7219_num(4, 254);
 80026a6:	21fe      	movs	r1, #254	; 0xfe
 80026a8:	2004      	movs	r0, #4
 80026aa:	f7ff fc27 	bl	8001efc <max7219_num>
			max7219_num_point(5, BCD_Arr[3]);
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
 80026b0:	4619      	mov	r1, r3
 80026b2:	2005      	movs	r0, #5
 80026b4:	f7ff fcaa 	bl	800200c <max7219_num_point>
			max7219_num(6, BCD_Arr[2]);
 80026b8:	7bbb      	ldrb	r3, [r7, #14]
 80026ba:	4619      	mov	r1, r3
 80026bc:	2006      	movs	r0, #6
 80026be:	f7ff fc1d 	bl	8001efc <max7219_num>
			max7219_num(7, 255);
 80026c2:	21ff      	movs	r1, #255	; 0xff
 80026c4:	2007      	movs	r0, #7
 80026c6:	f7ff fc19 	bl	8001efc <max7219_num>
			max7219_send_symbol(symbol);
 80026ca:	489d      	ldr	r0, [pc, #628]	; (8002940 <max7219_Send_float+0x880>)
 80026cc:	f7ff fbd6 	bl	8001e7c <max7219_send_symbol>
}
 80026d0:	e219      	b.n	8002b06 <max7219_Send_float+0xa46>
		} else if (lenght < 100000) {
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	4a9b      	ldr	r2, [pc, #620]	; (8002944 <max7219_Send_float+0x884>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	f300 8089 	bgt.w	80027ee <max7219_Send_float+0x72e>
			max7219_num(0, 255);
 80026dc:	21ff      	movs	r1, #255	; 0xff
 80026de:	2000      	movs	r0, #0
 80026e0:	f7ff fc0c 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 80026e4:	4b95      	ldr	r3, [pc, #596]	; (800293c <max7219_Send_float+0x87c>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d104      	bne.n	80026f6 <max7219_Send_float+0x636>
				max7219_num(1, 10);
 80026ec:	210a      	movs	r1, #10
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7ff fc04 	bl	8001efc <max7219_num>
 80026f4:	e027      	b.n	8002746 <max7219_Send_float+0x686>
			} else if (btn_state == 1){
 80026f6:	4b91      	ldr	r3, [pc, #580]	; (800293c <max7219_Send_float+0x87c>)
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d104      	bne.n	8002708 <max7219_Send_float+0x648>
				max7219_num(1, 11);
 80026fe:	210b      	movs	r1, #11
 8002700:	2001      	movs	r0, #1
 8002702:	f7ff fbfb 	bl	8001efc <max7219_num>
 8002706:	e01e      	b.n	8002746 <max7219_Send_float+0x686>
			} else if (btn_state == 2){
 8002708:	4b8c      	ldr	r3, [pc, #560]	; (800293c <max7219_Send_float+0x87c>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d104      	bne.n	800271a <max7219_Send_float+0x65a>
				max7219_num(1, 12);
 8002710:	210c      	movs	r1, #12
 8002712:	2001      	movs	r0, #1
 8002714:	f7ff fbf2 	bl	8001efc <max7219_num>
 8002718:	e015      	b.n	8002746 <max7219_Send_float+0x686>
			} else if (btn_state == 3){
 800271a:	4b88      	ldr	r3, [pc, #544]	; (800293c <max7219_Send_float+0x87c>)
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	2b03      	cmp	r3, #3
 8002720:	d104      	bne.n	800272c <max7219_Send_float+0x66c>
				max7219_num(1, 12);
 8002722:	210c      	movs	r1, #12
 8002724:	2001      	movs	r0, #1
 8002726:	f7ff fbe9 	bl	8001efc <max7219_num>
 800272a:	e00c      	b.n	8002746 <max7219_Send_float+0x686>
			} else if (btn_state == 4){
 800272c:	4b83      	ldr	r3, [pc, #524]	; (800293c <max7219_Send_float+0x87c>)
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b04      	cmp	r3, #4
 8002732:	d104      	bne.n	800273e <max7219_Send_float+0x67e>
				max7219_num(1, 12);
 8002734:	210c      	movs	r1, #12
 8002736:	2001      	movs	r0, #1
 8002738:	f7ff fbe0 	bl	8001efc <max7219_num>
 800273c:	e003      	b.n	8002746 <max7219_Send_float+0x686>
				max7219_num(1, 12);
 800273e:	210c      	movs	r1, #12
 8002740:	2001      	movs	r0, #1
 8002742:	f7ff fbdb 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 8002746:	4b7d      	ldr	r3, [pc, #500]	; (800293c <max7219_Send_float+0x87c>)
 8002748:	781b      	ldrb	r3, [r3, #0]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d104      	bne.n	8002758 <max7219_Send_float+0x698>
				max7219_num(2, 255);
 800274e:	21ff      	movs	r1, #255	; 0xff
 8002750:	2002      	movs	r0, #2
 8002752:	f7ff fbd3 	bl	8001efc <max7219_num>
 8002756:	e027      	b.n	80027a8 <max7219_Send_float+0x6e8>
			} else if (btn_state == 1){
 8002758:	4b78      	ldr	r3, [pc, #480]	; (800293c <max7219_Send_float+0x87c>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d104      	bne.n	800276a <max7219_Send_float+0x6aa>
				max7219_num(2, 255);
 8002760:	21ff      	movs	r1, #255	; 0xff
 8002762:	2002      	movs	r0, #2
 8002764:	f7ff fbca 	bl	8001efc <max7219_num>
 8002768:	e01e      	b.n	80027a8 <max7219_Send_float+0x6e8>
			} else if (btn_state == 2){
 800276a:	4b74      	ldr	r3, [pc, #464]	; (800293c <max7219_Send_float+0x87c>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d104      	bne.n	800277c <max7219_Send_float+0x6bc>
				max7219_num(2, 10);
 8002772:	210a      	movs	r1, #10
 8002774:	2002      	movs	r0, #2
 8002776:	f7ff fbc1 	bl	8001efc <max7219_num>
 800277a:	e015      	b.n	80027a8 <max7219_Send_float+0x6e8>
			} else if (btn_state == 3){
 800277c:	4b6f      	ldr	r3, [pc, #444]	; (800293c <max7219_Send_float+0x87c>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b03      	cmp	r3, #3
 8002782:	d104      	bne.n	800278e <max7219_Send_float+0x6ce>
				max7219_num(2, 10);
 8002784:	210a      	movs	r1, #10
 8002786:	2002      	movs	r0, #2
 8002788:	f7ff fbb8 	bl	8001efc <max7219_num>
 800278c:	e00c      	b.n	80027a8 <max7219_Send_float+0x6e8>
			} else if (btn_state == 4){
 800278e:	4b6b      	ldr	r3, [pc, #428]	; (800293c <max7219_Send_float+0x87c>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	2b04      	cmp	r3, #4
 8002794:	d104      	bne.n	80027a0 <max7219_Send_float+0x6e0>
				max7219_num(2, 11);
 8002796:	210b      	movs	r1, #11
 8002798:	2002      	movs	r0, #2
 800279a:	f7ff fbaf 	bl	8001efc <max7219_num>
 800279e:	e003      	b.n	80027a8 <max7219_Send_float+0x6e8>
				max7219_num(2, 11);
 80027a0:	210b      	movs	r1, #11
 80027a2:	2002      	movs	r0, #2
 80027a4:	f7ff fbaa 	bl	8001efc <max7219_num>
			max7219_num(3, 255);
 80027a8:	21ff      	movs	r1, #255	; 0xff
 80027aa:	2003      	movs	r0, #3
 80027ac:	f7ff fba6 	bl	8001efc <max7219_num>
			if (positive_value == true) {
 80027b0:	7efb      	ldrb	r3, [r7, #27]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d004      	beq.n	80027c0 <max7219_Send_float+0x700>
				max7219_num(4, 255);
 80027b6:	21ff      	movs	r1, #255	; 0xff
 80027b8:	2004      	movs	r0, #4
 80027ba:	f7ff fb9f 	bl	8001efc <max7219_num>
 80027be:	e003      	b.n	80027c8 <max7219_Send_float+0x708>
				max7219_num(4, 254);
 80027c0:	21fe      	movs	r1, #254	; 0xfe
 80027c2:	2004      	movs	r0, #4
 80027c4:	f7ff fb9a 	bl	8001efc <max7219_num>
			max7219_num(5, BCD_Arr[4]);
 80027c8:	7c3b      	ldrb	r3, [r7, #16]
 80027ca:	4619      	mov	r1, r3
 80027cc:	2005      	movs	r0, #5
 80027ce:	f7ff fb95 	bl	8001efc <max7219_num>
			max7219_num_point(6, BCD_Arr[3]);
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	4619      	mov	r1, r3
 80027d6:	2006      	movs	r0, #6
 80027d8:	f7ff fc18 	bl	800200c <max7219_num_point>
			max7219_num(7, BCD_Arr[2]);
 80027dc:	7bbb      	ldrb	r3, [r7, #14]
 80027de:	4619      	mov	r1, r3
 80027e0:	2007      	movs	r0, #7
 80027e2:	f7ff fb8b 	bl	8001efc <max7219_num>
			max7219_send_symbol(symbol);
 80027e6:	4856      	ldr	r0, [pc, #344]	; (8002940 <max7219_Send_float+0x880>)
 80027e8:	f7ff fb48 	bl	8001e7c <max7219_send_symbol>
}
 80027ec:	e18b      	b.n	8002b06 <max7219_Send_float+0xa46>
		} else if (lenght < 1000000) {
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	4a55      	ldr	r2, [pc, #340]	; (8002948 <max7219_Send_float+0x888>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	f300 808a 	bgt.w	800290c <max7219_Send_float+0x84c>
			max7219_num(0, 255);
 80027f8:	21ff      	movs	r1, #255	; 0xff
 80027fa:	2000      	movs	r0, #0
 80027fc:	f7ff fb7e 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 8002800:	4b4e      	ldr	r3, [pc, #312]	; (800293c <max7219_Send_float+0x87c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d104      	bne.n	8002812 <max7219_Send_float+0x752>
				max7219_num(1, 10);
 8002808:	210a      	movs	r1, #10
 800280a:	2001      	movs	r0, #1
 800280c:	f7ff fb76 	bl	8001efc <max7219_num>
 8002810:	e027      	b.n	8002862 <max7219_Send_float+0x7a2>
			} else if (btn_state == 1){
 8002812:	4b4a      	ldr	r3, [pc, #296]	; (800293c <max7219_Send_float+0x87c>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b01      	cmp	r3, #1
 8002818:	d104      	bne.n	8002824 <max7219_Send_float+0x764>
				max7219_num(1, 11);
 800281a:	210b      	movs	r1, #11
 800281c:	2001      	movs	r0, #1
 800281e:	f7ff fb6d 	bl	8001efc <max7219_num>
 8002822:	e01e      	b.n	8002862 <max7219_Send_float+0x7a2>
			} else if (btn_state == 2){
 8002824:	4b45      	ldr	r3, [pc, #276]	; (800293c <max7219_Send_float+0x87c>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b02      	cmp	r3, #2
 800282a:	d104      	bne.n	8002836 <max7219_Send_float+0x776>
				max7219_num(1, 12);
 800282c:	210c      	movs	r1, #12
 800282e:	2001      	movs	r0, #1
 8002830:	f7ff fb64 	bl	8001efc <max7219_num>
 8002834:	e015      	b.n	8002862 <max7219_Send_float+0x7a2>
			} else if (btn_state == 3){
 8002836:	4b41      	ldr	r3, [pc, #260]	; (800293c <max7219_Send_float+0x87c>)
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	2b03      	cmp	r3, #3
 800283c:	d104      	bne.n	8002848 <max7219_Send_float+0x788>
				max7219_num(1, 12);
 800283e:	210c      	movs	r1, #12
 8002840:	2001      	movs	r0, #1
 8002842:	f7ff fb5b 	bl	8001efc <max7219_num>
 8002846:	e00c      	b.n	8002862 <max7219_Send_float+0x7a2>
			} else if (btn_state == 4){
 8002848:	4b3c      	ldr	r3, [pc, #240]	; (800293c <max7219_Send_float+0x87c>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d104      	bne.n	800285a <max7219_Send_float+0x79a>
				max7219_num(1, 12);
 8002850:	210c      	movs	r1, #12
 8002852:	2001      	movs	r0, #1
 8002854:	f7ff fb52 	bl	8001efc <max7219_num>
 8002858:	e003      	b.n	8002862 <max7219_Send_float+0x7a2>
				max7219_num(1, 12);
 800285a:	210c      	movs	r1, #12
 800285c:	2001      	movs	r0, #1
 800285e:	f7ff fb4d 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 8002862:	4b36      	ldr	r3, [pc, #216]	; (800293c <max7219_Send_float+0x87c>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d104      	bne.n	8002874 <max7219_Send_float+0x7b4>
				max7219_num(2, 255);
 800286a:	21ff      	movs	r1, #255	; 0xff
 800286c:	2002      	movs	r0, #2
 800286e:	f7ff fb45 	bl	8001efc <max7219_num>
 8002872:	e027      	b.n	80028c4 <max7219_Send_float+0x804>
			} else if (btn_state == 1){
 8002874:	4b31      	ldr	r3, [pc, #196]	; (800293c <max7219_Send_float+0x87c>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2b01      	cmp	r3, #1
 800287a:	d104      	bne.n	8002886 <max7219_Send_float+0x7c6>
				max7219_num(2, 255);
 800287c:	21ff      	movs	r1, #255	; 0xff
 800287e:	2002      	movs	r0, #2
 8002880:	f7ff fb3c 	bl	8001efc <max7219_num>
 8002884:	e01e      	b.n	80028c4 <max7219_Send_float+0x804>
			} else if (btn_state == 2){
 8002886:	4b2d      	ldr	r3, [pc, #180]	; (800293c <max7219_Send_float+0x87c>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	2b02      	cmp	r3, #2
 800288c:	d104      	bne.n	8002898 <max7219_Send_float+0x7d8>
				max7219_num(2, 10);
 800288e:	210a      	movs	r1, #10
 8002890:	2002      	movs	r0, #2
 8002892:	f7ff fb33 	bl	8001efc <max7219_num>
 8002896:	e015      	b.n	80028c4 <max7219_Send_float+0x804>
			} else if (btn_state == 3){
 8002898:	4b28      	ldr	r3, [pc, #160]	; (800293c <max7219_Send_float+0x87c>)
 800289a:	781b      	ldrb	r3, [r3, #0]
 800289c:	2b03      	cmp	r3, #3
 800289e:	d104      	bne.n	80028aa <max7219_Send_float+0x7ea>
				max7219_num(2, 10);
 80028a0:	210a      	movs	r1, #10
 80028a2:	2002      	movs	r0, #2
 80028a4:	f7ff fb2a 	bl	8001efc <max7219_num>
 80028a8:	e00c      	b.n	80028c4 <max7219_Send_float+0x804>
			} else if (btn_state == 4){
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <max7219_Send_float+0x87c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d104      	bne.n	80028bc <max7219_Send_float+0x7fc>
				max7219_num(2, 11);
 80028b2:	210b      	movs	r1, #11
 80028b4:	2002      	movs	r0, #2
 80028b6:	f7ff fb21 	bl	8001efc <max7219_num>
 80028ba:	e003      	b.n	80028c4 <max7219_Send_float+0x804>
				max7219_num(2, 11);
 80028bc:	210b      	movs	r1, #11
 80028be:	2002      	movs	r0, #2
 80028c0:	f7ff fb1c 	bl	8001efc <max7219_num>
			if (positive_value == true) {
 80028c4:	7efb      	ldrb	r3, [r7, #27]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <max7219_Send_float+0x814>
				max7219_num(3, 255);
 80028ca:	21ff      	movs	r1, #255	; 0xff
 80028cc:	2003      	movs	r0, #3
 80028ce:	f7ff fb15 	bl	8001efc <max7219_num>
 80028d2:	e003      	b.n	80028dc <max7219_Send_float+0x81c>
				max7219_num(3, 254);
 80028d4:	21fe      	movs	r1, #254	; 0xfe
 80028d6:	2003      	movs	r0, #3
 80028d8:	f7ff fb10 	bl	8001efc <max7219_num>
			max7219_num(4, BCD_Arr[5]);
 80028dc:	7c7b      	ldrb	r3, [r7, #17]
 80028de:	4619      	mov	r1, r3
 80028e0:	2004      	movs	r0, #4
 80028e2:	f7ff fb0b 	bl	8001efc <max7219_num>
			max7219_num(5, BCD_Arr[4]);
 80028e6:	7c3b      	ldrb	r3, [r7, #16]
 80028e8:	4619      	mov	r1, r3
 80028ea:	2005      	movs	r0, #5
 80028ec:	f7ff fb06 	bl	8001efc <max7219_num>
			max7219_num_point(6, BCD_Arr[3]);
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	4619      	mov	r1, r3
 80028f4:	2006      	movs	r0, #6
 80028f6:	f7ff fb89 	bl	800200c <max7219_num_point>
			max7219_num(7, BCD_Arr[2]);
 80028fa:	7bbb      	ldrb	r3, [r7, #14]
 80028fc:	4619      	mov	r1, r3
 80028fe:	2007      	movs	r0, #7
 8002900:	f7ff fafc 	bl	8001efc <max7219_num>
			max7219_send_symbol(symbol);
 8002904:	480e      	ldr	r0, [pc, #56]	; (8002940 <max7219_Send_float+0x880>)
 8002906:	f7ff fab9 	bl	8001e7c <max7219_send_symbol>
}
 800290a:	e0fc      	b.n	8002b06 <max7219_Send_float+0xa46>
		} else if (lenght < 10000000) {
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	4a0f      	ldr	r2, [pc, #60]	; (800294c <max7219_Send_float+0x88c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	f280 8096 	bge.w	8002a42 <max7219_Send_float+0x982>
			if (btn_state == 0){
 8002916:	4b09      	ldr	r3, [pc, #36]	; (800293c <max7219_Send_float+0x87c>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d104      	bne.n	8002928 <max7219_Send_float+0x868>
				max7219_num(0, 10);
 800291e:	210a      	movs	r1, #10
 8002920:	2000      	movs	r0, #0
 8002922:	f7ff faeb 	bl	8001efc <max7219_num>
 8002926:	e032      	b.n	800298e <max7219_Send_float+0x8ce>
			} else if (btn_state == 1){
 8002928:	4b04      	ldr	r3, [pc, #16]	; (800293c <max7219_Send_float+0x87c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b01      	cmp	r3, #1
 800292e:	d10f      	bne.n	8002950 <max7219_Send_float+0x890>
				max7219_num(0, 11);
 8002930:	210b      	movs	r1, #11
 8002932:	2000      	movs	r0, #0
 8002934:	f7ff fae2 	bl	8001efc <max7219_num>
 8002938:	e029      	b.n	800298e <max7219_Send_float+0x8ce>
 800293a:	bf00      	nop
 800293c:	200004eb 	.word	0x200004eb
 8002940:	20000500 	.word	0x20000500
 8002944:	0001869f 	.word	0x0001869f
 8002948:	000f423f 	.word	0x000f423f
 800294c:	00989680 	.word	0x00989680
			} else if (btn_state == 2){
 8002950:	4b6f      	ldr	r3, [pc, #444]	; (8002b10 <max7219_Send_float+0xa50>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2b02      	cmp	r3, #2
 8002956:	d104      	bne.n	8002962 <max7219_Send_float+0x8a2>
				max7219_num(0, 12);
 8002958:	210c      	movs	r1, #12
 800295a:	2000      	movs	r0, #0
 800295c:	f7ff face 	bl	8001efc <max7219_num>
 8002960:	e015      	b.n	800298e <max7219_Send_float+0x8ce>
			} else if (btn_state == 3){
 8002962:	4b6b      	ldr	r3, [pc, #428]	; (8002b10 <max7219_Send_float+0xa50>)
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	2b03      	cmp	r3, #3
 8002968:	d104      	bne.n	8002974 <max7219_Send_float+0x8b4>
				max7219_num(0, 12);
 800296a:	210c      	movs	r1, #12
 800296c:	2000      	movs	r0, #0
 800296e:	f7ff fac5 	bl	8001efc <max7219_num>
 8002972:	e00c      	b.n	800298e <max7219_Send_float+0x8ce>
			} else if (btn_state == 4){
 8002974:	4b66      	ldr	r3, [pc, #408]	; (8002b10 <max7219_Send_float+0xa50>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b04      	cmp	r3, #4
 800297a:	d104      	bne.n	8002986 <max7219_Send_float+0x8c6>
				max7219_num(0, 12);
 800297c:	210c      	movs	r1, #12
 800297e:	2000      	movs	r0, #0
 8002980:	f7ff fabc 	bl	8001efc <max7219_num>
 8002984:	e003      	b.n	800298e <max7219_Send_float+0x8ce>
				max7219_num(0, 12);
 8002986:	210c      	movs	r1, #12
 8002988:	2000      	movs	r0, #0
 800298a:	f7ff fab7 	bl	8001efc <max7219_num>
			if (btn_state == 0){
 800298e:	4b60      	ldr	r3, [pc, #384]	; (8002b10 <max7219_Send_float+0xa50>)
 8002990:	781b      	ldrb	r3, [r3, #0]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d104      	bne.n	80029a0 <max7219_Send_float+0x8e0>
				max7219_num(1, 255);
 8002996:	21ff      	movs	r1, #255	; 0xff
 8002998:	2001      	movs	r0, #1
 800299a:	f7ff faaf 	bl	8001efc <max7219_num>
 800299e:	e027      	b.n	80029f0 <max7219_Send_float+0x930>
			} else if (btn_state == 1){
 80029a0:	4b5b      	ldr	r3, [pc, #364]	; (8002b10 <max7219_Send_float+0xa50>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d104      	bne.n	80029b2 <max7219_Send_float+0x8f2>
				max7219_num(1, 255);
 80029a8:	21ff      	movs	r1, #255	; 0xff
 80029aa:	2001      	movs	r0, #1
 80029ac:	f7ff faa6 	bl	8001efc <max7219_num>
 80029b0:	e01e      	b.n	80029f0 <max7219_Send_float+0x930>
			} else if (btn_state == 2){
 80029b2:	4b57      	ldr	r3, [pc, #348]	; (8002b10 <max7219_Send_float+0xa50>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b02      	cmp	r3, #2
 80029b8:	d104      	bne.n	80029c4 <max7219_Send_float+0x904>
				max7219_num(1, 10);
 80029ba:	210a      	movs	r1, #10
 80029bc:	2001      	movs	r0, #1
 80029be:	f7ff fa9d 	bl	8001efc <max7219_num>
 80029c2:	e015      	b.n	80029f0 <max7219_Send_float+0x930>
			} else if (btn_state == 3){
 80029c4:	4b52      	ldr	r3, [pc, #328]	; (8002b10 <max7219_Send_float+0xa50>)
 80029c6:	781b      	ldrb	r3, [r3, #0]
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d104      	bne.n	80029d6 <max7219_Send_float+0x916>
				max7219_num(1, 10);
 80029cc:	210a      	movs	r1, #10
 80029ce:	2001      	movs	r0, #1
 80029d0:	f7ff fa94 	bl	8001efc <max7219_num>
 80029d4:	e00c      	b.n	80029f0 <max7219_Send_float+0x930>
			} else if (btn_state == 4){
 80029d6:	4b4e      	ldr	r3, [pc, #312]	; (8002b10 <max7219_Send_float+0xa50>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b04      	cmp	r3, #4
 80029dc:	d104      	bne.n	80029e8 <max7219_Send_float+0x928>
				max7219_num(1, 11);
 80029de:	210b      	movs	r1, #11
 80029e0:	2001      	movs	r0, #1
 80029e2:	f7ff fa8b 	bl	8001efc <max7219_num>
 80029e6:	e003      	b.n	80029f0 <max7219_Send_float+0x930>
				max7219_num(1, 11);
 80029e8:	210b      	movs	r1, #11
 80029ea:	2001      	movs	r0, #1
 80029ec:	f7ff fa86 	bl	8001efc <max7219_num>
			if (positive_value == true) {
 80029f0:	7efb      	ldrb	r3, [r7, #27]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d004      	beq.n	8002a00 <max7219_Send_float+0x940>
				max7219_num(2, 255);
 80029f6:	21ff      	movs	r1, #255	; 0xff
 80029f8:	2002      	movs	r0, #2
 80029fa:	f7ff fa7f 	bl	8001efc <max7219_num>
 80029fe:	e003      	b.n	8002a08 <max7219_Send_float+0x948>
				max7219_num(2, 254);
 8002a00:	21fe      	movs	r1, #254	; 0xfe
 8002a02:	2002      	movs	r0, #2
 8002a04:	f7ff fa7a 	bl	8001efc <max7219_num>
			max7219_num(3, BCD_Arr[6]);
 8002a08:	7cbb      	ldrb	r3, [r7, #18]
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	2003      	movs	r0, #3
 8002a0e:	f7ff fa75 	bl	8001efc <max7219_num>
			max7219_num(4, BCD_Arr[5]);
 8002a12:	7c7b      	ldrb	r3, [r7, #17]
 8002a14:	4619      	mov	r1, r3
 8002a16:	2004      	movs	r0, #4
 8002a18:	f7ff fa70 	bl	8001efc <max7219_num>
			max7219_num(5, BCD_Arr[4]);
 8002a1c:	7c3b      	ldrb	r3, [r7, #16]
 8002a1e:	4619      	mov	r1, r3
 8002a20:	2005      	movs	r0, #5
 8002a22:	f7ff fa6b 	bl	8001efc <max7219_num>
			max7219_num_point(6, BCD_Arr[3]);
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	4619      	mov	r1, r3
 8002a2a:	2006      	movs	r0, #6
 8002a2c:	f7ff faee 	bl	800200c <max7219_num_point>
			max7219_num(7, BCD_Arr[2]);
 8002a30:	7bbb      	ldrb	r3, [r7, #14]
 8002a32:	4619      	mov	r1, r3
 8002a34:	2007      	movs	r0, #7
 8002a36:	f7ff fa61 	bl	8001efc <max7219_num>
			max7219_send_symbol(symbol);
 8002a3a:	4836      	ldr	r0, [pc, #216]	; (8002b14 <max7219_Send_float+0xa54>)
 8002a3c:	f7ff fa1e 	bl	8001e7c <max7219_send_symbol>
}
 8002a40:	e061      	b.n	8002b06 <max7219_Send_float+0xa46>
		} else if (lenght < 100000000) {
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	4a34      	ldr	r2, [pc, #208]	; (8002b18 <max7219_Send_float+0xa58>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	dc5d      	bgt.n	8002b06 <max7219_Send_float+0xa46>
			if (btn_state == 0){
 8002a4a:	4b31      	ldr	r3, [pc, #196]	; (8002b10 <max7219_Send_float+0xa50>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <max7219_Send_float+0x99c>
				max7219_num(0, 10);
 8002a52:	210a      	movs	r1, #10
 8002a54:	2000      	movs	r0, #0
 8002a56:	f7ff fa51 	bl	8001efc <max7219_num>
 8002a5a:	e027      	b.n	8002aac <max7219_Send_float+0x9ec>
			} else if (btn_state == 1){
 8002a5c:	4b2c      	ldr	r3, [pc, #176]	; (8002b10 <max7219_Send_float+0xa50>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d104      	bne.n	8002a6e <max7219_Send_float+0x9ae>
				max7219_num(0, 11);
 8002a64:	210b      	movs	r1, #11
 8002a66:	2000      	movs	r0, #0
 8002a68:	f7ff fa48 	bl	8001efc <max7219_num>
 8002a6c:	e01e      	b.n	8002aac <max7219_Send_float+0x9ec>
			} else if (btn_state == 2){
 8002a6e:	4b28      	ldr	r3, [pc, #160]	; (8002b10 <max7219_Send_float+0xa50>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d104      	bne.n	8002a80 <max7219_Send_float+0x9c0>
				max7219_num(0, 12);
 8002a76:	210c      	movs	r1, #12
 8002a78:	2000      	movs	r0, #0
 8002a7a:	f7ff fa3f 	bl	8001efc <max7219_num>
 8002a7e:	e015      	b.n	8002aac <max7219_Send_float+0x9ec>
			} else if (btn_state == 3){
 8002a80:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <max7219_Send_float+0xa50>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	2b03      	cmp	r3, #3
 8002a86:	d104      	bne.n	8002a92 <max7219_Send_float+0x9d2>
				max7219_num(0, 12);
 8002a88:	210c      	movs	r1, #12
 8002a8a:	2000      	movs	r0, #0
 8002a8c:	f7ff fa36 	bl	8001efc <max7219_num>
 8002a90:	e00c      	b.n	8002aac <max7219_Send_float+0x9ec>
			} else if (btn_state == 4){
 8002a92:	4b1f      	ldr	r3, [pc, #124]	; (8002b10 <max7219_Send_float+0xa50>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b04      	cmp	r3, #4
 8002a98:	d104      	bne.n	8002aa4 <max7219_Send_float+0x9e4>
				max7219_num(0, 12);
 8002a9a:	210c      	movs	r1, #12
 8002a9c:	2000      	movs	r0, #0
 8002a9e:	f7ff fa2d 	bl	8001efc <max7219_num>
 8002aa2:	e003      	b.n	8002aac <max7219_Send_float+0x9ec>
				max7219_num(0, 12);
 8002aa4:	210c      	movs	r1, #12
 8002aa6:	2000      	movs	r0, #0
 8002aa8:	f7ff fa28 	bl	8001efc <max7219_num>
			if (positive_value == true) {
 8002aac:	7efb      	ldrb	r3, [r7, #27]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d004      	beq.n	8002abc <max7219_Send_float+0x9fc>
				max7219_num(1, 255);
 8002ab2:	21ff      	movs	r1, #255	; 0xff
 8002ab4:	2001      	movs	r0, #1
 8002ab6:	f7ff fa21 	bl	8001efc <max7219_num>
 8002aba:	e003      	b.n	8002ac4 <max7219_Send_float+0xa04>
				max7219_num(1, 254);
 8002abc:	21fe      	movs	r1, #254	; 0xfe
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f7ff fa1c 	bl	8001efc <max7219_num>
			max7219_num(2, BCD_Arr[7]);
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f7ff fa17 	bl	8001efc <max7219_num>
			max7219_num(3, BCD_Arr[6]);
 8002ace:	7cbb      	ldrb	r3, [r7, #18]
 8002ad0:	4619      	mov	r1, r3
 8002ad2:	2003      	movs	r0, #3
 8002ad4:	f7ff fa12 	bl	8001efc <max7219_num>
			max7219_num(4, BCD_Arr[5]);
 8002ad8:	7c7b      	ldrb	r3, [r7, #17]
 8002ada:	4619      	mov	r1, r3
 8002adc:	2004      	movs	r0, #4
 8002ade:	f7ff fa0d 	bl	8001efc <max7219_num>
			max7219_num(5, BCD_Arr[4]);
 8002ae2:	7c3b      	ldrb	r3, [r7, #16]
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	2005      	movs	r0, #5
 8002ae8:	f7ff fa08 	bl	8001efc <max7219_num>
			max7219_num_point(6, BCD_Arr[3]);
 8002aec:	7bfb      	ldrb	r3, [r7, #15]
 8002aee:	4619      	mov	r1, r3
 8002af0:	2006      	movs	r0, #6
 8002af2:	f7ff fa8b 	bl	800200c <max7219_num_point>
			max7219_num(7, BCD_Arr[2]);
 8002af6:	7bbb      	ldrb	r3, [r7, #14]
 8002af8:	4619      	mov	r1, r3
 8002afa:	2007      	movs	r0, #7
 8002afc:	f7ff f9fe 	bl	8001efc <max7219_num>
			max7219_send_symbol(symbol);
 8002b00:	4804      	ldr	r0, [pc, #16]	; (8002b14 <max7219_Send_float+0xa54>)
 8002b02:	f7ff f9bb 	bl	8001e7c <max7219_send_symbol>
}
 8002b06:	bf00      	nop
 8002b08:	3720      	adds	r7, #32
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	200004eb 	.word	0x200004eb
 8002b14:	20000500 	.word	0x20000500
 8002b18:	05f5e0ff 	.word	0x05f5e0ff

08002b1c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b082      	sub	sp, #8
 8002b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_MspInit+0x54>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4a11      	ldr	r2, [pc, #68]	; (8002b70 <HAL_MspInit+0x54>)
 8002b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b30:	6453      	str	r3, [r2, #68]	; 0x44
 8002b32:	4b0f      	ldr	r3, [pc, #60]	; (8002b70 <HAL_MspInit+0x54>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3a:	607b      	str	r3, [r7, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	603b      	str	r3, [r7, #0]
 8002b42:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_MspInit+0x54>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <HAL_MspInit+0x54>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b4e:	4b08      	ldr	r3, [pc, #32]	; (8002b70 <HAL_MspInit+0x54>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	603b      	str	r3, [r7, #0]
 8002b58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	210f      	movs	r1, #15
 8002b5e:	f06f 0001 	mvn.w	r0, #1
 8002b62:	f000 fb91 	bl	8003288 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b66:	bf00      	nop
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800

08002b74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b08a      	sub	sp, #40	; 0x28
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b7c:	f107 0314 	add.w	r3, r7, #20
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
 8002b84:	605a      	str	r2, [r3, #4]
 8002b86:	609a      	str	r2, [r3, #8]
 8002b88:	60da      	str	r2, [r3, #12]
 8002b8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1d      	ldr	r2, [pc, #116]	; (8002c08 <HAL_SPI_MspInit+0x94>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d133      	bne.n	8002bfe <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b96:	2300      	movs	r3, #0
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	4b1c      	ldr	r3, [pc, #112]	; (8002c0c <HAL_SPI_MspInit+0x98>)
 8002b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	; (8002c0c <HAL_SPI_MspInit+0x98>)
 8002ba0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002ba4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ba6:	4b19      	ldr	r3, [pc, #100]	; (8002c0c <HAL_SPI_MspInit+0x98>)
 8002ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002baa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bae:	613b      	str	r3, [r7, #16]
 8002bb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
 8002bb6:	4b15      	ldr	r3, [pc, #84]	; (8002c0c <HAL_SPI_MspInit+0x98>)
 8002bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bba:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <HAL_SPI_MspInit+0x98>)
 8002bbc:	f043 0302 	orr.w	r3, r3, #2
 8002bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8002bc2:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_SPI_MspInit+0x98>)
 8002bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc6:	f003 0302 	and.w	r3, r3, #2
 8002bca:	60fb      	str	r3, [r7, #12]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002bce:	2338      	movs	r3, #56	; 0x38
 8002bd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd2:	2302      	movs	r3, #2
 8002bd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bde:	2305      	movs	r3, #5
 8002be0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be2:	f107 0314 	add.w	r3, r7, #20
 8002be6:	4619      	mov	r1, r3
 8002be8:	4809      	ldr	r0, [pc, #36]	; (8002c10 <HAL_SPI_MspInit+0x9c>)
 8002bea:	f000 fba7 	bl	800333c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2105      	movs	r1, #5
 8002bf2:	2023      	movs	r0, #35	; 0x23
 8002bf4:	f000 fb48 	bl	8003288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8002bf8:	2023      	movs	r0, #35	; 0x23
 8002bfa:	f000 fb61 	bl	80032c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002bfe:	bf00      	nop
 8002c00:	3728      	adds	r7, #40	; 0x28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	40013000 	.word	0x40013000
 8002c0c:	40023800 	.word	0x40023800
 8002c10:	40020400 	.word	0x40020400

08002c14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b084      	sub	sp, #16
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4a20      	ldr	r2, [pc, #128]	; (8002ca4 <HAL_TIM_Base_MspInit+0x90>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d11e      	bne.n	8002c64 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c26:	2300      	movs	r3, #0
 8002c28:	60fb      	str	r3, [r7, #12]
 8002c2a:	4b1f      	ldr	r3, [pc, #124]	; (8002ca8 <HAL_TIM_Base_MspInit+0x94>)
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ca8 <HAL_TIM_Base_MspInit+0x94>)
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	6453      	str	r3, [r2, #68]	; 0x44
 8002c36:	4b1c      	ldr	r3, [pc, #112]	; (8002ca8 <HAL_TIM_Base_MspInit+0x94>)
 8002c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3a:	f003 0301 	and.w	r3, r3, #1
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 5, 0);
 8002c42:	2200      	movs	r2, #0
 8002c44:	2105      	movs	r1, #5
 8002c46:	2018      	movs	r0, #24
 8002c48:	f000 fb1e 	bl	8003288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002c4c:	2018      	movs	r0, #24
 8002c4e:	f000 fb37 	bl	80032c0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 5, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2105      	movs	r1, #5
 8002c56:	2019      	movs	r0, #25
 8002c58:	f000 fb16 	bl	8003288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c5c:	2019      	movs	r0, #25
 8002c5e:	f000 fb2f 	bl	80032c0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c62:	e01a      	b.n	8002c9a <HAL_TIM_Base_MspInit+0x86>
  else if(htim_base->Instance==TIM2)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c6c:	d115      	bne.n	8002c9a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c6e:	2300      	movs	r3, #0
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	4b0d      	ldr	r3, [pc, #52]	; (8002ca8 <HAL_TIM_Base_MspInit+0x94>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	4a0c      	ldr	r2, [pc, #48]	; (8002ca8 <HAL_TIM_Base_MspInit+0x94>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7e:	4b0a      	ldr	r3, [pc, #40]	; (8002ca8 <HAL_TIM_Base_MspInit+0x94>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	60bb      	str	r3, [r7, #8]
 8002c88:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	2105      	movs	r1, #5
 8002c8e:	201c      	movs	r0, #28
 8002c90:	f000 fafa 	bl	8003288 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c94:	201c      	movs	r0, #28
 8002c96:	f000 fb13 	bl	80032c0 <HAL_NVIC_EnableIRQ>
}
 8002c9a:	bf00      	nop
 8002c9c:	3710      	adds	r7, #16
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	40010000 	.word	0x40010000
 8002ca8:	40023800 	.word	0x40023800

08002cac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b08c      	sub	sp, #48	; 0x30
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	6879      	ldr	r1, [r7, #4]
 8002cc0:	2036      	movs	r0, #54	; 0x36
 8002cc2:	f000 fae1 	bl	8003288 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002cc6:	2036      	movs	r0, #54	; 0x36
 8002cc8:	f000 fafa 	bl	80032c0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	4b1f      	ldr	r3, [pc, #124]	; (8002d50 <HAL_InitTick+0xa4>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	4a1e      	ldr	r2, [pc, #120]	; (8002d50 <HAL_InitTick+0xa4>)
 8002cd6:	f043 0310 	orr.w	r3, r3, #16
 8002cda:	6413      	str	r3, [r2, #64]	; 0x40
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <HAL_InitTick+0xa4>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f003 0310 	and.w	r3, r3, #16
 8002ce4:	60fb      	str	r3, [r7, #12]
 8002ce6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002ce8:	f107 0210 	add.w	r2, r7, #16
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f001 f9ec 	bl	80040d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8002cf8:	f001 f9d6 	bl	80040a8 <HAL_RCC_GetPCLK1Freq>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d04:	4a13      	ldr	r2, [pc, #76]	; (8002d54 <HAL_InitTick+0xa8>)
 8002d06:	fba2 2303 	umull	r2, r3, r2, r3
 8002d0a:	0c9b      	lsrs	r3, r3, #18
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002d10:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_InitTick+0xac>)
 8002d12:	4a12      	ldr	r2, [pc, #72]	; (8002d5c <HAL_InitTick+0xb0>)
 8002d14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002d16:	4b10      	ldr	r3, [pc, #64]	; (8002d58 <HAL_InitTick+0xac>)
 8002d18:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002d1c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002d1e:	4a0e      	ldr	r2, [pc, #56]	; (8002d58 <HAL_InitTick+0xac>)
 8002d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d22:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_InitTick+0xac>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d2a:	4b0b      	ldr	r3, [pc, #44]	; (8002d58 <HAL_InitTick+0xac>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8002d30:	4809      	ldr	r0, [pc, #36]	; (8002d58 <HAL_InitTick+0xac>)
 8002d32:	f001 fdad 	bl	8004890 <HAL_TIM_Base_Init>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8002d3c:	4806      	ldr	r0, [pc, #24]	; (8002d58 <HAL_InitTick+0xac>)
 8002d3e:	f001 fdf7 	bl	8004930 <HAL_TIM_Base_Start_IT>
 8002d42:	4603      	mov	r3, r0
 8002d44:	e000      	b.n	8002d48 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3730      	adds	r7, #48	; 0x30
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	40023800 	.word	0x40023800
 8002d54:	431bde83 	.word	0x431bde83
 8002d58:	20000508 	.word	0x20000508
 8002d5c:	40001000 	.word	0x40001000

08002d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d60:	b480      	push	{r7}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d64:	e7fe      	b.n	8002d64 <NMI_Handler+0x4>

08002d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d66:	b480      	push	{r7}
 8002d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d6a:	e7fe      	b.n	8002d6a <HardFault_Handler+0x4>

08002d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d70:	e7fe      	b.n	8002d70 <MemManage_Handler+0x4>

08002d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d72:	b480      	push	{r7}
 8002d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d76:	e7fe      	b.n	8002d76 <BusFault_Handler+0x4>

08002d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d7c:	e7fe      	b.n	8002d7c <UsageFault_Handler+0x4>

08002d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002d92:	f001 fe6c 	bl	8004a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000440 	.word	0x20000440

08002da0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002da6:	f001 fe62 	bl	8004a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20000440 	.word	0x20000440

08002db4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <TIM2_IRQHandler+0x10>)
 8002dba:	f001 fe58 	bl	8004a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	20000488 	.word	0x20000488

08002dc8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <SPI1_IRQHandler+0x10>)
 8002dce:	f001 fb77 	bl	80044c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	200003e8 	.word	0x200003e8

08002ddc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8002de0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002de4:	f000 fc88 	bl	80036f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002de8:	bf00      	nop
 8002dea:	bd80      	pop	{r7, pc}

08002dec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002df0:	4802      	ldr	r0, [pc, #8]	; (8002dfc <TIM6_DAC_IRQHandler+0x10>)
 8002df2:	f001 fe3c 	bl	8004a6e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002df6:	bf00      	nop
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	20000508 	.word	0x20000508

08002e00 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
	return 1;
 8002e04:	2301      	movs	r3, #1
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <_kill>:

int _kill(int pid, int sig)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002e1a:	f005 f98f 	bl	800813c <__errno>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2216      	movs	r2, #22
 8002e22:	601a      	str	r2, [r3, #0]
	return -1;
 8002e24:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3708      	adds	r7, #8
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}

08002e30 <_exit>:

void _exit (int status)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e38:	f04f 31ff 	mov.w	r1, #4294967295
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	f7ff ffe7 	bl	8002e10 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e42:	e7fe      	b.n	8002e42 <_exit+0x12>

08002e44 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	60b9      	str	r1, [r7, #8]
 8002e4e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e50:	2300      	movs	r3, #0
 8002e52:	617b      	str	r3, [r7, #20]
 8002e54:	e00a      	b.n	8002e6c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e56:	f3af 8000 	nop.w
 8002e5a:	4601      	mov	r1, r0
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	60ba      	str	r2, [r7, #8]
 8002e62:	b2ca      	uxtb	r2, r1
 8002e64:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	617b      	str	r3, [r7, #20]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	429a      	cmp	r2, r3
 8002e72:	dbf0      	blt.n	8002e56 <_read+0x12>
	}

return len;
 8002e74:	687b      	ldr	r3, [r7, #4]
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}

08002e7e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e7e:	b580      	push	{r7, lr}
 8002e80:	b086      	sub	sp, #24
 8002e82:	af00      	add	r7, sp, #0
 8002e84:	60f8      	str	r0, [r7, #12]
 8002e86:	60b9      	str	r1, [r7, #8]
 8002e88:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
 8002e8e:	e009      	b.n	8002ea4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	1c5a      	adds	r2, r3, #1
 8002e94:	60ba      	str	r2, [r7, #8]
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	617b      	str	r3, [r7, #20]
 8002ea4:	697a      	ldr	r2, [r7, #20]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	dbf1      	blt.n	8002e90 <_write+0x12>
	}
	return len;
 8002eac:	687b      	ldr	r3, [r7, #4]
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <_close>:

int _close(int file)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
	return -1;
 8002ebe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
 8002ed6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ede:	605a      	str	r2, [r3, #4]
	return 0;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <_isatty>:

int _isatty(int file)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
	return 1;
 8002ef6:	2301      	movs	r3, #1
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr

08002f04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
	return 0;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
	...

08002f20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b086      	sub	sp, #24
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f28:	4a14      	ldr	r2, [pc, #80]	; (8002f7c <_sbrk+0x5c>)
 8002f2a:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <_sbrk+0x60>)
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <_sbrk+0x64>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d102      	bne.n	8002f42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f3c:	4b11      	ldr	r3, [pc, #68]	; (8002f84 <_sbrk+0x64>)
 8002f3e:	4a12      	ldr	r2, [pc, #72]	; (8002f88 <_sbrk+0x68>)
 8002f40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f42:	4b10      	ldr	r3, [pc, #64]	; (8002f84 <_sbrk+0x64>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	693a      	ldr	r2, [r7, #16]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d207      	bcs.n	8002f60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f50:	f005 f8f4 	bl	800813c <__errno>
 8002f54:	4603      	mov	r3, r0
 8002f56:	220c      	movs	r2, #12
 8002f58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f5a:	f04f 33ff 	mov.w	r3, #4294967295
 8002f5e:	e009      	b.n	8002f74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f60:	4b08      	ldr	r3, [pc, #32]	; (8002f84 <_sbrk+0x64>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f66:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <_sbrk+0x64>)
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4413      	add	r3, r2
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <_sbrk+0x64>)
 8002f70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f72:	68fb      	ldr	r3, [r7, #12]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3718      	adds	r7, #24
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	20030000 	.word	0x20030000
 8002f80:	00000400 	.word	0x00000400
 8002f84:	20000550 	.word	0x20000550
 8002f88:	20004f78 	.word	0x20004f78

08002f8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <SystemInit+0x20>)
 8002f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <SystemInit+0x20>)
 8002f98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002fa0:	bf00      	nop
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	e000ed00 	.word	0xe000ed00

08002fb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fe8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002fb4:	480d      	ldr	r0, [pc, #52]	; (8002fec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002fb6:	490e      	ldr	r1, [pc, #56]	; (8002ff0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002fb8:	4a0e      	ldr	r2, [pc, #56]	; (8002ff4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002fbc:	e002      	b.n	8002fc4 <LoopCopyDataInit>

08002fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002fc2:	3304      	adds	r3, #4

08002fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fc8:	d3f9      	bcc.n	8002fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fca:	4a0b      	ldr	r2, [pc, #44]	; (8002ff8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fcc:	4c0b      	ldr	r4, [pc, #44]	; (8002ffc <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fd0:	e001      	b.n	8002fd6 <LoopFillZerobss>

08002fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fd4:	3204      	adds	r2, #4

08002fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fd8:	d3fb      	bcc.n	8002fd2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fda:	f7ff ffd7 	bl	8002f8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fde:	f005 f9a9 	bl	8008334 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fe2:	f7fe f9ab 	bl	800133c <main>
  bx  lr    
 8002fe6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002fe8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ff0:	200003cc 	.word	0x200003cc
  ldr r2, =_sidata
 8002ff4:	0800d1c4 	.word	0x0800d1c4
  ldr r2, =_sbss
 8002ff8:	200003cc 	.word	0x200003cc
  ldr r4, =_ebss
 8002ffc:	20004f78 	.word	0x20004f78

08003000 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003000:	e7fe      	b.n	8003000 <ADC_IRQHandler>
	...

08003004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003004:	b580      	push	{r7, lr}
 8003006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003008:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <HAL_Init+0x40>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a0d      	ldr	r2, [pc, #52]	; (8003044 <HAL_Init+0x40>)
 800300e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003014:	4b0b      	ldr	r3, [pc, #44]	; (8003044 <HAL_Init+0x40>)
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	4a0a      	ldr	r2, [pc, #40]	; (8003044 <HAL_Init+0x40>)
 800301a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800301e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003020:	4b08      	ldr	r3, [pc, #32]	; (8003044 <HAL_Init+0x40>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a07      	ldr	r2, [pc, #28]	; (8003044 <HAL_Init+0x40>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800302c:	2003      	movs	r0, #3
 800302e:	f000 f920 	bl	8003272 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003032:	200f      	movs	r0, #15
 8003034:	f7ff fe3a 	bl	8002cac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003038:	f7ff fd70 	bl	8002b1c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	40023c00 	.word	0x40023c00

08003048 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003048:	b480      	push	{r7}
 800304a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800304c:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_IncTick+0x20>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	461a      	mov	r2, r3
 8003052:	4b06      	ldr	r3, [pc, #24]	; (800306c <HAL_IncTick+0x24>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4413      	add	r3, r2
 8003058:	4a04      	ldr	r2, [pc, #16]	; (800306c <HAL_IncTick+0x24>)
 800305a:	6013      	str	r3, [r2, #0]
}
 800305c:	bf00      	nop
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	200001f0 	.word	0x200001f0
 800306c:	20000554 	.word	0x20000554

08003070 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return uwTick;
 8003074:	4b03      	ldr	r3, [pc, #12]	; (8003084 <HAL_GetTick+0x14>)
 8003076:	681b      	ldr	r3, [r3, #0]
}
 8003078:	4618      	mov	r0, r3
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	20000554 	.word	0x20000554

08003088 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003090:	f7ff ffee 	bl	8003070 <HAL_GetTick>
 8003094:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030a0:	d005      	beq.n	80030ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030a2:	4b0a      	ldr	r3, [pc, #40]	; (80030cc <HAL_Delay+0x44>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	4413      	add	r3, r2
 80030ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030ae:	bf00      	nop
 80030b0:	f7ff ffde 	bl	8003070 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d8f7      	bhi.n	80030b0 <HAL_Delay+0x28>
  {
  }
}
 80030c0:	bf00      	nop
 80030c2:	bf00      	nop
 80030c4:	3710      	adds	r7, #16
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}
 80030ca:	bf00      	nop
 80030cc:	200001f0 	.word	0x200001f0

080030d0 <__NVIC_SetPriorityGrouping>:
{
 80030d0:	b480      	push	{r7}
 80030d2:	b085      	sub	sp, #20
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f003 0307 	and.w	r3, r3, #7
 80030de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030e0:	4b0c      	ldr	r3, [pc, #48]	; (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030ec:	4013      	ands	r3, r2
 80030ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003102:	4a04      	ldr	r2, [pc, #16]	; (8003114 <__NVIC_SetPriorityGrouping+0x44>)
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	60d3      	str	r3, [r2, #12]
}
 8003108:	bf00      	nop
 800310a:	3714      	adds	r7, #20
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000ed00 	.word	0xe000ed00

08003118 <__NVIC_GetPriorityGrouping>:
{
 8003118:	b480      	push	{r7}
 800311a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800311c:	4b04      	ldr	r3, [pc, #16]	; (8003130 <__NVIC_GetPriorityGrouping+0x18>)
 800311e:	68db      	ldr	r3, [r3, #12]
 8003120:	0a1b      	lsrs	r3, r3, #8
 8003122:	f003 0307 	and.w	r3, r3, #7
}
 8003126:	4618      	mov	r0, r3
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_EnableIRQ>:
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	4603      	mov	r3, r0
 800313c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	2b00      	cmp	r3, #0
 8003144:	db0b      	blt.n	800315e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003146:	79fb      	ldrb	r3, [r7, #7]
 8003148:	f003 021f 	and.w	r2, r3, #31
 800314c:	4907      	ldr	r1, [pc, #28]	; (800316c <__NVIC_EnableIRQ+0x38>)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	095b      	lsrs	r3, r3, #5
 8003154:	2001      	movs	r0, #1
 8003156:	fa00 f202 	lsl.w	r2, r0, r2
 800315a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800315e:	bf00      	nop
 8003160:	370c      	adds	r7, #12
 8003162:	46bd      	mov	sp, r7
 8003164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003168:	4770      	bx	lr
 800316a:	bf00      	nop
 800316c:	e000e100 	.word	0xe000e100

08003170 <__NVIC_DisableIRQ>:
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800317a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800317e:	2b00      	cmp	r3, #0
 8003180:	db12      	blt.n	80031a8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003182:	79fb      	ldrb	r3, [r7, #7]
 8003184:	f003 021f 	and.w	r2, r3, #31
 8003188:	490a      	ldr	r1, [pc, #40]	; (80031b4 <__NVIC_DisableIRQ+0x44>)
 800318a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800318e:	095b      	lsrs	r3, r3, #5
 8003190:	2001      	movs	r0, #1
 8003192:	fa00 f202 	lsl.w	r2, r0, r2
 8003196:	3320      	adds	r3, #32
 8003198:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800319c:	f3bf 8f4f 	dsb	sy
}
 80031a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80031a2:	f3bf 8f6f 	isb	sy
}
 80031a6:	bf00      	nop
}
 80031a8:	bf00      	nop
 80031aa:	370c      	adds	r7, #12
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	e000e100 	.word	0xe000e100

080031b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	4603      	mov	r3, r0
 80031c0:	6039      	str	r1, [r7, #0]
 80031c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	db0a      	blt.n	80031e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	490c      	ldr	r1, [pc, #48]	; (8003204 <__NVIC_SetPriority+0x4c>)
 80031d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031d6:	0112      	lsls	r2, r2, #4
 80031d8:	b2d2      	uxtb	r2, r2
 80031da:	440b      	add	r3, r1
 80031dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031e0:	e00a      	b.n	80031f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4908      	ldr	r1, [pc, #32]	; (8003208 <__NVIC_SetPriority+0x50>)
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	f003 030f 	and.w	r3, r3, #15
 80031ee:	3b04      	subs	r3, #4
 80031f0:	0112      	lsls	r2, r2, #4
 80031f2:	b2d2      	uxtb	r2, r2
 80031f4:	440b      	add	r3, r1
 80031f6:	761a      	strb	r2, [r3, #24]
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	e000e100 	.word	0xe000e100
 8003208:	e000ed00 	.word	0xe000ed00

0800320c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800320c:	b480      	push	{r7}
 800320e:	b089      	sub	sp, #36	; 0x24
 8003210:	af00      	add	r7, sp, #0
 8003212:	60f8      	str	r0, [r7, #12]
 8003214:	60b9      	str	r1, [r7, #8]
 8003216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	f003 0307 	and.w	r3, r3, #7
 800321e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003220:	69fb      	ldr	r3, [r7, #28]
 8003222:	f1c3 0307 	rsb	r3, r3, #7
 8003226:	2b04      	cmp	r3, #4
 8003228:	bf28      	it	cs
 800322a:	2304      	movcs	r3, #4
 800322c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	3304      	adds	r3, #4
 8003232:	2b06      	cmp	r3, #6
 8003234:	d902      	bls.n	800323c <NVIC_EncodePriority+0x30>
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	3b03      	subs	r3, #3
 800323a:	e000      	b.n	800323e <NVIC_EncodePriority+0x32>
 800323c:	2300      	movs	r3, #0
 800323e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003240:	f04f 32ff 	mov.w	r2, #4294967295
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	fa02 f303 	lsl.w	r3, r2, r3
 800324a:	43da      	mvns	r2, r3
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	401a      	ands	r2, r3
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003254:	f04f 31ff 	mov.w	r1, #4294967295
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	fa01 f303 	lsl.w	r3, r1, r3
 800325e:	43d9      	mvns	r1, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003264:	4313      	orrs	r3, r2
         );
}
 8003266:	4618      	mov	r0, r3
 8003268:	3724      	adds	r7, #36	; 0x24
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7ff ff28 	bl	80030d0 <__NVIC_SetPriorityGrouping>
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003288:	b580      	push	{r7, lr}
 800328a:	b086      	sub	sp, #24
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
 8003294:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003296:	2300      	movs	r3, #0
 8003298:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800329a:	f7ff ff3d 	bl	8003118 <__NVIC_GetPriorityGrouping>
 800329e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	68b9      	ldr	r1, [r7, #8]
 80032a4:	6978      	ldr	r0, [r7, #20]
 80032a6:	f7ff ffb1 	bl	800320c <NVIC_EncodePriority>
 80032aa:	4602      	mov	r2, r0
 80032ac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032b0:	4611      	mov	r1, r2
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff ff80 	bl	80031b8 <__NVIC_SetPriority>
}
 80032b8:	bf00      	nop
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b082      	sub	sp, #8
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	4603      	mov	r3, r0
 80032c8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff ff30 	bl	8003134 <__NVIC_EnableIRQ>
}
 80032d4:	bf00      	nop
 80032d6:	3708      	adds	r7, #8
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	4603      	mov	r3, r0
 80032e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80032e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032ea:	4618      	mov	r0, r3
 80032ec:	f7ff ff40 	bl	8003170 <__NVIC_DisableIRQ>
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b083      	sub	sp, #12
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003306:	b2db      	uxtb	r3, r3
 8003308:	2b02      	cmp	r3, #2
 800330a:	d004      	beq.n	8003316 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2280      	movs	r2, #128	; 0x80
 8003310:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e00c      	b.n	8003330 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2205      	movs	r2, #5
 800331a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f022 0201 	bic.w	r2, r2, #1
 800332c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800332e:	2300      	movs	r3, #0
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr

0800333c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800333c:	b480      	push	{r7}
 800333e:	b089      	sub	sp, #36	; 0x24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
 8003344:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003346:	2300      	movs	r3, #0
 8003348:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800334a:	2300      	movs	r3, #0
 800334c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003352:	2300      	movs	r3, #0
 8003354:	61fb      	str	r3, [r7, #28]
 8003356:	e177      	b.n	8003648 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003358:	2201      	movs	r2, #1
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	fa02 f303 	lsl.w	r3, r2, r3
 8003360:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	697a      	ldr	r2, [r7, #20]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800336c:	693a      	ldr	r2, [r7, #16]
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	429a      	cmp	r2, r3
 8003372:	f040 8166 	bne.w	8003642 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	2b01      	cmp	r3, #1
 8003380:	d005      	beq.n	800338e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800338a:	2b02      	cmp	r3, #2
 800338c:	d130      	bne.n	80033f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003394:	69fb      	ldr	r3, [r7, #28]
 8003396:	005b      	lsls	r3, r3, #1
 8003398:	2203      	movs	r2, #3
 800339a:	fa02 f303 	lsl.w	r3, r2, r3
 800339e:	43db      	mvns	r3, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4013      	ands	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	68da      	ldr	r2, [r3, #12]
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	005b      	lsls	r3, r3, #1
 80033ae:	fa02 f303 	lsl.w	r3, r2, r3
 80033b2:	69ba      	ldr	r2, [r7, #24]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69ba      	ldr	r2, [r7, #24]
 80033bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033c4:	2201      	movs	r2, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	43db      	mvns	r3, r3
 80033ce:	69ba      	ldr	r2, [r7, #24]
 80033d0:	4013      	ands	r3, r2
 80033d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	091b      	lsrs	r3, r3, #4
 80033da:	f003 0201 	and.w	r2, r3, #1
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	fa02 f303 	lsl.w	r3, r2, r3
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69ba      	ldr	r2, [r7, #24]
 80033ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 0303 	and.w	r3, r3, #3
 80033f8:	2b03      	cmp	r3, #3
 80033fa:	d017      	beq.n	800342c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	68db      	ldr	r3, [r3, #12]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	005b      	lsls	r3, r3, #1
 8003406:	2203      	movs	r2, #3
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	689a      	ldr	r2, [r3, #8]
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	005b      	lsls	r3, r3, #1
 800341c:	fa02 f303 	lsl.w	r3, r2, r3
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	4313      	orrs	r3, r2
 8003424:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f003 0303 	and.w	r3, r3, #3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d123      	bne.n	8003480 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	08da      	lsrs	r2, r3, #3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	3208      	adds	r2, #8
 8003440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003444:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003446:	69fb      	ldr	r3, [r7, #28]
 8003448:	f003 0307 	and.w	r3, r3, #7
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	220f      	movs	r2, #15
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	69ba      	ldr	r2, [r7, #24]
 8003458:	4013      	ands	r3, r2
 800345a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	691a      	ldr	r2, [r3, #16]
 8003460:	69fb      	ldr	r3, [r7, #28]
 8003462:	f003 0307 	and.w	r3, r3, #7
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	4313      	orrs	r3, r2
 8003470:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	08da      	lsrs	r2, r3, #3
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	3208      	adds	r2, #8
 800347a:	69b9      	ldr	r1, [r7, #24]
 800347c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	005b      	lsls	r3, r3, #1
 800348a:	2203      	movs	r2, #3
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f003 0203 	and.w	r2, r3, #3
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	f000 80c0 	beq.w	8003642 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034c2:	2300      	movs	r3, #0
 80034c4:	60fb      	str	r3, [r7, #12]
 80034c6:	4b66      	ldr	r3, [pc, #408]	; (8003660 <HAL_GPIO_Init+0x324>)
 80034c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034ca:	4a65      	ldr	r2, [pc, #404]	; (8003660 <HAL_GPIO_Init+0x324>)
 80034cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d0:	6453      	str	r3, [r2, #68]	; 0x44
 80034d2:	4b63      	ldr	r3, [pc, #396]	; (8003660 <HAL_GPIO_Init+0x324>)
 80034d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034da:	60fb      	str	r3, [r7, #12]
 80034dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034de:	4a61      	ldr	r2, [pc, #388]	; (8003664 <HAL_GPIO_Init+0x328>)
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	089b      	lsrs	r3, r3, #2
 80034e4:	3302      	adds	r3, #2
 80034e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	220f      	movs	r2, #15
 80034f6:	fa02 f303 	lsl.w	r3, r2, r3
 80034fa:	43db      	mvns	r3, r3
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	4013      	ands	r3, r2
 8003500:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a58      	ldr	r2, [pc, #352]	; (8003668 <HAL_GPIO_Init+0x32c>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d037      	beq.n	800357a <HAL_GPIO_Init+0x23e>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a57      	ldr	r2, [pc, #348]	; (800366c <HAL_GPIO_Init+0x330>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d031      	beq.n	8003576 <HAL_GPIO_Init+0x23a>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a56      	ldr	r2, [pc, #344]	; (8003670 <HAL_GPIO_Init+0x334>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d02b      	beq.n	8003572 <HAL_GPIO_Init+0x236>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a55      	ldr	r2, [pc, #340]	; (8003674 <HAL_GPIO_Init+0x338>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d025      	beq.n	800356e <HAL_GPIO_Init+0x232>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a54      	ldr	r2, [pc, #336]	; (8003678 <HAL_GPIO_Init+0x33c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d01f      	beq.n	800356a <HAL_GPIO_Init+0x22e>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a53      	ldr	r2, [pc, #332]	; (800367c <HAL_GPIO_Init+0x340>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d019      	beq.n	8003566 <HAL_GPIO_Init+0x22a>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a52      	ldr	r2, [pc, #328]	; (8003680 <HAL_GPIO_Init+0x344>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d013      	beq.n	8003562 <HAL_GPIO_Init+0x226>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a51      	ldr	r2, [pc, #324]	; (8003684 <HAL_GPIO_Init+0x348>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d00d      	beq.n	800355e <HAL_GPIO_Init+0x222>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a50      	ldr	r2, [pc, #320]	; (8003688 <HAL_GPIO_Init+0x34c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d007      	beq.n	800355a <HAL_GPIO_Init+0x21e>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a4f      	ldr	r2, [pc, #316]	; (800368c <HAL_GPIO_Init+0x350>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d101      	bne.n	8003556 <HAL_GPIO_Init+0x21a>
 8003552:	2309      	movs	r3, #9
 8003554:	e012      	b.n	800357c <HAL_GPIO_Init+0x240>
 8003556:	230a      	movs	r3, #10
 8003558:	e010      	b.n	800357c <HAL_GPIO_Init+0x240>
 800355a:	2308      	movs	r3, #8
 800355c:	e00e      	b.n	800357c <HAL_GPIO_Init+0x240>
 800355e:	2307      	movs	r3, #7
 8003560:	e00c      	b.n	800357c <HAL_GPIO_Init+0x240>
 8003562:	2306      	movs	r3, #6
 8003564:	e00a      	b.n	800357c <HAL_GPIO_Init+0x240>
 8003566:	2305      	movs	r3, #5
 8003568:	e008      	b.n	800357c <HAL_GPIO_Init+0x240>
 800356a:	2304      	movs	r3, #4
 800356c:	e006      	b.n	800357c <HAL_GPIO_Init+0x240>
 800356e:	2303      	movs	r3, #3
 8003570:	e004      	b.n	800357c <HAL_GPIO_Init+0x240>
 8003572:	2302      	movs	r3, #2
 8003574:	e002      	b.n	800357c <HAL_GPIO_Init+0x240>
 8003576:	2301      	movs	r3, #1
 8003578:	e000      	b.n	800357c <HAL_GPIO_Init+0x240>
 800357a:	2300      	movs	r3, #0
 800357c:	69fa      	ldr	r2, [r7, #28]
 800357e:	f002 0203 	and.w	r2, r2, #3
 8003582:	0092      	lsls	r2, r2, #2
 8003584:	4093      	lsls	r3, r2
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800358c:	4935      	ldr	r1, [pc, #212]	; (8003664 <HAL_GPIO_Init+0x328>)
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	089b      	lsrs	r3, r3, #2
 8003592:	3302      	adds	r3, #2
 8003594:	69ba      	ldr	r2, [r7, #24]
 8003596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800359a:	4b3d      	ldr	r3, [pc, #244]	; (8003690 <HAL_GPIO_Init+0x354>)
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	43db      	mvns	r3, r3
 80035a4:	69ba      	ldr	r2, [r7, #24]
 80035a6:	4013      	ands	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80035b6:	69ba      	ldr	r2, [r7, #24]
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035be:	4a34      	ldr	r2, [pc, #208]	; (8003690 <HAL_GPIO_Init+0x354>)
 80035c0:	69bb      	ldr	r3, [r7, #24]
 80035c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c4:	4b32      	ldr	r3, [pc, #200]	; (8003690 <HAL_GPIO_Init+0x354>)
 80035c6:	68db      	ldr	r3, [r3, #12]
 80035c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	43db      	mvns	r3, r3
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	4013      	ands	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	685b      	ldr	r3, [r3, #4]
 80035d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d003      	beq.n	80035e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80035e0:	69ba      	ldr	r2, [r7, #24]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	4313      	orrs	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035e8:	4a29      	ldr	r2, [pc, #164]	; (8003690 <HAL_GPIO_Init+0x354>)
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035ee:	4b28      	ldr	r3, [pc, #160]	; (8003690 <HAL_GPIO_Init+0x354>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	43db      	mvns	r3, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4013      	ands	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d003      	beq.n	8003612 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800360a:	69ba      	ldr	r2, [r7, #24]
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4313      	orrs	r3, r2
 8003610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003612:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_GPIO_Init+0x354>)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003618:	4b1d      	ldr	r3, [pc, #116]	; (8003690 <HAL_GPIO_Init+0x354>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	43db      	mvns	r3, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4013      	ands	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	685b      	ldr	r3, [r3, #4]
 800362c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d003      	beq.n	800363c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	4313      	orrs	r3, r2
 800363a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800363c:	4a14      	ldr	r2, [pc, #80]	; (8003690 <HAL_GPIO_Init+0x354>)
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	3301      	adds	r3, #1
 8003646:	61fb      	str	r3, [r7, #28]
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2b0f      	cmp	r3, #15
 800364c:	f67f ae84 	bls.w	8003358 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	3724      	adds	r7, #36	; 0x24
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	40013800 	.word	0x40013800
 8003668:	40020000 	.word	0x40020000
 800366c:	40020400 	.word	0x40020400
 8003670:	40020800 	.word	0x40020800
 8003674:	40020c00 	.word	0x40020c00
 8003678:	40021000 	.word	0x40021000
 800367c:	40021400 	.word	0x40021400
 8003680:	40021800 	.word	0x40021800
 8003684:	40021c00 	.word	0x40021c00
 8003688:	40022000 	.word	0x40022000
 800368c:	40022400 	.word	0x40022400
 8003690:	40013c00 	.word	0x40013c00

08003694 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
 800369c:	460b      	mov	r3, r1
 800369e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691a      	ldr	r2, [r3, #16]
 80036a4:	887b      	ldrh	r3, [r7, #2]
 80036a6:	4013      	ands	r3, r2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d002      	beq.n	80036b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80036ac:	2301      	movs	r3, #1
 80036ae:	73fb      	strb	r3, [r7, #15]
 80036b0:	e001      	b.n	80036b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036b2:	2300      	movs	r3, #0
 80036b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3714      	adds	r7, #20
 80036bc:	46bd      	mov	sp, r7
 80036be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c2:	4770      	bx	lr

080036c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b083      	sub	sp, #12
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]
 80036cc:	460b      	mov	r3, r1
 80036ce:	807b      	strh	r3, [r7, #2]
 80036d0:	4613      	mov	r3, r2
 80036d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036d4:	787b      	ldrb	r3, [r7, #1]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d003      	beq.n	80036e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036e0:	e003      	b.n	80036ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036e2:	887b      	ldrh	r3, [r7, #2]
 80036e4:	041a      	lsls	r2, r3, #16
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	619a      	str	r2, [r3, #24]
}
 80036ea:	bf00      	nop
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
	...

080036f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003702:	4b08      	ldr	r3, [pc, #32]	; (8003724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003704:	695a      	ldr	r2, [r3, #20]
 8003706:	88fb      	ldrh	r3, [r7, #6]
 8003708:	4013      	ands	r3, r2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d006      	beq.n	800371c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800370e:	4a05      	ldr	r2, [pc, #20]	; (8003724 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003710:	88fb      	ldrh	r3, [r7, #6]
 8003712:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003714:	88fb      	ldrh	r3, [r7, #6]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fe f852 	bl	80017c0 <HAL_GPIO_EXTI_Callback>
  }
}
 800371c:	bf00      	nop
 800371e:	3708      	adds	r7, #8
 8003720:	46bd      	mov	sp, r7
 8003722:	bd80      	pop	{r7, pc}
 8003724:	40013c00 	.word	0x40013c00

08003728 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	603b      	str	r3, [r7, #0]
 8003736:	4b20      	ldr	r3, [pc, #128]	; (80037b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373a:	4a1f      	ldr	r2, [pc, #124]	; (80037b8 <HAL_PWREx_EnableOverDrive+0x90>)
 800373c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003740:	6413      	str	r3, [r2, #64]	; 0x40
 8003742:	4b1d      	ldr	r3, [pc, #116]	; (80037b8 <HAL_PWREx_EnableOverDrive+0x90>)
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800374a:	603b      	str	r3, [r7, #0]
 800374c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800374e:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_PWREx_EnableOverDrive+0x94>)
 8003750:	2201      	movs	r2, #1
 8003752:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003754:	f7ff fc8c 	bl	8003070 <HAL_GetTick>
 8003758:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800375a:	e009      	b.n	8003770 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800375c:	f7ff fc88 	bl	8003070 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800376a:	d901      	bls.n	8003770 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e01f      	b.n	80037b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x98>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003778:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800377c:	d1ee      	bne.n	800375c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003780:	2201      	movs	r2, #1
 8003782:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003784:	f7ff fc74 	bl	8003070 <HAL_GetTick>
 8003788:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800378a:	e009      	b.n	80037a0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800378c:	f7ff fc70 	bl	8003070 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800379a:	d901      	bls.n	80037a0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800379c:	2303      	movs	r3, #3
 800379e:	e007      	b.n	80037b0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80037a0:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <HAL_PWREx_EnableOverDrive+0x98>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80037ac:	d1ee      	bne.n	800378c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80037ae:	2300      	movs	r3, #0
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3708      	adds	r7, #8
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	40023800 	.word	0x40023800
 80037bc:	420e0040 	.word	0x420e0040
 80037c0:	40007000 	.word	0x40007000
 80037c4:	420e0044 	.word	0x420e0044

080037c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d101      	bne.n	80037da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	e267      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d075      	beq.n	80038d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037e6:	4b88      	ldr	r3, [pc, #544]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	f003 030c 	and.w	r3, r3, #12
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d00c      	beq.n	800380c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037f2:	4b85      	ldr	r3, [pc, #532]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80037fa:	2b08      	cmp	r3, #8
 80037fc:	d112      	bne.n	8003824 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80037fe:	4b82      	ldr	r3, [pc, #520]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380a:	d10b      	bne.n	8003824 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800380c:	4b7e      	ldr	r3, [pc, #504]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003814:	2b00      	cmp	r3, #0
 8003816:	d05b      	beq.n	80038d0 <HAL_RCC_OscConfig+0x108>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d157      	bne.n	80038d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e242      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800382c:	d106      	bne.n	800383c <HAL_RCC_OscConfig+0x74>
 800382e:	4b76      	ldr	r3, [pc, #472]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a75      	ldr	r2, [pc, #468]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003834:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003838:	6013      	str	r3, [r2, #0]
 800383a:	e01d      	b.n	8003878 <HAL_RCC_OscConfig+0xb0>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003844:	d10c      	bne.n	8003860 <HAL_RCC_OscConfig+0x98>
 8003846:	4b70      	ldr	r3, [pc, #448]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6f      	ldr	r2, [pc, #444]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 800384c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	4b6d      	ldr	r3, [pc, #436]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6c      	ldr	r2, [pc, #432]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003858:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800385c:	6013      	str	r3, [r2, #0]
 800385e:	e00b      	b.n	8003878 <HAL_RCC_OscConfig+0xb0>
 8003860:	4b69      	ldr	r3, [pc, #420]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a68      	ldr	r2, [pc, #416]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003866:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386a:	6013      	str	r3, [r2, #0]
 800386c:	4b66      	ldr	r3, [pc, #408]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a65      	ldr	r2, [pc, #404]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003872:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003876:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d013      	beq.n	80038a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003880:	f7ff fbf6 	bl	8003070 <HAL_GetTick>
 8003884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003886:	e008      	b.n	800389a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003888:	f7ff fbf2 	bl	8003070 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	2b64      	cmp	r3, #100	; 0x64
 8003894:	d901      	bls.n	800389a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003896:	2303      	movs	r3, #3
 8003898:	e207      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800389a:	4b5b      	ldr	r3, [pc, #364]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCC_OscConfig+0xc0>
 80038a6:	e014      	b.n	80038d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7ff fbe2 	bl	8003070 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80038b0:	f7ff fbde 	bl	8003070 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b64      	cmp	r3, #100	; 0x64
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e1f3      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80038c2:	4b51      	ldr	r3, [pc, #324]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0xe8>
 80038ce:	e000      	b.n	80038d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d063      	beq.n	80039a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038de:	4b4a      	ldr	r3, [pc, #296]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f003 030c 	and.w	r3, r3, #12
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00b      	beq.n	8003902 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038ea:	4b47      	ldr	r3, [pc, #284]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80038f2:	2b08      	cmp	r3, #8
 80038f4:	d11c      	bne.n	8003930 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80038f6:	4b44      	ldr	r3, [pc, #272]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d116      	bne.n	8003930 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003902:	4b41      	ldr	r3, [pc, #260]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d005      	beq.n	800391a <HAL_RCC_OscConfig+0x152>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d001      	beq.n	800391a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e1c7      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800391a:	4b3b      	ldr	r3, [pc, #236]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	4937      	ldr	r1, [pc, #220]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 800392a:	4313      	orrs	r3, r2
 800392c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800392e:	e03a      	b.n	80039a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003938:	4b34      	ldr	r3, [pc, #208]	; (8003a0c <HAL_RCC_OscConfig+0x244>)
 800393a:	2201      	movs	r2, #1
 800393c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393e:	f7ff fb97 	bl	8003070 <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003946:	f7ff fb93 	bl	8003070 <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e1a8      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003958:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003964:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	00db      	lsls	r3, r3, #3
 8003972:	4925      	ldr	r1, [pc, #148]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 8003974:	4313      	orrs	r3, r2
 8003976:	600b      	str	r3, [r1, #0]
 8003978:	e015      	b.n	80039a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800397a:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <HAL_RCC_OscConfig+0x244>)
 800397c:	2200      	movs	r2, #0
 800397e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003980:	f7ff fb76 	bl	8003070 <HAL_GetTick>
 8003984:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003986:	e008      	b.n	800399a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003988:	f7ff fb72 	bl	8003070 <HAL_GetTick>
 800398c:	4602      	mov	r2, r0
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	1ad3      	subs	r3, r2, r3
 8003992:	2b02      	cmp	r3, #2
 8003994:	d901      	bls.n	800399a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003996:	2303      	movs	r3, #3
 8003998:	e187      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800399a:	4b1b      	ldr	r3, [pc, #108]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0302 	and.w	r3, r3, #2
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1f0      	bne.n	8003988 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f003 0308 	and.w	r3, r3, #8
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d036      	beq.n	8003a20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d016      	beq.n	80039e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80039ba:	4b15      	ldr	r3, [pc, #84]	; (8003a10 <HAL_RCC_OscConfig+0x248>)
 80039bc:	2201      	movs	r2, #1
 80039be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039c0:	f7ff fb56 	bl	8003070 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039c6:	e008      	b.n	80039da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039c8:	f7ff fb52 	bl	8003070 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e167      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039da:	4b0b      	ldr	r3, [pc, #44]	; (8003a08 <HAL_RCC_OscConfig+0x240>)
 80039dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0f0      	beq.n	80039c8 <HAL_RCC_OscConfig+0x200>
 80039e6:	e01b      	b.n	8003a20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039e8:	4b09      	ldr	r3, [pc, #36]	; (8003a10 <HAL_RCC_OscConfig+0x248>)
 80039ea:	2200      	movs	r2, #0
 80039ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039ee:	f7ff fb3f 	bl	8003070 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f4:	e00e      	b.n	8003a14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80039f6:	f7ff fb3b 	bl	8003070 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d907      	bls.n	8003a14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e150      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
 8003a08:	40023800 	.word	0x40023800
 8003a0c:	42470000 	.word	0x42470000
 8003a10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003a14:	4b88      	ldr	r3, [pc, #544]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1ea      	bne.n	80039f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 8097 	beq.w	8003b5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a32:	4b81      	ldr	r3, [pc, #516]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d10f      	bne.n	8003a5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60bb      	str	r3, [r7, #8]
 8003a42:	4b7d      	ldr	r3, [pc, #500]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	4a7c      	ldr	r2, [pc, #496]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a4e:	4b7a      	ldr	r3, [pc, #488]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a5e:	4b77      	ldr	r3, [pc, #476]	; (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d118      	bne.n	8003a9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a6a:	4b74      	ldr	r3, [pc, #464]	; (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a73      	ldr	r2, [pc, #460]	; (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a76:	f7ff fafb 	bl	8003070 <HAL_GetTick>
 8003a7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a7c:	e008      	b.n	8003a90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a7e:	f7ff faf7 	bl	8003070 <HAL_GetTick>
 8003a82:	4602      	mov	r2, r0
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	1ad3      	subs	r3, r2, r3
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d901      	bls.n	8003a90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003a8c:	2303      	movs	r3, #3
 8003a8e:	e10c      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a90:	4b6a      	ldr	r3, [pc, #424]	; (8003c3c <HAL_RCC_OscConfig+0x474>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d0f0      	beq.n	8003a7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d106      	bne.n	8003ab2 <HAL_RCC_OscConfig+0x2ea>
 8003aa4:	4b64      	ldr	r3, [pc, #400]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003aa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aa8:	4a63      	ldr	r2, [pc, #396]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6713      	str	r3, [r2, #112]	; 0x70
 8003ab0:	e01c      	b.n	8003aec <HAL_RCC_OscConfig+0x324>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	2b05      	cmp	r3, #5
 8003ab8:	d10c      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x30c>
 8003aba:	4b5f      	ldr	r3, [pc, #380]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003abc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003abe:	4a5e      	ldr	r2, [pc, #376]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ac0:	f043 0304 	orr.w	r3, r3, #4
 8003ac4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ac6:	4b5c      	ldr	r3, [pc, #368]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aca:	4a5b      	ldr	r2, [pc, #364]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ad2:	e00b      	b.n	8003aec <HAL_RCC_OscConfig+0x324>
 8003ad4:	4b58      	ldr	r3, [pc, #352]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	4a57      	ldr	r2, [pc, #348]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ada:	f023 0301 	bic.w	r3, r3, #1
 8003ade:	6713      	str	r3, [r2, #112]	; 0x70
 8003ae0:	4b55      	ldr	r3, [pc, #340]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae4:	4a54      	ldr	r2, [pc, #336]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003ae6:	f023 0304 	bic.w	r3, r3, #4
 8003aea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d015      	beq.n	8003b20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003af4:	f7ff fabc 	bl	8003070 <HAL_GetTick>
 8003af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003afa:	e00a      	b.n	8003b12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003afc:	f7ff fab8 	bl	8003070 <HAL_GetTick>
 8003b00:	4602      	mov	r2, r0
 8003b02:	693b      	ldr	r3, [r7, #16]
 8003b04:	1ad3      	subs	r3, r2, r3
 8003b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d901      	bls.n	8003b12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003b0e:	2303      	movs	r3, #3
 8003b10:	e0cb      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b12:	4b49      	ldr	r3, [pc, #292]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b16:	f003 0302 	and.w	r3, r3, #2
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d0ee      	beq.n	8003afc <HAL_RCC_OscConfig+0x334>
 8003b1e:	e014      	b.n	8003b4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b20:	f7ff faa6 	bl	8003070 <HAL_GetTick>
 8003b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b26:	e00a      	b.n	8003b3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b28:	f7ff faa2 	bl	8003070 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e0b5      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b3e:	4b3e      	ldr	r3, [pc, #248]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d1ee      	bne.n	8003b28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b50:	4b39      	ldr	r3, [pc, #228]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b54:	4a38      	ldr	r2, [pc, #224]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003b5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 80a1 	beq.w	8003ca8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b66:	4b34      	ldr	r3, [pc, #208]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d05c      	beq.n	8003c2c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d141      	bne.n	8003bfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b7a:	4b31      	ldr	r3, [pc, #196]	; (8003c40 <HAL_RCC_OscConfig+0x478>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b80:	f7ff fa76 	bl	8003070 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b88:	f7ff fa72 	bl	8003070 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e087      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b9a:	4b27      	ldr	r3, [pc, #156]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d1f0      	bne.n	8003b88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69da      	ldr	r2, [r3, #28]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a1b      	ldr	r3, [r3, #32]
 8003bae:	431a      	orrs	r2, r3
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	019b      	lsls	r3, r3, #6
 8003bb6:	431a      	orrs	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	085b      	lsrs	r3, r3, #1
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	041b      	lsls	r3, r3, #16
 8003bc2:	431a      	orrs	r2, r3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc8:	061b      	lsls	r3, r3, #24
 8003bca:	491b      	ldr	r1, [pc, #108]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bd0:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <HAL_RCC_OscConfig+0x478>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd6:	f7ff fa4b 	bl	8003070 <HAL_GetTick>
 8003bda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bdc:	e008      	b.n	8003bf0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bde:	f7ff fa47 	bl	8003070 <HAL_GetTick>
 8003be2:	4602      	mov	r2, r0
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	1ad3      	subs	r3, r2, r3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d901      	bls.n	8003bf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003bec:	2303      	movs	r3, #3
 8003bee:	e05c      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003bf0:	4b11      	ldr	r3, [pc, #68]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d0f0      	beq.n	8003bde <HAL_RCC_OscConfig+0x416>
 8003bfc:	e054      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfe:	4b10      	ldr	r3, [pc, #64]	; (8003c40 <HAL_RCC_OscConfig+0x478>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c04:	f7ff fa34 	bl	8003070 <HAL_GetTick>
 8003c08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c0a:	e008      	b.n	8003c1e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003c0c:	f7ff fa30 	bl	8003070 <HAL_GetTick>
 8003c10:	4602      	mov	r2, r0
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	1ad3      	subs	r3, r2, r3
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	d901      	bls.n	8003c1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e045      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003c1e:	4b06      	ldr	r3, [pc, #24]	; (8003c38 <HAL_RCC_OscConfig+0x470>)
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1f0      	bne.n	8003c0c <HAL_RCC_OscConfig+0x444>
 8003c2a:	e03d      	b.n	8003ca8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	699b      	ldr	r3, [r3, #24]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d107      	bne.n	8003c44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e038      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40007000 	.word	0x40007000
 8003c40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003c44:	4b1b      	ldr	r3, [pc, #108]	; (8003cb4 <HAL_RCC_OscConfig+0x4ec>)
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	699b      	ldr	r3, [r3, #24]
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d028      	beq.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d121      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6a:	429a      	cmp	r2, r3
 8003c6c:	d11a      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003c74:	4013      	ands	r3, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d111      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c8a:	085b      	lsrs	r3, r3, #1
 8003c8c:	3b01      	subs	r3, #1
 8003c8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d107      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d001      	beq.n	8003ca8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	e000      	b.n	8003caa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3718      	adds	r7, #24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40023800 	.word	0x40023800

08003cb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cc8:	2301      	movs	r3, #1
 8003cca:	e0cc      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ccc:	4b68      	ldr	r3, [pc, #416]	; (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 030f 	and.w	r3, r3, #15
 8003cd4:	683a      	ldr	r2, [r7, #0]
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d90c      	bls.n	8003cf4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cda:	4b65      	ldr	r3, [pc, #404]	; (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ce2:	4b63      	ldr	r3, [pc, #396]	; (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f003 030f 	and.w	r3, r3, #15
 8003cea:	683a      	ldr	r2, [r7, #0]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d001      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0b8      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0302 	and.w	r3, r3, #2
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 0304 	and.w	r3, r3, #4
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d005      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d0c:	4b59      	ldr	r3, [pc, #356]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	4a58      	ldr	r2, [pc, #352]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0308 	and.w	r3, r3, #8
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d24:	4b53      	ldr	r3, [pc, #332]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	4a52      	ldr	r2, [pc, #328]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d30:	4b50      	ldr	r3, [pc, #320]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	494d      	ldr	r1, [pc, #308]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d044      	beq.n	8003dd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	685b      	ldr	r3, [r3, #4]
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d107      	bne.n	8003d66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d56:	4b47      	ldr	r3, [pc, #284]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d119      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e07f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	2b02      	cmp	r3, #2
 8003d6c:	d003      	beq.n	8003d76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d107      	bne.n	8003d86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d76:	4b3f      	ldr	r3, [pc, #252]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d109      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e06f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d86:	4b3b      	ldr	r3, [pc, #236]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e067      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d96:	4b37      	ldr	r3, [pc, #220]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f023 0203 	bic.w	r2, r3, #3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	4934      	ldr	r1, [pc, #208]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003da4:	4313      	orrs	r3, r2
 8003da6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003da8:	f7ff f962 	bl	8003070 <HAL_GetTick>
 8003dac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dae:	e00a      	b.n	8003dc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003db0:	f7ff f95e 	bl	8003070 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e04f      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dc6:	4b2b      	ldr	r3, [pc, #172]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 020c 	and.w	r2, r3, #12
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d1eb      	bne.n	8003db0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003dd8:	4b25      	ldr	r3, [pc, #148]	; (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f003 030f 	and.w	r3, r3, #15
 8003de0:	683a      	ldr	r2, [r7, #0]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d20c      	bcs.n	8003e00 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003de6:	4b22      	ldr	r3, [pc, #136]	; (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dee:	4b20      	ldr	r3, [pc, #128]	; (8003e70 <HAL_RCC_ClockConfig+0x1b8>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f003 030f 	and.w	r3, r3, #15
 8003df6:	683a      	ldr	r2, [r7, #0]
 8003df8:	429a      	cmp	r2, r3
 8003dfa:	d001      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e032      	b.n	8003e66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d008      	beq.n	8003e1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e0c:	4b19      	ldr	r3, [pc, #100]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	4916      	ldr	r1, [pc, #88]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0308 	and.w	r3, r3, #8
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e2a:	4b12      	ldr	r3, [pc, #72]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	691b      	ldr	r3, [r3, #16]
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	490e      	ldr	r1, [pc, #56]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e3e:	f000 f821 	bl	8003e84 <HAL_RCC_GetSysClockFreq>
 8003e42:	4602      	mov	r2, r0
 8003e44:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_RCC_ClockConfig+0x1bc>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	091b      	lsrs	r3, r3, #4
 8003e4a:	f003 030f 	and.w	r3, r3, #15
 8003e4e:	490a      	ldr	r1, [pc, #40]	; (8003e78 <HAL_RCC_ClockConfig+0x1c0>)
 8003e50:	5ccb      	ldrb	r3, [r1, r3]
 8003e52:	fa22 f303 	lsr.w	r3, r2, r3
 8003e56:	4a09      	ldr	r2, [pc, #36]	; (8003e7c <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e5a:	4b09      	ldr	r3, [pc, #36]	; (8003e80 <HAL_RCC_ClockConfig+0x1c8>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fe ff24 	bl	8002cac <HAL_InitTick>

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3710      	adds	r7, #16
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	40023c00 	.word	0x40023c00
 8003e74:	40023800 	.word	0x40023800
 8003e78:	0800ccf4 	.word	0x0800ccf4
 8003e7c:	200001e8 	.word	0x200001e8
 8003e80:	200001ec 	.word	0x200001ec

08003e84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e88:	b094      	sub	sp, #80	; 0x50
 8003e8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e90:	2300      	movs	r3, #0
 8003e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e94:	2300      	movs	r3, #0
 8003e96:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003e9c:	4b79      	ldr	r3, [pc, #484]	; (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	f003 030c 	and.w	r3, r3, #12
 8003ea4:	2b08      	cmp	r3, #8
 8003ea6:	d00d      	beq.n	8003ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ea8:	2b08      	cmp	r3, #8
 8003eaa:	f200 80e1 	bhi.w	8004070 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d002      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x34>
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d003      	beq.n	8003ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8003eb6:	e0db      	b.n	8004070 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003eb8:	4b73      	ldr	r3, [pc, #460]	; (8004088 <HAL_RCC_GetSysClockFreq+0x204>)
 8003eba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ebc:	e0db      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ebe:	4b73      	ldr	r3, [pc, #460]	; (800408c <HAL_RCC_GetSysClockFreq+0x208>)
 8003ec0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003ec2:	e0d8      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ec4:	4b6f      	ldr	r3, [pc, #444]	; (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ecc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ece:	4b6d      	ldr	r3, [pc, #436]	; (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ed0:	685b      	ldr	r3, [r3, #4]
 8003ed2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d063      	beq.n	8003fa2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eda:	4b6a      	ldr	r3, [pc, #424]	; (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	099b      	lsrs	r3, r3, #6
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ee4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ee8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eec:	633b      	str	r3, [r7, #48]	; 0x30
 8003eee:	2300      	movs	r3, #0
 8003ef0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ef2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ef6:	4622      	mov	r2, r4
 8003ef8:	462b      	mov	r3, r5
 8003efa:	f04f 0000 	mov.w	r0, #0
 8003efe:	f04f 0100 	mov.w	r1, #0
 8003f02:	0159      	lsls	r1, r3, #5
 8003f04:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003f08:	0150      	lsls	r0, r2, #5
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4621      	mov	r1, r4
 8003f10:	1a51      	subs	r1, r2, r1
 8003f12:	6139      	str	r1, [r7, #16]
 8003f14:	4629      	mov	r1, r5
 8003f16:	eb63 0301 	sbc.w	r3, r3, r1
 8003f1a:	617b      	str	r3, [r7, #20]
 8003f1c:	f04f 0200 	mov.w	r2, #0
 8003f20:	f04f 0300 	mov.w	r3, #0
 8003f24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003f28:	4659      	mov	r1, fp
 8003f2a:	018b      	lsls	r3, r1, #6
 8003f2c:	4651      	mov	r1, sl
 8003f2e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003f32:	4651      	mov	r1, sl
 8003f34:	018a      	lsls	r2, r1, #6
 8003f36:	4651      	mov	r1, sl
 8003f38:	ebb2 0801 	subs.w	r8, r2, r1
 8003f3c:	4659      	mov	r1, fp
 8003f3e:	eb63 0901 	sbc.w	r9, r3, r1
 8003f42:	f04f 0200 	mov.w	r2, #0
 8003f46:	f04f 0300 	mov.w	r3, #0
 8003f4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f56:	4690      	mov	r8, r2
 8003f58:	4699      	mov	r9, r3
 8003f5a:	4623      	mov	r3, r4
 8003f5c:	eb18 0303 	adds.w	r3, r8, r3
 8003f60:	60bb      	str	r3, [r7, #8]
 8003f62:	462b      	mov	r3, r5
 8003f64:	eb49 0303 	adc.w	r3, r9, r3
 8003f68:	60fb      	str	r3, [r7, #12]
 8003f6a:	f04f 0200 	mov.w	r2, #0
 8003f6e:	f04f 0300 	mov.w	r3, #0
 8003f72:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003f76:	4629      	mov	r1, r5
 8003f78:	024b      	lsls	r3, r1, #9
 8003f7a:	4621      	mov	r1, r4
 8003f7c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003f80:	4621      	mov	r1, r4
 8003f82:	024a      	lsls	r2, r1, #9
 8003f84:	4610      	mov	r0, r2
 8003f86:	4619      	mov	r1, r3
 8003f88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f8e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f90:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003f94:	f7fc fe88 	bl	8000ca8 <__aeabi_uldivmod>
 8003f98:	4602      	mov	r2, r0
 8003f9a:	460b      	mov	r3, r1
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fa0:	e058      	b.n	8004054 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fa2:	4b38      	ldr	r3, [pc, #224]	; (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	099b      	lsrs	r3, r3, #6
 8003fa8:	2200      	movs	r2, #0
 8003faa:	4618      	mov	r0, r3
 8003fac:	4611      	mov	r1, r2
 8003fae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003fb2:	623b      	str	r3, [r7, #32]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	627b      	str	r3, [r7, #36]	; 0x24
 8003fb8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003fbc:	4642      	mov	r2, r8
 8003fbe:	464b      	mov	r3, r9
 8003fc0:	f04f 0000 	mov.w	r0, #0
 8003fc4:	f04f 0100 	mov.w	r1, #0
 8003fc8:	0159      	lsls	r1, r3, #5
 8003fca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fce:	0150      	lsls	r0, r2, #5
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4641      	mov	r1, r8
 8003fd6:	ebb2 0a01 	subs.w	sl, r2, r1
 8003fda:	4649      	mov	r1, r9
 8003fdc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003fe0:	f04f 0200 	mov.w	r2, #0
 8003fe4:	f04f 0300 	mov.w	r3, #0
 8003fe8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003fec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ff0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003ff4:	ebb2 040a 	subs.w	r4, r2, sl
 8003ff8:	eb63 050b 	sbc.w	r5, r3, fp
 8003ffc:	f04f 0200 	mov.w	r2, #0
 8004000:	f04f 0300 	mov.w	r3, #0
 8004004:	00eb      	lsls	r3, r5, #3
 8004006:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800400a:	00e2      	lsls	r2, r4, #3
 800400c:	4614      	mov	r4, r2
 800400e:	461d      	mov	r5, r3
 8004010:	4643      	mov	r3, r8
 8004012:	18e3      	adds	r3, r4, r3
 8004014:	603b      	str	r3, [r7, #0]
 8004016:	464b      	mov	r3, r9
 8004018:	eb45 0303 	adc.w	r3, r5, r3
 800401c:	607b      	str	r3, [r7, #4]
 800401e:	f04f 0200 	mov.w	r2, #0
 8004022:	f04f 0300 	mov.w	r3, #0
 8004026:	e9d7 4500 	ldrd	r4, r5, [r7]
 800402a:	4629      	mov	r1, r5
 800402c:	028b      	lsls	r3, r1, #10
 800402e:	4621      	mov	r1, r4
 8004030:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004034:	4621      	mov	r1, r4
 8004036:	028a      	lsls	r2, r1, #10
 8004038:	4610      	mov	r0, r2
 800403a:	4619      	mov	r1, r3
 800403c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800403e:	2200      	movs	r2, #0
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	61fa      	str	r2, [r7, #28]
 8004044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004048:	f7fc fe2e 	bl	8000ca8 <__aeabi_uldivmod>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4613      	mov	r3, r2
 8004052:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004054:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <HAL_RCC_GetSysClockFreq+0x200>)
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	0c1b      	lsrs	r3, r3, #16
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	3301      	adds	r3, #1
 8004060:	005b      	lsls	r3, r3, #1
 8004062:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004064:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004066:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004068:	fbb2 f3f3 	udiv	r3, r2, r3
 800406c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800406e:	e002      	b.n	8004076 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004070:	4b05      	ldr	r3, [pc, #20]	; (8004088 <HAL_RCC_GetSysClockFreq+0x204>)
 8004072:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004074:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004078:	4618      	mov	r0, r3
 800407a:	3750      	adds	r7, #80	; 0x50
 800407c:	46bd      	mov	sp, r7
 800407e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004082:	bf00      	nop
 8004084:	40023800 	.word	0x40023800
 8004088:	00f42400 	.word	0x00f42400
 800408c:	007a1200 	.word	0x007a1200

08004090 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004090:	b480      	push	{r7}
 8004092:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004094:	4b03      	ldr	r3, [pc, #12]	; (80040a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004096:	681b      	ldr	r3, [r3, #0]
}
 8004098:	4618      	mov	r0, r3
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	200001e8 	.word	0x200001e8

080040a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80040ac:	f7ff fff0 	bl	8004090 <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b05      	ldr	r3, [pc, #20]	; (80040c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	0a9b      	lsrs	r3, r3, #10
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4903      	ldr	r1, [pc, #12]	; (80040cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80040c4:	4618      	mov	r0, r3
 80040c6:	bd80      	pop	{r7, pc}
 80040c8:	40023800 	.word	0x40023800
 80040cc:	0800cd04 	.word	0x0800cd04

080040d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
 80040d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	220f      	movs	r2, #15
 80040de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80040e0:	4b12      	ldr	r3, [pc, #72]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	f003 0203 	and.w	r2, r3, #3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80040ec:	4b0f      	ldr	r3, [pc, #60]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004104:	4b09      	ldr	r3, [pc, #36]	; (800412c <HAL_RCC_GetClockConfig+0x5c>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	08db      	lsrs	r3, r3, #3
 800410a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004112:	4b07      	ldr	r3, [pc, #28]	; (8004130 <HAL_RCC_GetClockConfig+0x60>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 020f 	and.w	r2, r3, #15
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	601a      	str	r2, [r3, #0]
}
 800411e:	bf00      	nop
 8004120:	370c      	adds	r7, #12
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40023800 	.word	0x40023800
 8004130:	40023c00 	.word	0x40023c00

08004134 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e07b      	b.n	800423e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	2b00      	cmp	r3, #0
 800414c:	d108      	bne.n	8004160 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004156:	d009      	beq.n	800416c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	61da      	str	r2, [r3, #28]
 800415e:	e005      	b.n	800416c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2200      	movs	r2, #0
 8004164:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004178:	b2db      	uxtb	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d106      	bne.n	800418c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f7fe fcf4 	bl	8002b74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80041a2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
 80041b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80041b4:	431a      	orrs	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	691b      	ldr	r3, [r3, #16]
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	431a      	orrs	r2, r3
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	695b      	ldr	r3, [r3, #20]
 80041ce:	f003 0301 	and.w	r3, r3, #1
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	69db      	ldr	r3, [r3, #28]
 80041e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6a1b      	ldr	r3, [r3, #32]
 80041ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f0:	ea42 0103 	orr.w	r1, r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	0c1b      	lsrs	r3, r3, #16
 800420a:	f003 0104 	and.w	r1, r3, #4
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004212:	f003 0210 	and.w	r2, r3, #16
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69da      	ldr	r2, [r3, #28]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800422c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}

08004246 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004246:	b580      	push	{r7, lr}
 8004248:	b088      	sub	sp, #32
 800424a:	af00      	add	r7, sp, #0
 800424c:	60f8      	str	r0, [r7, #12]
 800424e:	60b9      	str	r1, [r7, #8]
 8004250:	603b      	str	r3, [r7, #0]
 8004252:	4613      	mov	r3, r2
 8004254:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_SPI_Transmit+0x22>
 8004264:	2302      	movs	r3, #2
 8004266:	e126      	b.n	80044b6 <HAL_SPI_Transmit+0x270>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004270:	f7fe fefe 	bl	8003070 <HAL_GetTick>
 8004274:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004276:	88fb      	ldrh	r3, [r7, #6]
 8004278:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b01      	cmp	r3, #1
 8004284:	d002      	beq.n	800428c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004286:	2302      	movs	r3, #2
 8004288:	77fb      	strb	r3, [r7, #31]
    goto error;
 800428a:	e10b      	b.n	80044a4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800428c:	68bb      	ldr	r3, [r7, #8]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d002      	beq.n	8004298 <HAL_SPI_Transmit+0x52>
 8004292:	88fb      	ldrh	r3, [r7, #6]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004298:	2301      	movs	r3, #1
 800429a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800429c:	e102      	b.n	80044a4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2203      	movs	r2, #3
 80042a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	88fa      	ldrh	r2, [r7, #6]
 80042b6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	88fa      	ldrh	r2, [r7, #6]
 80042bc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2200      	movs	r2, #0
 80042c8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042e4:	d10f      	bne.n	8004306 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681a      	ldr	r2, [r3, #0]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80042f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004304:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004310:	2b40      	cmp	r3, #64	; 0x40
 8004312:	d007      	beq.n	8004324 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	681a      	ldr	r2, [r3, #0]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004322:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432c:	d14b      	bne.n	80043c6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <HAL_SPI_Transmit+0xf6>
 8004336:	8afb      	ldrh	r3, [r7, #22]
 8004338:	2b01      	cmp	r3, #1
 800433a:	d13e      	bne.n	80043ba <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004340:	881a      	ldrh	r2, [r3, #0]
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800434c:	1c9a      	adds	r2, r3, #2
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004356:	b29b      	uxth	r3, r3
 8004358:	3b01      	subs	r3, #1
 800435a:	b29a      	uxth	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004360:	e02b      	b.n	80043ba <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b02      	cmp	r3, #2
 800436e:	d112      	bne.n	8004396 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	881a      	ldrh	r2, [r3, #0]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	1c9a      	adds	r2, r3, #2
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	86da      	strh	r2, [r3, #54]	; 0x36
 8004394:	e011      	b.n	80043ba <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004396:	f7fe fe6b 	bl	8003070 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	683a      	ldr	r2, [r7, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d803      	bhi.n	80043ae <HAL_SPI_Transmit+0x168>
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d102      	bne.n	80043b4 <HAL_SPI_Transmit+0x16e>
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80043b4:	2303      	movs	r3, #3
 80043b6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80043b8:	e074      	b.n	80044a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043be:	b29b      	uxth	r3, r3
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1ce      	bne.n	8004362 <HAL_SPI_Transmit+0x11c>
 80043c4:	e04c      	b.n	8004460 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <HAL_SPI_Transmit+0x18e>
 80043ce:	8afb      	ldrh	r3, [r7, #22]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d140      	bne.n	8004456 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	7812      	ldrb	r2, [r2, #0]
 80043e0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	3b01      	subs	r3, #1
 80043f4:	b29a      	uxth	r2, r3
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043fa:	e02c      	b.n	8004456 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b02      	cmp	r3, #2
 8004408:	d113      	bne.n	8004432 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	330c      	adds	r3, #12
 8004414:	7812      	ldrb	r2, [r2, #0]
 8004416:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800441c:	1c5a      	adds	r2, r3, #1
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004426:	b29b      	uxth	r3, r3
 8004428:	3b01      	subs	r3, #1
 800442a:	b29a      	uxth	r2, r3
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004430:	e011      	b.n	8004456 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004432:	f7fe fe1d 	bl	8003070 <HAL_GetTick>
 8004436:	4602      	mov	r2, r0
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	1ad3      	subs	r3, r2, r3
 800443c:	683a      	ldr	r2, [r7, #0]
 800443e:	429a      	cmp	r2, r3
 8004440:	d803      	bhi.n	800444a <HAL_SPI_Transmit+0x204>
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004448:	d102      	bne.n	8004450 <HAL_SPI_Transmit+0x20a>
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004450:	2303      	movs	r3, #3
 8004452:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004454:	e026      	b.n	80044a4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d1cd      	bne.n	80043fc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004460:	69ba      	ldr	r2, [r7, #24]
 8004462:	6839      	ldr	r1, [r7, #0]
 8004464:	68f8      	ldr	r0, [r7, #12]
 8004466:	f000 f9d1 	bl	800480c <SPI_EndRxTxTransaction>
 800446a:	4603      	mov	r3, r0
 800446c:	2b00      	cmp	r3, #0
 800446e:	d002      	beq.n	8004476 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2220      	movs	r2, #32
 8004474:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10a      	bne.n	8004494 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800447e:	2300      	movs	r3, #0
 8004480:	613b      	str	r3, [r7, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	613b      	str	r3, [r7, #16]
 8004492:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004498:	2b00      	cmp	r3, #0
 800449a:	d002      	beq.n	80044a2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	77fb      	strb	r3, [r7, #31]
 80044a0:	e000      	b.n	80044a4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80044a2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80044b4:	7ffb      	ldrb	r3, [r7, #31]
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3720      	adds	r7, #32
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}
	...

080044c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	099b      	lsrs	r3, r3, #6
 80044dc:	f003 0301 	and.w	r3, r3, #1
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10f      	bne.n	8004504 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044e4:	69bb      	ldr	r3, [r7, #24]
 80044e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	099b      	lsrs	r3, r3, #6
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d004      	beq.n	8004504 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fe:	6878      	ldr	r0, [r7, #4]
 8004500:	4798      	blx	r3
    return;
 8004502:	e0d7      	b.n	80046b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004504:	69bb      	ldr	r3, [r7, #24]
 8004506:	085b      	lsrs	r3, r3, #1
 8004508:	f003 0301 	and.w	r3, r3, #1
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00a      	beq.n	8004526 <HAL_SPI_IRQHandler+0x66>
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	09db      	lsrs	r3, r3, #7
 8004514:	f003 0301 	and.w	r3, r3, #1
 8004518:	2b00      	cmp	r3, #0
 800451a:	d004      	beq.n	8004526 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	4798      	blx	r3
    return;
 8004524:	e0c6      	b.n	80046b4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004526:	69bb      	ldr	r3, [r7, #24]
 8004528:	095b      	lsrs	r3, r3, #5
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10c      	bne.n	800454c <HAL_SPI_IRQHandler+0x8c>
 8004532:	69bb      	ldr	r3, [r7, #24]
 8004534:	099b      	lsrs	r3, r3, #6
 8004536:	f003 0301 	and.w	r3, r3, #1
 800453a:	2b00      	cmp	r3, #0
 800453c:	d106      	bne.n	800454c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	0a1b      	lsrs	r3, r3, #8
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	2b00      	cmp	r3, #0
 8004548:	f000 80b4 	beq.w	80046b4 <HAL_SPI_IRQHandler+0x1f4>
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	095b      	lsrs	r3, r3, #5
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b00      	cmp	r3, #0
 8004556:	f000 80ad 	beq.w	80046b4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	099b      	lsrs	r3, r3, #6
 800455e:	f003 0301 	and.w	r3, r3, #1
 8004562:	2b00      	cmp	r3, #0
 8004564:	d023      	beq.n	80045ae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b03      	cmp	r3, #3
 8004570:	d011      	beq.n	8004596 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	f043 0204 	orr.w	r2, r3, #4
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	617b      	str	r3, [r7, #20]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	617b      	str	r3, [r7, #20]
 8004592:	697b      	ldr	r3, [r7, #20]
 8004594:	e00b      	b.n	80045ae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004596:	2300      	movs	r3, #0
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	613b      	str	r3, [r7, #16]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	689b      	ldr	r3, [r3, #8]
 80045a8:	613b      	str	r3, [r7, #16]
 80045aa:	693b      	ldr	r3, [r7, #16]
        return;
 80045ac:	e082      	b.n	80046b4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	095b      	lsrs	r3, r3, #5
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d014      	beq.n	80045e4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045be:	f043 0201 	orr.w	r2, r3, #1
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80045c6:	2300      	movs	r3, #0
 80045c8:	60fb      	str	r3, [r7, #12]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	60fb      	str	r3, [r7, #12]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681a      	ldr	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e0:	601a      	str	r2, [r3, #0]
 80045e2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	0a1b      	lsrs	r3, r3, #8
 80045e8:	f003 0301 	and.w	r3, r3, #1
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d00c      	beq.n	800460a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	f043 0208 	orr.w	r2, r3, #8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80045fc:	2300      	movs	r3, #0
 80045fe:	60bb      	str	r3, [r7, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	689b      	ldr	r3, [r3, #8]
 8004606:	60bb      	str	r3, [r7, #8]
 8004608:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800460e:	2b00      	cmp	r3, #0
 8004610:	d04f      	beq.n	80046b2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004620:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	f003 0302 	and.w	r3, r3, #2
 8004630:	2b00      	cmp	r3, #0
 8004632:	d104      	bne.n	800463e <HAL_SPI_IRQHandler+0x17e>
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f003 0301 	and.w	r3, r3, #1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d034      	beq.n	80046a8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 0203 	bic.w	r2, r2, #3
 800464c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004652:	2b00      	cmp	r3, #0
 8004654:	d011      	beq.n	800467a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800465a:	4a18      	ldr	r2, [pc, #96]	; (80046bc <HAL_SPI_IRQHandler+0x1fc>)
 800465c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004662:	4618      	mov	r0, r3
 8004664:	f7fe fe48 	bl	80032f8 <HAL_DMA_Abort_IT>
 8004668:	4603      	mov	r3, r0
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004672:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800467e:	2b00      	cmp	r3, #0
 8004680:	d016      	beq.n	80046b0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004686:	4a0d      	ldr	r2, [pc, #52]	; (80046bc <HAL_SPI_IRQHandler+0x1fc>)
 8004688:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800468e:	4618      	mov	r0, r3
 8004690:	f7fe fe32 	bl	80032f8 <HAL_DMA_Abort_IT>
 8004694:	4603      	mov	r3, r0
 8004696:	2b00      	cmp	r3, #0
 8004698:	d00a      	beq.n	80046b0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800469e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80046a6:	e003      	b.n	80046b0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f809 	bl	80046c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80046ae:	e000      	b.n	80046b2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80046b0:	bf00      	nop
    return;
 80046b2:	bf00      	nop
  }
}
 80046b4:	3720      	adds	r7, #32
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	080046d5 	.word	0x080046d5

080046c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80046c8:	bf00      	nop
 80046ca:	370c      	adds	r7, #12
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr

080046d4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80046ee:	68f8      	ldr	r0, [r7, #12]
 80046f0:	f7ff ffe6 	bl	80046c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80046f4:	bf00      	nop
 80046f6:	3710      	adds	r7, #16
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b088      	sub	sp, #32
 8004700:	af00      	add	r7, sp, #0
 8004702:	60f8      	str	r0, [r7, #12]
 8004704:	60b9      	str	r1, [r7, #8]
 8004706:	603b      	str	r3, [r7, #0]
 8004708:	4613      	mov	r3, r2
 800470a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800470c:	f7fe fcb0 	bl	8003070 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	1a9b      	subs	r3, r3, r2
 8004716:	683a      	ldr	r2, [r7, #0]
 8004718:	4413      	add	r3, r2
 800471a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800471c:	f7fe fca8 	bl	8003070 <HAL_GetTick>
 8004720:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004722:	4b39      	ldr	r3, [pc, #228]	; (8004808 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	015b      	lsls	r3, r3, #5
 8004728:	0d1b      	lsrs	r3, r3, #20
 800472a:	69fa      	ldr	r2, [r7, #28]
 800472c:	fb02 f303 	mul.w	r3, r2, r3
 8004730:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004732:	e054      	b.n	80047de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473a:	d050      	beq.n	80047de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800473c:	f7fe fc98 	bl	8003070 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	69fa      	ldr	r2, [r7, #28]
 8004748:	429a      	cmp	r2, r3
 800474a:	d902      	bls.n	8004752 <SPI_WaitFlagStateUntilTimeout+0x56>
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d13d      	bne.n	80047ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	685a      	ldr	r2, [r3, #4]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004760:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800476a:	d111      	bne.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x94>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004774:	d004      	beq.n	8004780 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800477e:	d107      	bne.n	8004790 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800478e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004798:	d10f      	bne.n	80047ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047a8:	601a      	str	r2, [r3, #0]
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2201      	movs	r2, #1
 80047be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80047ca:	2303      	movs	r3, #3
 80047cc:	e017      	b.n	80047fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d101      	bne.n	80047d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	3b01      	subs	r3, #1
 80047dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	689a      	ldr	r2, [r3, #8]
 80047e4:	68bb      	ldr	r3, [r7, #8]
 80047e6:	4013      	ands	r3, r2
 80047e8:	68ba      	ldr	r2, [r7, #8]
 80047ea:	429a      	cmp	r2, r3
 80047ec:	bf0c      	ite	eq
 80047ee:	2301      	moveq	r3, #1
 80047f0:	2300      	movne	r3, #0
 80047f2:	b2db      	uxtb	r3, r3
 80047f4:	461a      	mov	r2, r3
 80047f6:	79fb      	ldrb	r3, [r7, #7]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d19b      	bne.n	8004734 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80047fc:	2300      	movs	r3, #0
}
 80047fe:	4618      	mov	r0, r3
 8004800:	3720      	adds	r7, #32
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	200001e8 	.word	0x200001e8

0800480c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b088      	sub	sp, #32
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004818:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <SPI_EndRxTxTransaction+0x7c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a1b      	ldr	r2, [pc, #108]	; (800488c <SPI_EndRxTxTransaction+0x80>)
 800481e:	fba2 2303 	umull	r2, r3, r2, r3
 8004822:	0d5b      	lsrs	r3, r3, #21
 8004824:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004828:	fb02 f303 	mul.w	r3, r2, r3
 800482c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004836:	d112      	bne.n	800485e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	2200      	movs	r2, #0
 8004840:	2180      	movs	r1, #128	; 0x80
 8004842:	68f8      	ldr	r0, [r7, #12]
 8004844:	f7ff ff5a 	bl	80046fc <SPI_WaitFlagStateUntilTimeout>
 8004848:	4603      	mov	r3, r0
 800484a:	2b00      	cmp	r3, #0
 800484c:	d016      	beq.n	800487c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800485a:	2303      	movs	r3, #3
 800485c:	e00f      	b.n	800487e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	3b01      	subs	r3, #1
 8004868:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004874:	2b80      	cmp	r3, #128	; 0x80
 8004876:	d0f2      	beq.n	800485e <SPI_EndRxTxTransaction+0x52>
 8004878:	e000      	b.n	800487c <SPI_EndRxTxTransaction+0x70>
        break;
 800487a:	bf00      	nop
  }

  return HAL_OK;
 800487c:	2300      	movs	r3, #0
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	200001e8 	.word	0x200001e8
 800488c:	165e9f81 	.word	0x165e9f81

08004890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e041      	b.n	8004926 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fe f9ac 	bl	8002c14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2202      	movs	r2, #2
 80048c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	3304      	adds	r3, #4
 80048cc:	4619      	mov	r1, r3
 80048ce:	4610      	mov	r0, r2
 80048d0:	f000 fac4 	bl	8004e5c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2201      	movs	r2, #1
 80048d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2201      	movs	r2, #1
 80048e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004924:	2300      	movs	r3, #0
}
 8004926:	4618      	mov	r0, r3
 8004928:	3708      	adds	r7, #8
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
	...

08004930 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	d001      	beq.n	8004948 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e04e      	b.n	80049e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a23      	ldr	r2, [pc, #140]	; (80049f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d022      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004972:	d01d      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a1f      	ldr	r2, [pc, #124]	; (80049f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d018      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a1e      	ldr	r2, [pc, #120]	; (80049fc <HAL_TIM_Base_Start_IT+0xcc>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d013      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a1c      	ldr	r2, [pc, #112]	; (8004a00 <HAL_TIM_Base_Start_IT+0xd0>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00e      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a1b      	ldr	r2, [pc, #108]	; (8004a04 <HAL_TIM_Base_Start_IT+0xd4>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d009      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a19      	ldr	r2, [pc, #100]	; (8004a08 <HAL_TIM_Base_Start_IT+0xd8>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d004      	beq.n	80049b0 <HAL_TIM_Base_Start_IT+0x80>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <HAL_TIM_Base_Start_IT+0xdc>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d111      	bne.n	80049d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 0307 	and.w	r3, r3, #7
 80049ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2b06      	cmp	r3, #6
 80049c0:	d010      	beq.n	80049e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f042 0201 	orr.w	r2, r2, #1
 80049d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049d2:	e007      	b.n	80049e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80049e4:	2300      	movs	r3, #0
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3714      	adds	r7, #20
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	40010000 	.word	0x40010000
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40000800 	.word	0x40000800
 8004a00:	40000c00 	.word	0x40000c00
 8004a04:	40010400 	.word	0x40010400
 8004a08:	40014000 	.word	0x40014000
 8004a0c:	40001800 	.word	0x40001800

08004a10 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68da      	ldr	r2, [r3, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f022 0201 	bic.w	r2, r2, #1
 8004a26:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a1a      	ldr	r2, [r3, #32]
 8004a2e:	f241 1311 	movw	r3, #4369	; 0x1111
 8004a32:	4013      	ands	r3, r2
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d10f      	bne.n	8004a58 <HAL_TIM_Base_Stop_IT+0x48>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	6a1a      	ldr	r2, [r3, #32]
 8004a3e:	f240 4344 	movw	r3, #1092	; 0x444
 8004a42:	4013      	ands	r3, r2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d107      	bne.n	8004a58 <HAL_TIM_Base_Stop_IT+0x48>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a6e:	b580      	push	{r7, lr}
 8004a70:	b082      	sub	sp, #8
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	691b      	ldr	r3, [r3, #16]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d122      	bne.n	8004aca <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68db      	ldr	r3, [r3, #12]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d11b      	bne.n	8004aca <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f06f 0202 	mvn.w	r2, #2
 8004a9a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	f003 0303 	and.w	r3, r3, #3
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f000 f9b5 	bl	8004e20 <HAL_TIM_IC_CaptureCallback>
 8004ab6:	e005      	b.n	8004ac4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ab8:	6878      	ldr	r0, [r7, #4]
 8004aba:	f000 f9a7 	bl	8004e0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f000 f9b8 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b04      	cmp	r3, #4
 8004ad6:	d122      	bne.n	8004b1e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d11b      	bne.n	8004b1e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f06f 0204 	mvn.w	r2, #4
 8004aee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d003      	beq.n	8004b0c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 f98b 	bl	8004e20 <HAL_TIM_IC_CaptureCallback>
 8004b0a:	e005      	b.n	8004b18 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f97d 	bl	8004e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f98e 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	691b      	ldr	r3, [r3, #16]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d122      	bne.n	8004b72 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	68db      	ldr	r3, [r3, #12]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d11b      	bne.n	8004b72 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f06f 0208 	mvn.w	r2, #8
 8004b42:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2204      	movs	r2, #4
 8004b48:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d003      	beq.n	8004b60 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f961 	bl	8004e20 <HAL_TIM_IC_CaptureCallback>
 8004b5e:	e005      	b.n	8004b6c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f000 f953 	bl	8004e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f000 f964 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f003 0310 	and.w	r3, r3, #16
 8004b7c:	2b10      	cmp	r3, #16
 8004b7e:	d122      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d11b      	bne.n	8004bc6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f06f 0210 	mvn.w	r2, #16
 8004b96:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2208      	movs	r2, #8
 8004b9c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d003      	beq.n	8004bb4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f937 	bl	8004e20 <HAL_TIM_IC_CaptureCallback>
 8004bb2:	e005      	b.n	8004bc0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f929 	bl	8004e0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f000 f93a 	bl	8004e34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	f003 0301 	and.w	r3, r3, #1
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d10e      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d107      	bne.n	8004bf2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f06f 0201 	mvn.w	r2, #1
 8004bea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7fd f857 	bl	8001ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	691b      	ldr	r3, [r3, #16]
 8004bf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfc:	2b80      	cmp	r3, #128	; 0x80
 8004bfe:	d10e      	bne.n	8004c1e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d107      	bne.n	8004c1e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 fadf 	bl	80051dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c28:	2b40      	cmp	r3, #64	; 0x40
 8004c2a:	d10e      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d107      	bne.n	8004c4a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 f8ff 	bl	8004e48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0320 	and.w	r3, r3, #32
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	d10e      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d107      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f06f 0220 	mvn.w	r2, #32
 8004c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f000 faa9 	bl	80051c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}

08004c7e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c7e:	b580      	push	{r7, lr}
 8004c80:	b084      	sub	sp, #16
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
 8004c86:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d101      	bne.n	8004c9a <HAL_TIM_ConfigClockSource+0x1c>
 8004c96:	2302      	movs	r3, #2
 8004c98:	e0b4      	b.n	8004e04 <HAL_TIM_ConfigClockSource+0x186>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004cb8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004cc0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd2:	d03e      	beq.n	8004d52 <HAL_TIM_ConfigClockSource+0xd4>
 8004cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd8:	f200 8087 	bhi.w	8004dea <HAL_TIM_ConfigClockSource+0x16c>
 8004cdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce0:	f000 8086 	beq.w	8004df0 <HAL_TIM_ConfigClockSource+0x172>
 8004ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ce8:	d87f      	bhi.n	8004dea <HAL_TIM_ConfigClockSource+0x16c>
 8004cea:	2b70      	cmp	r3, #112	; 0x70
 8004cec:	d01a      	beq.n	8004d24 <HAL_TIM_ConfigClockSource+0xa6>
 8004cee:	2b70      	cmp	r3, #112	; 0x70
 8004cf0:	d87b      	bhi.n	8004dea <HAL_TIM_ConfigClockSource+0x16c>
 8004cf2:	2b60      	cmp	r3, #96	; 0x60
 8004cf4:	d050      	beq.n	8004d98 <HAL_TIM_ConfigClockSource+0x11a>
 8004cf6:	2b60      	cmp	r3, #96	; 0x60
 8004cf8:	d877      	bhi.n	8004dea <HAL_TIM_ConfigClockSource+0x16c>
 8004cfa:	2b50      	cmp	r3, #80	; 0x50
 8004cfc:	d03c      	beq.n	8004d78 <HAL_TIM_ConfigClockSource+0xfa>
 8004cfe:	2b50      	cmp	r3, #80	; 0x50
 8004d00:	d873      	bhi.n	8004dea <HAL_TIM_ConfigClockSource+0x16c>
 8004d02:	2b40      	cmp	r3, #64	; 0x40
 8004d04:	d058      	beq.n	8004db8 <HAL_TIM_ConfigClockSource+0x13a>
 8004d06:	2b40      	cmp	r3, #64	; 0x40
 8004d08:	d86f      	bhi.n	8004dea <HAL_TIM_ConfigClockSource+0x16c>
 8004d0a:	2b30      	cmp	r3, #48	; 0x30
 8004d0c:	d064      	beq.n	8004dd8 <HAL_TIM_ConfigClockSource+0x15a>
 8004d0e:	2b30      	cmp	r3, #48	; 0x30
 8004d10:	d86b      	bhi.n	8004dea <HAL_TIM_ConfigClockSource+0x16c>
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d060      	beq.n	8004dd8 <HAL_TIM_ConfigClockSource+0x15a>
 8004d16:	2b20      	cmp	r3, #32
 8004d18:	d867      	bhi.n	8004dea <HAL_TIM_ConfigClockSource+0x16c>
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d05c      	beq.n	8004dd8 <HAL_TIM_ConfigClockSource+0x15a>
 8004d1e:	2b10      	cmp	r3, #16
 8004d20:	d05a      	beq.n	8004dd8 <HAL_TIM_ConfigClockSource+0x15a>
 8004d22:	e062      	b.n	8004dea <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6818      	ldr	r0, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	6899      	ldr	r1, [r3, #8]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685a      	ldr	r2, [r3, #4]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	f000 f9ac 	bl	8005090 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d46:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	609a      	str	r2, [r3, #8]
      break;
 8004d50:	e04f      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	6899      	ldr	r1, [r3, #8]
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	f000 f995 	bl	8005090 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d74:	609a      	str	r2, [r3, #8]
      break;
 8004d76:	e03c      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6818      	ldr	r0, [r3, #0]
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	6859      	ldr	r1, [r3, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	68db      	ldr	r3, [r3, #12]
 8004d84:	461a      	mov	r2, r3
 8004d86:	f000 f909 	bl	8004f9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2150      	movs	r1, #80	; 0x50
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 f962 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004d96:	e02c      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6818      	ldr	r0, [r3, #0]
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	6859      	ldr	r1, [r3, #4]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	461a      	mov	r2, r3
 8004da6:	f000 f928 	bl	8004ffa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2160      	movs	r1, #96	; 0x60
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 f952 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004db6:	e01c      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6818      	ldr	r0, [r3, #0]
 8004dbc:	683b      	ldr	r3, [r7, #0]
 8004dbe:	6859      	ldr	r1, [r3, #4]
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	68db      	ldr	r3, [r3, #12]
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	f000 f8e9 	bl	8004f9c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2140      	movs	r1, #64	; 0x40
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f000 f942 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004dd6:	e00c      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f000 f939 	bl	800505a <TIM_ITRx_SetConfig>
      break;
 8004de8:	e003      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
      break;
 8004dee:	e000      	b.n	8004df2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004df0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3710      	adds	r7, #16
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}

08004e0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e14:	bf00      	nop
 8004e16:	370c      	adds	r7, #12
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1e:	4770      	bx	lr

08004e20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e34:	b480      	push	{r7}
 8004e36:	b083      	sub	sp, #12
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e3c:	bf00      	nop
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr

08004e5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b085      	sub	sp, #20
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	4a40      	ldr	r2, [pc, #256]	; (8004f70 <TIM_Base_SetConfig+0x114>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d013      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e7a:	d00f      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	4a3d      	ldr	r2, [pc, #244]	; (8004f74 <TIM_Base_SetConfig+0x118>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d00b      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	4a3c      	ldr	r2, [pc, #240]	; (8004f78 <TIM_Base_SetConfig+0x11c>)
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d007      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	4a3b      	ldr	r2, [pc, #236]	; (8004f7c <TIM_Base_SetConfig+0x120>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d003      	beq.n	8004e9c <TIM_Base_SetConfig+0x40>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	4a3a      	ldr	r2, [pc, #232]	; (8004f80 <TIM_Base_SetConfig+0x124>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d108      	bne.n	8004eae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ea2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4a2f      	ldr	r2, [pc, #188]	; (8004f70 <TIM_Base_SetConfig+0x114>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d02b      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ebc:	d027      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	4a2c      	ldr	r2, [pc, #176]	; (8004f74 <TIM_Base_SetConfig+0x118>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d023      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	4a2b      	ldr	r2, [pc, #172]	; (8004f78 <TIM_Base_SetConfig+0x11c>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d01f      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	4a2a      	ldr	r2, [pc, #168]	; (8004f7c <TIM_Base_SetConfig+0x120>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d01b      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a29      	ldr	r2, [pc, #164]	; (8004f80 <TIM_Base_SetConfig+0x124>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d017      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a28      	ldr	r2, [pc, #160]	; (8004f84 <TIM_Base_SetConfig+0x128>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d013      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a27      	ldr	r2, [pc, #156]	; (8004f88 <TIM_Base_SetConfig+0x12c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d00f      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a26      	ldr	r2, [pc, #152]	; (8004f8c <TIM_Base_SetConfig+0x130>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d00b      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a25      	ldr	r2, [pc, #148]	; (8004f90 <TIM_Base_SetConfig+0x134>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d007      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a24      	ldr	r2, [pc, #144]	; (8004f94 <TIM_Base_SetConfig+0x138>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d003      	beq.n	8004f0e <TIM_Base_SetConfig+0xb2>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a23      	ldr	r2, [pc, #140]	; (8004f98 <TIM_Base_SetConfig+0x13c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d108      	bne.n	8004f20 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f14:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	68db      	ldr	r3, [r3, #12]
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	695b      	ldr	r3, [r3, #20]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	681a      	ldr	r2, [r3, #0]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a0a      	ldr	r2, [pc, #40]	; (8004f70 <TIM_Base_SetConfig+0x114>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_Base_SetConfig+0xf8>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a0c      	ldr	r2, [pc, #48]	; (8004f80 <TIM_Base_SetConfig+0x124>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d103      	bne.n	8004f5c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	691a      	ldr	r2, [r3, #16]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	615a      	str	r2, [r3, #20]
}
 8004f62:	bf00      	nop
 8004f64:	3714      	adds	r7, #20
 8004f66:	46bd      	mov	sp, r7
 8004f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40010000 	.word	0x40010000
 8004f74:	40000400 	.word	0x40000400
 8004f78:	40000800 	.word	0x40000800
 8004f7c:	40000c00 	.word	0x40000c00
 8004f80:	40010400 	.word	0x40010400
 8004f84:	40014000 	.word	0x40014000
 8004f88:	40014400 	.word	0x40014400
 8004f8c:	40014800 	.word	0x40014800
 8004f90:	40001800 	.word	0x40001800
 8004f94:	40001c00 	.word	0x40001c00
 8004f98:	40002000 	.word	0x40002000

08004f9c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6a1b      	ldr	r3, [r3, #32]
 8004fb2:	f023 0201 	bic.w	r2, r3, #1
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004fc0:	693b      	ldr	r3, [r7, #16]
 8004fc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004fc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f023 030a 	bic.w	r3, r3, #10
 8004fd8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004fda:	697a      	ldr	r2, [r7, #20]
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	693a      	ldr	r2, [r7, #16]
 8004fe6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	697a      	ldr	r2, [r7, #20]
 8004fec:	621a      	str	r2, [r3, #32]
}
 8004fee:	bf00      	nop
 8004ff0:	371c      	adds	r7, #28
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr

08004ffa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004ffa:	b480      	push	{r7}
 8004ffc:	b087      	sub	sp, #28
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	60f8      	str	r0, [r7, #12]
 8005002:	60b9      	str	r1, [r7, #8]
 8005004:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	6a1b      	ldr	r3, [r3, #32]
 800500a:	f023 0210 	bic.w	r2, r3, #16
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	699b      	ldr	r3, [r3, #24]
 8005016:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a1b      	ldr	r3, [r3, #32]
 800501c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005024:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	031b      	lsls	r3, r3, #12
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005036:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	4313      	orrs	r3, r2
 8005040:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	621a      	str	r2, [r3, #32]
}
 800504e:	bf00      	nop
 8005050:	371c      	adds	r7, #28
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005070:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	4313      	orrs	r3, r2
 8005078:	f043 0307 	orr.w	r3, r3, #7
 800507c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	3714      	adds	r7, #20
 8005088:	46bd      	mov	sp, r7
 800508a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508e:	4770      	bx	lr

08005090 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005090:	b480      	push	{r7}
 8005092:	b087      	sub	sp, #28
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	607a      	str	r2, [r7, #4]
 800509c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050a4:	697b      	ldr	r3, [r7, #20]
 80050a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	021a      	lsls	r2, r3, #8
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	431a      	orrs	r2, r3
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	609a      	str	r2, [r3, #8]
}
 80050c4:	bf00      	nop
 80050c6:	371c      	adds	r7, #28
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr

080050d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b085      	sub	sp, #20
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d101      	bne.n	80050e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050e4:	2302      	movs	r3, #2
 80050e6:	e05a      	b.n	800519e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800510e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	4313      	orrs	r3, r2
 8005118:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a21      	ldr	r2, [pc, #132]	; (80051ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d022      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005134:	d01d      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1d      	ldr	r2, [pc, #116]	; (80051b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d018      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1b      	ldr	r2, [pc, #108]	; (80051b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d013      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1a      	ldr	r2, [pc, #104]	; (80051b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00e      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a18      	ldr	r2, [pc, #96]	; (80051bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d009      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d004      	beq.n	8005172 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a15      	ldr	r2, [pc, #84]	; (80051c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d10c      	bne.n	800518c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005178:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	4313      	orrs	r3, r2
 8005182:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	68ba      	ldr	r2, [r7, #8]
 800518a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800519c:	2300      	movs	r3, #0
}
 800519e:	4618      	mov	r0, r3
 80051a0:	3714      	adds	r7, #20
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
 80051aa:	bf00      	nop
 80051ac:	40010000 	.word	0x40010000
 80051b0:	40000400 	.word	0x40000400
 80051b4:	40000800 	.word	0x40000800
 80051b8:	40000c00 	.word	0x40000c00
 80051bc:	40010400 	.word	0x40010400
 80051c0:	40014000 	.word	0x40014000
 80051c4:	40001800 	.word	0x40001800

080051c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051d0:	bf00      	nop
 80051d2:	370c      	adds	r7, #12
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80051dc:	b480      	push	{r7}
 80051de:	b083      	sub	sp, #12
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80051e4:	bf00      	nop
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ee:	4770      	bx	lr

080051f0 <__NVIC_SetPriority>:
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	4603      	mov	r3, r0
 80051f8:	6039      	str	r1, [r7, #0]
 80051fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005200:	2b00      	cmp	r3, #0
 8005202:	db0a      	blt.n	800521a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	b2da      	uxtb	r2, r3
 8005208:	490c      	ldr	r1, [pc, #48]	; (800523c <__NVIC_SetPriority+0x4c>)
 800520a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800520e:	0112      	lsls	r2, r2, #4
 8005210:	b2d2      	uxtb	r2, r2
 8005212:	440b      	add	r3, r1
 8005214:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005218:	e00a      	b.n	8005230 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	b2da      	uxtb	r2, r3
 800521e:	4908      	ldr	r1, [pc, #32]	; (8005240 <__NVIC_SetPriority+0x50>)
 8005220:	79fb      	ldrb	r3, [r7, #7]
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	3b04      	subs	r3, #4
 8005228:	0112      	lsls	r2, r2, #4
 800522a:	b2d2      	uxtb	r2, r2
 800522c:	440b      	add	r3, r1
 800522e:	761a      	strb	r2, [r3, #24]
}
 8005230:	bf00      	nop
 8005232:	370c      	adds	r7, #12
 8005234:	46bd      	mov	sp, r7
 8005236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523a:	4770      	bx	lr
 800523c:	e000e100 	.word	0xe000e100
 8005240:	e000ed00 	.word	0xe000ed00

08005244 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005248:	4b05      	ldr	r3, [pc, #20]	; (8005260 <SysTick_Handler+0x1c>)
 800524a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800524c:	f001 ff12 	bl	8007074 <xTaskGetSchedulerState>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	d001      	beq.n	800525a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005256:	f002 fcf7 	bl	8007c48 <xPortSysTickHandler>
  }
}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	e000e010 	.word	0xe000e010

08005264 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005264:	b580      	push	{r7, lr}
 8005266:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005268:	2100      	movs	r1, #0
 800526a:	f06f 0004 	mvn.w	r0, #4
 800526e:	f7ff ffbf 	bl	80051f0 <__NVIC_SetPriority>
#endif
}
 8005272:	bf00      	nop
 8005274:	bd80      	pop	{r7, pc}
	...

08005278 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800527e:	f3ef 8305 	mrs	r3, IPSR
 8005282:	603b      	str	r3, [r7, #0]
  return(result);
 8005284:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800528a:	f06f 0305 	mvn.w	r3, #5
 800528e:	607b      	str	r3, [r7, #4]
 8005290:	e00c      	b.n	80052ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005292:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <osKernelInitialize+0x44>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d105      	bne.n	80052a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800529a:	4b08      	ldr	r3, [pc, #32]	; (80052bc <osKernelInitialize+0x44>)
 800529c:	2201      	movs	r2, #1
 800529e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	607b      	str	r3, [r7, #4]
 80052a4:	e002      	b.n	80052ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80052a6:	f04f 33ff 	mov.w	r3, #4294967295
 80052aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052ac:	687b      	ldr	r3, [r7, #4]
}
 80052ae:	4618      	mov	r0, r3
 80052b0:	370c      	adds	r7, #12
 80052b2:	46bd      	mov	sp, r7
 80052b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b8:	4770      	bx	lr
 80052ba:	bf00      	nop
 80052bc:	20000558 	.word	0x20000558

080052c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b082      	sub	sp, #8
 80052c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052c6:	f3ef 8305 	mrs	r3, IPSR
 80052ca:	603b      	str	r3, [r7, #0]
  return(result);
 80052cc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d003      	beq.n	80052da <osKernelStart+0x1a>
    stat = osErrorISR;
 80052d2:	f06f 0305 	mvn.w	r3, #5
 80052d6:	607b      	str	r3, [r7, #4]
 80052d8:	e010      	b.n	80052fc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80052da:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <osKernelStart+0x48>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d109      	bne.n	80052f6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80052e2:	f7ff ffbf 	bl	8005264 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <osKernelStart+0x48>)
 80052e8:	2202      	movs	r2, #2
 80052ea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80052ec:	f001 fa66 	bl	80067bc <vTaskStartScheduler>
      stat = osOK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	607b      	str	r3, [r7, #4]
 80052f4:	e002      	b.n	80052fc <osKernelStart+0x3c>
    } else {
      stat = osError;
 80052f6:	f04f 33ff 	mov.w	r3, #4294967295
 80052fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052fc:	687b      	ldr	r3, [r7, #4]
}
 80052fe:	4618      	mov	r0, r3
 8005300:	3708      	adds	r7, #8
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
 8005306:	bf00      	nop
 8005308:	20000558 	.word	0x20000558

0800530c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800530c:	b580      	push	{r7, lr}
 800530e:	b08e      	sub	sp, #56	; 0x38
 8005310:	af04      	add	r7, sp, #16
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005318:	2300      	movs	r3, #0
 800531a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800531c:	f3ef 8305 	mrs	r3, IPSR
 8005320:	617b      	str	r3, [r7, #20]
  return(result);
 8005322:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005324:	2b00      	cmp	r3, #0
 8005326:	d17e      	bne.n	8005426 <osThreadNew+0x11a>
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d07b      	beq.n	8005426 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800532e:	2380      	movs	r3, #128	; 0x80
 8005330:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005332:	2318      	movs	r3, #24
 8005334:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005336:	2300      	movs	r3, #0
 8005338:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800533a:	f04f 33ff 	mov.w	r3, #4294967295
 800533e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d045      	beq.n	80053d2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d002      	beq.n	8005354 <osThreadNew+0x48>
        name = attr->name;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	699b      	ldr	r3, [r3, #24]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d002      	beq.n	8005362 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	699b      	ldr	r3, [r3, #24]
 8005360:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005362:	69fb      	ldr	r3, [r7, #28]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d008      	beq.n	800537a <osThreadNew+0x6e>
 8005368:	69fb      	ldr	r3, [r7, #28]
 800536a:	2b38      	cmp	r3, #56	; 0x38
 800536c:	d805      	bhi.n	800537a <osThreadNew+0x6e>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	f003 0301 	and.w	r3, r3, #1
 8005376:	2b00      	cmp	r3, #0
 8005378:	d001      	beq.n	800537e <osThreadNew+0x72>
        return (NULL);
 800537a:	2300      	movs	r3, #0
 800537c:	e054      	b.n	8005428 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	695b      	ldr	r3, [r3, #20]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	695b      	ldr	r3, [r3, #20]
 800538a:	089b      	lsrs	r3, r3, #2
 800538c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d00e      	beq.n	80053b4 <osThreadNew+0xa8>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	2bbb      	cmp	r3, #187	; 0xbb
 800539c:	d90a      	bls.n	80053b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d006      	beq.n	80053b4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	695b      	ldr	r3, [r3, #20]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <osThreadNew+0xa8>
        mem = 1;
 80053ae:	2301      	movs	r3, #1
 80053b0:	61bb      	str	r3, [r7, #24]
 80053b2:	e010      	b.n	80053d6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d10c      	bne.n	80053d6 <osThreadNew+0xca>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	68db      	ldr	r3, [r3, #12]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d108      	bne.n	80053d6 <osThreadNew+0xca>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <osThreadNew+0xca>
          mem = 0;
 80053cc:	2300      	movs	r3, #0
 80053ce:	61bb      	str	r3, [r7, #24]
 80053d0:	e001      	b.n	80053d6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d110      	bne.n	80053fe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80053e0:	687a      	ldr	r2, [r7, #4]
 80053e2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053e4:	9202      	str	r2, [sp, #8]
 80053e6:	9301      	str	r3, [sp, #4]
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	9300      	str	r3, [sp, #0]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	6a3a      	ldr	r2, [r7, #32]
 80053f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80053f2:	68f8      	ldr	r0, [r7, #12]
 80053f4:	f000 fff6 	bl	80063e4 <xTaskCreateStatic>
 80053f8:	4603      	mov	r3, r0
 80053fa:	613b      	str	r3, [r7, #16]
 80053fc:	e013      	b.n	8005426 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d110      	bne.n	8005426 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005404:	6a3b      	ldr	r3, [r7, #32]
 8005406:	b29a      	uxth	r2, r3
 8005408:	f107 0310 	add.w	r3, r7, #16
 800540c:	9301      	str	r3, [sp, #4]
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	9300      	str	r3, [sp, #0]
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f001 f841 	bl	800649e <xTaskCreate>
 800541c:	4603      	mov	r3, r0
 800541e:	2b01      	cmp	r3, #1
 8005420:	d001      	beq.n	8005426 <osThreadNew+0x11a>
            hTask = NULL;
 8005422:	2300      	movs	r3, #0
 8005424:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005426:	693b      	ldr	r3, [r7, #16]
}
 8005428:	4618      	mov	r0, r3
 800542a:	3728      	adds	r7, #40	; 0x28
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}

08005430 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005430:	b580      	push	{r7, lr}
 8005432:	b084      	sub	sp, #16
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005438:	f3ef 8305 	mrs	r3, IPSR
 800543c:	60bb      	str	r3, [r7, #8]
  return(result);
 800543e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005440:	2b00      	cmp	r3, #0
 8005442:	d003      	beq.n	800544c <osDelay+0x1c>
    stat = osErrorISR;
 8005444:	f06f 0305 	mvn.w	r3, #5
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	e007      	b.n	800545c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800544c:	2300      	movs	r3, #0
 800544e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d002      	beq.n	800545c <osDelay+0x2c>
      vTaskDelay(ticks);
 8005456:	6878      	ldr	r0, [r7, #4]
 8005458:	f001 f97c 	bl	8006754 <vTaskDelay>
    }
  }

  return (stat);
 800545c:	68fb      	ldr	r3, [r7, #12]
}
 800545e:	4618      	mov	r0, r3
 8005460:	3710      	adds	r7, #16
 8005462:	46bd      	mov	sp, r7
 8005464:	bd80      	pop	{r7, pc}

08005466 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005466:	b580      	push	{r7, lr}
 8005468:	b08a      	sub	sp, #40	; 0x28
 800546a:	af02      	add	r7, sp, #8
 800546c:	60f8      	str	r0, [r7, #12]
 800546e:	60b9      	str	r1, [r7, #8]
 8005470:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005472:	2300      	movs	r3, #0
 8005474:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005476:	f3ef 8305 	mrs	r3, IPSR
 800547a:	613b      	str	r3, [r7, #16]
  return(result);
 800547c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800547e:	2b00      	cmp	r3, #0
 8005480:	d15f      	bne.n	8005542 <osMessageQueueNew+0xdc>
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d05c      	beq.n	8005542 <osMessageQueueNew+0xdc>
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d059      	beq.n	8005542 <osMessageQueueNew+0xdc>
    mem = -1;
 800548e:	f04f 33ff 	mov.w	r3, #4294967295
 8005492:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d029      	beq.n	80054ee <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d012      	beq.n	80054c8 <osMessageQueueNew+0x62>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	2b4f      	cmp	r3, #79	; 0x4f
 80054a8:	d90e      	bls.n	80054c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d00a      	beq.n	80054c8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	695a      	ldr	r2, [r3, #20]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	68b9      	ldr	r1, [r7, #8]
 80054ba:	fb01 f303 	mul.w	r3, r1, r3
 80054be:	429a      	cmp	r2, r3
 80054c0:	d302      	bcc.n	80054c8 <osMessageQueueNew+0x62>
        mem = 1;
 80054c2:	2301      	movs	r3, #1
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	e014      	b.n	80054f2 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d110      	bne.n	80054f2 <osMessageQueueNew+0x8c>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d10c      	bne.n	80054f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d108      	bne.n	80054f2 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	695b      	ldr	r3, [r3, #20]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <osMessageQueueNew+0x8c>
          mem = 0;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61bb      	str	r3, [r7, #24]
 80054ec:	e001      	b.n	80054f2 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80054f2:	69bb      	ldr	r3, [r7, #24]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d10b      	bne.n	8005510 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	691a      	ldr	r2, [r3, #16]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2100      	movs	r1, #0
 8005502:	9100      	str	r1, [sp, #0]
 8005504:	68b9      	ldr	r1, [r7, #8]
 8005506:	68f8      	ldr	r0, [r7, #12]
 8005508:	f000 fa2e 	bl	8005968 <xQueueGenericCreateStatic>
 800550c:	61f8      	str	r0, [r7, #28]
 800550e:	e008      	b.n	8005522 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d105      	bne.n	8005522 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005516:	2200      	movs	r2, #0
 8005518:	68b9      	ldr	r1, [r7, #8]
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f000 fa9c 	bl	8005a58 <xQueueGenericCreate>
 8005520:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d00c      	beq.n	8005542 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <osMessageQueueNew+0xd0>
        name = attr->name;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	617b      	str	r3, [r7, #20]
 8005534:	e001      	b.n	800553a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005536:	2300      	movs	r3, #0
 8005538:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800553a:	6979      	ldr	r1, [r7, #20]
 800553c:	69f8      	ldr	r0, [r7, #28]
 800553e:	f000 fef3 	bl	8006328 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8005542:	69fb      	ldr	r3, [r7, #28]
}
 8005544:	4618      	mov	r0, r3
 8005546:	3720      	adds	r7, #32
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800554c:	b580      	push	{r7, lr}
 800554e:	b088      	sub	sp, #32
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	603b      	str	r3, [r7, #0]
 8005558:	4613      	mov	r3, r2
 800555a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005560:	2300      	movs	r3, #0
 8005562:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005564:	f3ef 8305 	mrs	r3, IPSR
 8005568:	617b      	str	r3, [r7, #20]
  return(result);
 800556a:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800556c:	2b00      	cmp	r3, #0
 800556e:	d028      	beq.n	80055c2 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d005      	beq.n	8005582 <osMessageQueuePut+0x36>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d002      	beq.n	8005582 <osMessageQueuePut+0x36>
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005582:	f06f 0303 	mvn.w	r3, #3
 8005586:	61fb      	str	r3, [r7, #28]
 8005588:	e038      	b.n	80055fc <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800558e:	f107 0210 	add.w	r2, r7, #16
 8005592:	2300      	movs	r3, #0
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	69b8      	ldr	r0, [r7, #24]
 8005598:	f000 fbba 	bl	8005d10 <xQueueGenericSendFromISR>
 800559c:	4603      	mov	r3, r0
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d003      	beq.n	80055aa <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80055a2:	f06f 0302 	mvn.w	r3, #2
 80055a6:	61fb      	str	r3, [r7, #28]
 80055a8:	e028      	b.n	80055fc <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d025      	beq.n	80055fc <osMessageQueuePut+0xb0>
 80055b0:	4b15      	ldr	r3, [pc, #84]	; (8005608 <osMessageQueuePut+0xbc>)
 80055b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055b6:	601a      	str	r2, [r3, #0]
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	f3bf 8f6f 	isb	sy
 80055c0:	e01c      	b.n	80055fc <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80055c2:	69bb      	ldr	r3, [r7, #24]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d002      	beq.n	80055ce <osMessageQueuePut+0x82>
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d103      	bne.n	80055d6 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80055ce:	f06f 0303 	mvn.w	r3, #3
 80055d2:	61fb      	str	r3, [r7, #28]
 80055d4:	e012      	b.n	80055fc <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80055d6:	2300      	movs	r3, #0
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	68b9      	ldr	r1, [r7, #8]
 80055dc:	69b8      	ldr	r0, [r7, #24]
 80055de:	f000 fa99 	bl	8005b14 <xQueueGenericSend>
 80055e2:	4603      	mov	r3, r0
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d009      	beq.n	80055fc <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80055ee:	f06f 0301 	mvn.w	r3, #1
 80055f2:	61fb      	str	r3, [r7, #28]
 80055f4:	e002      	b.n	80055fc <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80055f6:	f06f 0302 	mvn.w	r3, #2
 80055fa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80055fc:	69fb      	ldr	r3, [r7, #28]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3720      	adds	r7, #32
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}
 8005606:	bf00      	nop
 8005608:	e000ed04 	.word	0xe000ed04

0800560c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800561e:	2300      	movs	r3, #0
 8005620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005622:	f3ef 8305 	mrs	r3, IPSR
 8005626:	617b      	str	r3, [r7, #20]
  return(result);
 8005628:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800562a:	2b00      	cmp	r3, #0
 800562c:	d028      	beq.n	8005680 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800562e:	69bb      	ldr	r3, [r7, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d005      	beq.n	8005640 <osMessageQueueGet+0x34>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d002      	beq.n	8005640 <osMessageQueueGet+0x34>
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d003      	beq.n	8005648 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005640:	f06f 0303 	mvn.w	r3, #3
 8005644:	61fb      	str	r3, [r7, #28]
 8005646:	e037      	b.n	80056b8 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005648:	2300      	movs	r3, #0
 800564a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800564c:	f107 0310 	add.w	r3, r7, #16
 8005650:	461a      	mov	r2, r3
 8005652:	68b9      	ldr	r1, [r7, #8]
 8005654:	69b8      	ldr	r0, [r7, #24]
 8005656:	f000 fcd7 	bl	8006008 <xQueueReceiveFromISR>
 800565a:	4603      	mov	r3, r0
 800565c:	2b01      	cmp	r3, #1
 800565e:	d003      	beq.n	8005668 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005660:	f06f 0302 	mvn.w	r3, #2
 8005664:	61fb      	str	r3, [r7, #28]
 8005666:	e027      	b.n	80056b8 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d024      	beq.n	80056b8 <osMessageQueueGet+0xac>
 800566e:	4b15      	ldr	r3, [pc, #84]	; (80056c4 <osMessageQueueGet+0xb8>)
 8005670:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005674:	601a      	str	r2, [r3, #0]
 8005676:	f3bf 8f4f 	dsb	sy
 800567a:	f3bf 8f6f 	isb	sy
 800567e:	e01b      	b.n	80056b8 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005680:	69bb      	ldr	r3, [r7, #24]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d002      	beq.n	800568c <osMessageQueueGet+0x80>
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d103      	bne.n	8005694 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800568c:	f06f 0303 	mvn.w	r3, #3
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	e011      	b.n	80056b8 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	68b9      	ldr	r1, [r7, #8]
 8005698:	69b8      	ldr	r0, [r7, #24]
 800569a:	f000 fbd5 	bl	8005e48 <xQueueReceive>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d009      	beq.n	80056b8 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80056aa:	f06f 0301 	mvn.w	r3, #1
 80056ae:	61fb      	str	r3, [r7, #28]
 80056b0:	e002      	b.n	80056b8 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80056b2:	f06f 0302 	mvn.w	r3, #2
 80056b6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80056b8:	69fb      	ldr	r3, [r7, #28]
}
 80056ba:	4618      	mov	r0, r3
 80056bc:	3720      	adds	r7, #32
 80056be:	46bd      	mov	sp, r7
 80056c0:	bd80      	pop	{r7, pc}
 80056c2:	bf00      	nop
 80056c4:	e000ed04 	.word	0xe000ed04

080056c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	60b9      	str	r1, [r7, #8]
 80056d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	4a07      	ldr	r2, [pc, #28]	; (80056f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80056d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	4a06      	ldr	r2, [pc, #24]	; (80056f8 <vApplicationGetIdleTaskMemory+0x30>)
 80056de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2280      	movs	r2, #128	; 0x80
 80056e4:	601a      	str	r2, [r3, #0]
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	2000055c 	.word	0x2000055c
 80056f8:	20000618 	.word	0x20000618

080056fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80056fc:	b480      	push	{r7}
 80056fe:	b085      	sub	sp, #20
 8005700:	af00      	add	r7, sp, #0
 8005702:	60f8      	str	r0, [r7, #12]
 8005704:	60b9      	str	r1, [r7, #8]
 8005706:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	4a07      	ldr	r2, [pc, #28]	; (8005728 <vApplicationGetTimerTaskMemory+0x2c>)
 800570c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	4a06      	ldr	r2, [pc, #24]	; (800572c <vApplicationGetTimerTaskMemory+0x30>)
 8005712:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800571a:	601a      	str	r2, [r3, #0]
}
 800571c:	bf00      	nop
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr
 8005728:	20000818 	.word	0x20000818
 800572c:	200008d4 	.word	0x200008d4

08005730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005730:	b480      	push	{r7}
 8005732:	b083      	sub	sp, #12
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f103 0208 	add.w	r2, r3, #8
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f04f 32ff 	mov.w	r2, #4294967295
 8005748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f103 0208 	add.w	r2, r3, #8
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f103 0208 	add.w	r2, r3, #8
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800577e:	bf00      	nop
 8005780:	370c      	adds	r7, #12
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	68fa      	ldr	r2, [r7, #12]
 800579e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	689a      	ldr	r2, [r3, #8]
 80057a4:	683b      	ldr	r3, [r7, #0]
 80057a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	683a      	ldr	r2, [r7, #0]
 80057ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	683a      	ldr	r2, [r7, #0]
 80057b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	1c5a      	adds	r2, r3, #1
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	601a      	str	r2, [r3, #0]
}
 80057c6:	bf00      	nop
 80057c8:	3714      	adds	r7, #20
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057d2:	b480      	push	{r7}
 80057d4:	b085      	sub	sp, #20
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e8:	d103      	bne.n	80057f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	691b      	ldr	r3, [r3, #16]
 80057ee:	60fb      	str	r3, [r7, #12]
 80057f0:	e00c      	b.n	800580c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	3308      	adds	r3, #8
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	e002      	b.n	8005800 <vListInsert+0x2e>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	685b      	ldr	r3, [r3, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	d2f6      	bcs.n	80057fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	685b      	ldr	r3, [r3, #4]
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	683a      	ldr	r2, [r7, #0]
 8005826:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	601a      	str	r2, [r3, #0]
}
 8005838:	bf00      	nop
 800583a:	3714      	adds	r7, #20
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6892      	ldr	r2, [r2, #8]
 800585a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	687a      	ldr	r2, [r7, #4]
 8005862:	6852      	ldr	r2, [r2, #4]
 8005864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	687a      	ldr	r2, [r7, #4]
 800586c:	429a      	cmp	r2, r3
 800586e:	d103      	bne.n	8005878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689a      	ldr	r2, [r3, #8]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	2200      	movs	r2, #0
 800587c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	1e5a      	subs	r2, r3, #1
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
}
 800588c:	4618      	mov	r0, r3
 800588e:	3714      	adds	r7, #20
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d10a      	bne.n	80058c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b0:	f383 8811 	msr	BASEPRI, r3
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	f3bf 8f4f 	dsb	sy
 80058bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058be:	bf00      	nop
 80058c0:	e7fe      	b.n	80058c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058c2:	f002 f92f 	bl	8007b24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ce:	68f9      	ldr	r1, [r7, #12]
 80058d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058d2:	fb01 f303 	mul.w	r3, r1, r3
 80058d6:	441a      	add	r2, r3
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2200      	movs	r2, #0
 80058e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681a      	ldr	r2, [r3, #0]
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f2:	3b01      	subs	r3, #1
 80058f4:	68f9      	ldr	r1, [r7, #12]
 80058f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80058f8:	fb01 f303 	mul.w	r3, r1, r3
 80058fc:	441a      	add	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	22ff      	movs	r2, #255	; 0xff
 8005906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	22ff      	movs	r2, #255	; 0xff
 800590e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d114      	bne.n	8005942 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	2b00      	cmp	r3, #0
 800591e:	d01a      	beq.n	8005956 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	3310      	adds	r3, #16
 8005924:	4618      	mov	r0, r3
 8005926:	f001 f9e3 	bl	8006cf0 <xTaskRemoveFromEventList>
 800592a:	4603      	mov	r3, r0
 800592c:	2b00      	cmp	r3, #0
 800592e:	d012      	beq.n	8005956 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005930:	4b0c      	ldr	r3, [pc, #48]	; (8005964 <xQueueGenericReset+0xcc>)
 8005932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005936:	601a      	str	r2, [r3, #0]
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	f3bf 8f6f 	isb	sy
 8005940:	e009      	b.n	8005956 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	3310      	adds	r3, #16
 8005946:	4618      	mov	r0, r3
 8005948:	f7ff fef2 	bl	8005730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3324      	adds	r3, #36	; 0x24
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff feed 	bl	8005730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005956:	f002 f915 	bl	8007b84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800595a:	2301      	movs	r3, #1
}
 800595c:	4618      	mov	r0, r3
 800595e:	3710      	adds	r7, #16
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	e000ed04 	.word	0xe000ed04

08005968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005968:	b580      	push	{r7, lr}
 800596a:	b08e      	sub	sp, #56	; 0x38
 800596c:	af02      	add	r7, sp, #8
 800596e:	60f8      	str	r0, [r7, #12]
 8005970:	60b9      	str	r1, [r7, #8]
 8005972:	607a      	str	r2, [r7, #4]
 8005974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800598e:	bf00      	nop
 8005990:	e7fe      	b.n	8005990 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	d10a      	bne.n	80059ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599c:	f383 8811 	msr	BASEPRI, r3
 80059a0:	f3bf 8f6f 	isb	sy
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80059aa:	bf00      	nop
 80059ac:	e7fe      	b.n	80059ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d002      	beq.n	80059ba <xQueueGenericCreateStatic+0x52>
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d001      	beq.n	80059be <xQueueGenericCreateStatic+0x56>
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <xQueueGenericCreateStatic+0x58>
 80059be:	2300      	movs	r3, #0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d10a      	bne.n	80059da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	623b      	str	r3, [r7, #32]
}
 80059d6:	bf00      	nop
 80059d8:	e7fe      	b.n	80059d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d102      	bne.n	80059e6 <xQueueGenericCreateStatic+0x7e>
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <xQueueGenericCreateStatic+0x82>
 80059e6:	2301      	movs	r3, #1
 80059e8:	e000      	b.n	80059ec <xQueueGenericCreateStatic+0x84>
 80059ea:	2300      	movs	r3, #0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d10a      	bne.n	8005a06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80059f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059f4:	f383 8811 	msr	BASEPRI, r3
 80059f8:	f3bf 8f6f 	isb	sy
 80059fc:	f3bf 8f4f 	dsb	sy
 8005a00:	61fb      	str	r3, [r7, #28]
}
 8005a02:	bf00      	nop
 8005a04:	e7fe      	b.n	8005a04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a06:	2350      	movs	r3, #80	; 0x50
 8005a08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2b50      	cmp	r3, #80	; 0x50
 8005a0e:	d00a      	beq.n	8005a26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	61bb      	str	r3, [r7, #24]
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00d      	beq.n	8005a4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a34:	2201      	movs	r2, #1
 8005a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a40:	9300      	str	r3, [sp, #0]
 8005a42:	4613      	mov	r3, r2
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f83f 	bl	8005acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005a50:	4618      	mov	r0, r3
 8005a52:	3730      	adds	r7, #48	; 0x30
 8005a54:	46bd      	mov	sp, r7
 8005a56:	bd80      	pop	{r7, pc}

08005a58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b08a      	sub	sp, #40	; 0x28
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	4613      	mov	r3, r2
 8005a64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d10a      	bne.n	8005a82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8005a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a70:	f383 8811 	msr	BASEPRI, r3
 8005a74:	f3bf 8f6f 	isb	sy
 8005a78:	f3bf 8f4f 	dsb	sy
 8005a7c:	613b      	str	r3, [r7, #16]
}
 8005a7e:	bf00      	nop
 8005a80:	e7fe      	b.n	8005a80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	68ba      	ldr	r2, [r7, #8]
 8005a86:	fb02 f303 	mul.w	r3, r2, r3
 8005a8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	3350      	adds	r3, #80	; 0x50
 8005a90:	4618      	mov	r0, r3
 8005a92:	f002 f969 	bl	8007d68 <pvPortMalloc>
 8005a96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d011      	beq.n	8005ac2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005a9e:	69bb      	ldr	r3, [r7, #24]
 8005aa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	3350      	adds	r3, #80	; 0x50
 8005aa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005aa8:	69bb      	ldr	r3, [r7, #24]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ab0:	79fa      	ldrb	r2, [r7, #7]
 8005ab2:	69bb      	ldr	r3, [r7, #24]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	4613      	mov	r3, r2
 8005ab8:	697a      	ldr	r2, [r7, #20]
 8005aba:	68b9      	ldr	r1, [r7, #8]
 8005abc:	68f8      	ldr	r0, [r7, #12]
 8005abe:	f000 f805 	bl	8005acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3720      	adds	r7, #32
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d103      	bne.n	8005ae8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	69ba      	ldr	r2, [r7, #24]
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	e002      	b.n	8005aee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ae8:	69bb      	ldr	r3, [r7, #24]
 8005aea:	687a      	ldr	r2, [r7, #4]
 8005aec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005aee:	69bb      	ldr	r3, [r7, #24]
 8005af0:	68fa      	ldr	r2, [r7, #12]
 8005af2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	68ba      	ldr	r2, [r7, #8]
 8005af8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005afa:	2101      	movs	r1, #1
 8005afc:	69b8      	ldr	r0, [r7, #24]
 8005afe:	f7ff fecb 	bl	8005898 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b02:	69bb      	ldr	r3, [r7, #24]
 8005b04:	78fa      	ldrb	r2, [r7, #3]
 8005b06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b0a:	bf00      	nop
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}
	...

08005b14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b08e      	sub	sp, #56	; 0x38
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
 8005b20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b22:	2300      	movs	r3, #0
 8005b24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xQueueGenericSend+0x32>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b42:	bf00      	nop
 8005b44:	e7fe      	b.n	8005b44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d103      	bne.n	8005b54 <xQueueGenericSend+0x40>
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <xQueueGenericSend+0x44>
 8005b54:	2301      	movs	r3, #1
 8005b56:	e000      	b.n	8005b5a <xQueueGenericSend+0x46>
 8005b58:	2300      	movs	r3, #0
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d10a      	bne.n	8005b74 <xQueueGenericSend+0x60>
	__asm volatile
 8005b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b62:	f383 8811 	msr	BASEPRI, r3
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	f3bf 8f4f 	dsb	sy
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005b70:	bf00      	nop
 8005b72:	e7fe      	b.n	8005b72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	2b02      	cmp	r3, #2
 8005b78:	d103      	bne.n	8005b82 <xQueueGenericSend+0x6e>
 8005b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <xQueueGenericSend+0x72>
 8005b82:	2301      	movs	r3, #1
 8005b84:	e000      	b.n	8005b88 <xQueueGenericSend+0x74>
 8005b86:	2300      	movs	r3, #0
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d10a      	bne.n	8005ba2 <xQueueGenericSend+0x8e>
	__asm volatile
 8005b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b90:	f383 8811 	msr	BASEPRI, r3
 8005b94:	f3bf 8f6f 	isb	sy
 8005b98:	f3bf 8f4f 	dsb	sy
 8005b9c:	623b      	str	r3, [r7, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	e7fe      	b.n	8005ba0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ba2:	f001 fa67 	bl	8007074 <xTaskGetSchedulerState>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d102      	bne.n	8005bb2 <xQueueGenericSend+0x9e>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d101      	bne.n	8005bb6 <xQueueGenericSend+0xa2>
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <xQueueGenericSend+0xa4>
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10a      	bne.n	8005bd2 <xQueueGenericSend+0xbe>
	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	61fb      	str	r3, [r7, #28]
}
 8005bce:	bf00      	nop
 8005bd0:	e7fe      	b.n	8005bd0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bd2:	f001 ffa7 	bl	8007b24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bde:	429a      	cmp	r2, r3
 8005be0:	d302      	bcc.n	8005be8 <xQueueGenericSend+0xd4>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d129      	bne.n	8005c3c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005be8:	683a      	ldr	r2, [r7, #0]
 8005bea:	68b9      	ldr	r1, [r7, #8]
 8005bec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005bee:	f000 fa8b 	bl	8006108 <prvCopyDataToQueue>
 8005bf2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d010      	beq.n	8005c1e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfe:	3324      	adds	r3, #36	; 0x24
 8005c00:	4618      	mov	r0, r3
 8005c02:	f001 f875 	bl	8006cf0 <xTaskRemoveFromEventList>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d013      	beq.n	8005c34 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c0c:	4b3f      	ldr	r3, [pc, #252]	; (8005d0c <xQueueGenericSend+0x1f8>)
 8005c0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c12:	601a      	str	r2, [r3, #0]
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	e00a      	b.n	8005c34 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d007      	beq.n	8005c34 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c24:	4b39      	ldr	r3, [pc, #228]	; (8005d0c <xQueueGenericSend+0x1f8>)
 8005c26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c34:	f001 ffa6 	bl	8007b84 <vPortExitCritical>
				return pdPASS;
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e063      	b.n	8005d04 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d103      	bne.n	8005c4a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c42:	f001 ff9f 	bl	8007b84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e05c      	b.n	8005d04 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d106      	bne.n	8005c5e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c50:	f107 0314 	add.w	r3, r7, #20
 8005c54:	4618      	mov	r0, r3
 8005c56:	f001 f8af 	bl	8006db8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c5e:	f001 ff91 	bl	8007b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c62:	f000 fe1b 	bl	800689c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c66:	f001 ff5d 	bl	8007b24 <vPortEnterCritical>
 8005c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005c70:	b25b      	sxtb	r3, r3
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c76:	d103      	bne.n	8005c80 <xQueueGenericSend+0x16c>
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005c86:	b25b      	sxtb	r3, r3
 8005c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8c:	d103      	bne.n	8005c96 <xQueueGenericSend+0x182>
 8005c8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005c96:	f001 ff75 	bl	8007b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c9a:	1d3a      	adds	r2, r7, #4
 8005c9c:	f107 0314 	add.w	r3, r7, #20
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	f001 f89e 	bl	8006de4 <xTaskCheckForTimeOut>
 8005ca8:	4603      	mov	r3, r0
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d124      	bne.n	8005cf8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cb0:	f000 fb22 	bl	80062f8 <prvIsQueueFull>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d018      	beq.n	8005cec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cbc:	3310      	adds	r3, #16
 8005cbe:	687a      	ldr	r2, [r7, #4]
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f000 ffc4 	bl	8006c50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cc8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cca:	f000 faad 	bl	8006228 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cce:	f000 fdf3 	bl	80068b8 <xTaskResumeAll>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f47f af7c 	bne.w	8005bd2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005cda:	4b0c      	ldr	r3, [pc, #48]	; (8005d0c <xQueueGenericSend+0x1f8>)
 8005cdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ce0:	601a      	str	r2, [r3, #0]
 8005ce2:	f3bf 8f4f 	dsb	sy
 8005ce6:	f3bf 8f6f 	isb	sy
 8005cea:	e772      	b.n	8005bd2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cee:	f000 fa9b 	bl	8006228 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cf2:	f000 fde1 	bl	80068b8 <xTaskResumeAll>
 8005cf6:	e76c      	b.n	8005bd2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005cfa:	f000 fa95 	bl	8006228 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cfe:	f000 fddb 	bl	80068b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d02:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3738      	adds	r7, #56	; 0x38
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	e000ed04 	.word	0xe000ed04

08005d10 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b090      	sub	sp, #64	; 0x40
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
 8005d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005d22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d2c:	f383 8811 	msr	BASEPRI, r3
 8005d30:	f3bf 8f6f 	isb	sy
 8005d34:	f3bf 8f4f 	dsb	sy
 8005d38:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005d3a:	bf00      	nop
 8005d3c:	e7fe      	b.n	8005d3c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d103      	bne.n	8005d4c <xQueueGenericSendFromISR+0x3c>
 8005d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d101      	bne.n	8005d50 <xQueueGenericSendFromISR+0x40>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <xQueueGenericSendFromISR+0x42>
 8005d50:	2300      	movs	r3, #0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d10a      	bne.n	8005d6c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005d68:	bf00      	nop
 8005d6a:	e7fe      	b.n	8005d6a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d103      	bne.n	8005d7a <xQueueGenericSendFromISR+0x6a>
 8005d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d101      	bne.n	8005d7e <xQueueGenericSendFromISR+0x6e>
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e000      	b.n	8005d80 <xQueueGenericSendFromISR+0x70>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10a      	bne.n	8005d9a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	623b      	str	r3, [r7, #32]
}
 8005d96:	bf00      	nop
 8005d98:	e7fe      	b.n	8005d98 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d9a:	f001 ffa5 	bl	8007ce8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d9e:	f3ef 8211 	mrs	r2, BASEPRI
 8005da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	61fa      	str	r2, [r7, #28]
 8005db4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005db6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005db8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d302      	bcc.n	8005dcc <xQueueGenericSendFromISR+0xbc>
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d12f      	bne.n	8005e2c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dda:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005ddc:	683a      	ldr	r2, [r7, #0]
 8005dde:	68b9      	ldr	r1, [r7, #8]
 8005de0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005de2:	f000 f991 	bl	8006108 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005de6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dee:	d112      	bne.n	8005e16 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d016      	beq.n	8005e26 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005df8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfa:	3324      	adds	r3, #36	; 0x24
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 ff77 	bl	8006cf0 <xTaskRemoveFromEventList>
 8005e02:	4603      	mov	r3, r0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00e      	beq.n	8005e26 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d00b      	beq.n	8005e26 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2201      	movs	r2, #1
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	e007      	b.n	8005e26 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e16:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	b2db      	uxtb	r3, r3
 8005e1e:	b25a      	sxtb	r2, r3
 8005e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005e26:	2301      	movs	r3, #1
 8005e28:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005e2a:	e001      	b.n	8005e30 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e32:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e3a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3740      	adds	r7, #64	; 0x40
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b08c      	sub	sp, #48	; 0x30
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	60b9      	str	r1, [r7, #8]
 8005e52:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d10a      	bne.n	8005e78 <xQueueReceive+0x30>
	__asm volatile
 8005e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e66:	f383 8811 	msr	BASEPRI, r3
 8005e6a:	f3bf 8f6f 	isb	sy
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	623b      	str	r3, [r7, #32]
}
 8005e74:	bf00      	nop
 8005e76:	e7fe      	b.n	8005e76 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d103      	bne.n	8005e86 <xQueueReceive+0x3e>
 8005e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <xQueueReceive+0x42>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e000      	b.n	8005e8c <xQueueReceive+0x44>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d10a      	bne.n	8005ea6 <xQueueReceive+0x5e>
	__asm volatile
 8005e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e94:	f383 8811 	msr	BASEPRI, r3
 8005e98:	f3bf 8f6f 	isb	sy
 8005e9c:	f3bf 8f4f 	dsb	sy
 8005ea0:	61fb      	str	r3, [r7, #28]
}
 8005ea2:	bf00      	nop
 8005ea4:	e7fe      	b.n	8005ea4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ea6:	f001 f8e5 	bl	8007074 <xTaskGetSchedulerState>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <xQueueReceive+0x6e>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <xQueueReceive+0x72>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <xQueueReceive+0x74>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10a      	bne.n	8005ed6 <xQueueReceive+0x8e>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	61bb      	str	r3, [r7, #24]
}
 8005ed2:	bf00      	nop
 8005ed4:	e7fe      	b.n	8005ed4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ed6:	f001 fe25 	bl	8007b24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ede:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d01f      	beq.n	8005f26 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005eea:	f000 f977 	bl	80061dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef0:	1e5a      	subs	r2, r3, #1
 8005ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d00f      	beq.n	8005f1e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f00:	3310      	adds	r3, #16
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fef4 	bl	8006cf0 <xTaskRemoveFromEventList>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d007      	beq.n	8005f1e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f0e:	4b3d      	ldr	r3, [pc, #244]	; (8006004 <xQueueReceive+0x1bc>)
 8005f10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f14:	601a      	str	r2, [r3, #0]
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f1e:	f001 fe31 	bl	8007b84 <vPortExitCritical>
				return pdPASS;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e069      	b.n	8005ffa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d103      	bne.n	8005f34 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f2c:	f001 fe2a 	bl	8007b84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f30:	2300      	movs	r3, #0
 8005f32:	e062      	b.n	8005ffa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d106      	bne.n	8005f48 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f3a:	f107 0310 	add.w	r3, r7, #16
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f000 ff3a 	bl	8006db8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f44:	2301      	movs	r3, #1
 8005f46:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f48:	f001 fe1c 	bl	8007b84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f4c:	f000 fca6 	bl	800689c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f50:	f001 fde8 	bl	8007b24 <vPortEnterCritical>
 8005f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005f5a:	b25b      	sxtb	r3, r3
 8005f5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f60:	d103      	bne.n	8005f6a <xQueueReceive+0x122>
 8005f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f70:	b25b      	sxtb	r3, r3
 8005f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f76:	d103      	bne.n	8005f80 <xQueueReceive+0x138>
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f80:	f001 fe00 	bl	8007b84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f84:	1d3a      	adds	r2, r7, #4
 8005f86:	f107 0310 	add.w	r3, r7, #16
 8005f8a:	4611      	mov	r1, r2
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 ff29 	bl	8006de4 <xTaskCheckForTimeOut>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d123      	bne.n	8005fe0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f9a:	f000 f997 	bl	80062cc <prvIsQueueEmpty>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d017      	beq.n	8005fd4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fa6:	3324      	adds	r3, #36	; 0x24
 8005fa8:	687a      	ldr	r2, [r7, #4]
 8005faa:	4611      	mov	r1, r2
 8005fac:	4618      	mov	r0, r3
 8005fae:	f000 fe4f 	bl	8006c50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fb4:	f000 f938 	bl	8006228 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fb8:	f000 fc7e 	bl	80068b8 <xTaskResumeAll>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d189      	bne.n	8005ed6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005fc2:	4b10      	ldr	r3, [pc, #64]	; (8006004 <xQueueReceive+0x1bc>)
 8005fc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc8:	601a      	str	r2, [r3, #0]
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	e780      	b.n	8005ed6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fd6:	f000 f927 	bl	8006228 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fda:	f000 fc6d 	bl	80068b8 <xTaskResumeAll>
 8005fde:	e77a      	b.n	8005ed6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fe0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fe2:	f000 f921 	bl	8006228 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fe6:	f000 fc67 	bl	80068b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005fec:	f000 f96e 	bl	80062cc <prvIsQueueEmpty>
 8005ff0:	4603      	mov	r3, r0
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f43f af6f 	beq.w	8005ed6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ff8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	3730      	adds	r7, #48	; 0x30
 8005ffe:	46bd      	mov	sp, r7
 8006000:	bd80      	pop	{r7, pc}
 8006002:	bf00      	nop
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08e      	sub	sp, #56	; 0x38
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10a      	bne.n	8006034 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	623b      	str	r3, [r7, #32]
}
 8006030:	bf00      	nop
 8006032:	e7fe      	b.n	8006032 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d103      	bne.n	8006042 <xQueueReceiveFromISR+0x3a>
 800603a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <xQueueReceiveFromISR+0x3e>
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <xQueueReceiveFromISR+0x40>
 8006046:	2300      	movs	r3, #0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	61fb      	str	r3, [r7, #28]
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006062:	f001 fe41 	bl	8007ce8 <vPortValidateInterruptPriority>
	__asm volatile
 8006066:	f3ef 8211 	mrs	r2, BASEPRI
 800606a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606e:	f383 8811 	msr	BASEPRI, r3
 8006072:	f3bf 8f6f 	isb	sy
 8006076:	f3bf 8f4f 	dsb	sy
 800607a:	61ba      	str	r2, [r7, #24]
 800607c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800607e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006080:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608a:	2b00      	cmp	r3, #0
 800608c:	d02f      	beq.n	80060ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800608e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006090:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006094:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006098:	68b9      	ldr	r1, [r7, #8]
 800609a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800609c:	f000 f89e 	bl	80061dc <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a2:	1e5a      	subs	r2, r3, #1
 80060a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80060a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80060ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b0:	d112      	bne.n	80060d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d016      	beq.n	80060e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	3310      	adds	r3, #16
 80060be:	4618      	mov	r0, r3
 80060c0:	f000 fe16 	bl	8006cf0 <xTaskRemoveFromEventList>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00e      	beq.n	80060e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d00b      	beq.n	80060e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	601a      	str	r2, [r3, #0]
 80060d6:	e007      	b.n	80060e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80060d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060dc:	3301      	adds	r3, #1
 80060de:	b2db      	uxtb	r3, r3
 80060e0:	b25a      	sxtb	r2, r3
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80060e8:	2301      	movs	r3, #1
 80060ea:	637b      	str	r3, [r7, #52]	; 0x34
 80060ec:	e001      	b.n	80060f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	637b      	str	r3, [r7, #52]	; 0x34
 80060f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	f383 8811 	msr	BASEPRI, r3
}
 80060fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80060fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006100:	4618      	mov	r0, r3
 8006102:	3738      	adds	r7, #56	; 0x38
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b086      	sub	sp, #24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006114:	2300      	movs	r3, #0
 8006116:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800611c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10d      	bne.n	8006142 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	2b00      	cmp	r3, #0
 800612c:	d14d      	bne.n	80061ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	4618      	mov	r0, r3
 8006134:	f000 ffbc 	bl	80070b0 <xTaskPriorityDisinherit>
 8006138:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2200      	movs	r2, #0
 800613e:	609a      	str	r2, [r3, #8]
 8006140:	e043      	b.n	80061ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d119      	bne.n	800617c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	6858      	ldr	r0, [r3, #4]
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006150:	461a      	mov	r2, r3
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	f002 f915 	bl	8008382 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006160:	441a      	add	r2, r3
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	685a      	ldr	r2, [r3, #4]
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	689b      	ldr	r3, [r3, #8]
 800616e:	429a      	cmp	r2, r3
 8006170:	d32b      	bcc.n	80061ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	605a      	str	r2, [r3, #4]
 800617a:	e026      	b.n	80061ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	68d8      	ldr	r0, [r3, #12]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006184:	461a      	mov	r2, r3
 8006186:	68b9      	ldr	r1, [r7, #8]
 8006188:	f002 f8fb 	bl	8008382 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	425b      	negs	r3, r3
 8006196:	441a      	add	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	68da      	ldr	r2, [r3, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d207      	bcs.n	80061b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689a      	ldr	r2, [r3, #8]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b0:	425b      	negs	r3, r3
 80061b2:	441a      	add	r2, r3
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2b02      	cmp	r3, #2
 80061bc:	d105      	bne.n	80061ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d002      	beq.n	80061ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	3b01      	subs	r3, #1
 80061c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	1c5a      	adds	r2, r3, #1
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80061d2:	697b      	ldr	r3, [r7, #20]
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3718      	adds	r7, #24
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b082      	sub	sp, #8
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d018      	beq.n	8006220 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f6:	441a      	add	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	68da      	ldr	r2, [r3, #12]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	429a      	cmp	r2, r3
 8006206:	d303      	bcc.n	8006210 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681a      	ldr	r2, [r3, #0]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	68d9      	ldr	r1, [r3, #12]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006218:	461a      	mov	r2, r3
 800621a:	6838      	ldr	r0, [r7, #0]
 800621c:	f002 f8b1 	bl	8008382 <memcpy>
	}
}
 8006220:	bf00      	nop
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006230:	f001 fc78 	bl	8007b24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800623a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800623c:	e011      	b.n	8006262 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006242:	2b00      	cmp	r3, #0
 8006244:	d012      	beq.n	800626c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	3324      	adds	r3, #36	; 0x24
 800624a:	4618      	mov	r0, r3
 800624c:	f000 fd50 	bl	8006cf0 <xTaskRemoveFromEventList>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d001      	beq.n	800625a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006256:	f000 fe27 	bl	8006ea8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800625a:	7bfb      	ldrb	r3, [r7, #15]
 800625c:	3b01      	subs	r3, #1
 800625e:	b2db      	uxtb	r3, r3
 8006260:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006266:	2b00      	cmp	r3, #0
 8006268:	dce9      	bgt.n	800623e <prvUnlockQueue+0x16>
 800626a:	e000      	b.n	800626e <prvUnlockQueue+0x46>
					break;
 800626c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	22ff      	movs	r2, #255	; 0xff
 8006272:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006276:	f001 fc85 	bl	8007b84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800627a:	f001 fc53 	bl	8007b24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006284:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006286:	e011      	b.n	80062ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	691b      	ldr	r3, [r3, #16]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d012      	beq.n	80062b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	3310      	adds	r3, #16
 8006294:	4618      	mov	r0, r3
 8006296:	f000 fd2b 	bl	8006cf0 <xTaskRemoveFromEventList>
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062a0:	f000 fe02 	bl	8006ea8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062a4:	7bbb      	ldrb	r3, [r7, #14]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	b2db      	uxtb	r3, r3
 80062aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	dce9      	bgt.n	8006288 <prvUnlockQueue+0x60>
 80062b4:	e000      	b.n	80062b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	22ff      	movs	r2, #255	; 0xff
 80062bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80062c0:	f001 fc60 	bl	8007b84 <vPortExitCritical>
}
 80062c4:	bf00      	nop
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80062d4:	f001 fc26 	bl	8007b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d102      	bne.n	80062e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80062e0:	2301      	movs	r3, #1
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e001      	b.n	80062ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80062e6:	2300      	movs	r3, #0
 80062e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80062ea:	f001 fc4b 	bl	8007b84 <vPortExitCritical>

	return xReturn;
 80062ee:	68fb      	ldr	r3, [r7, #12]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006300:	f001 fc10 	bl	8007b24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630c:	429a      	cmp	r2, r3
 800630e:	d102      	bne.n	8006316 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006310:	2301      	movs	r3, #1
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	e001      	b.n	800631a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006316:	2300      	movs	r3, #0
 8006318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800631a:	f001 fc33 	bl	8007b84 <vPortExitCritical>

	return xReturn;
 800631e:	68fb      	ldr	r3, [r7, #12]
}
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006328:	b480      	push	{r7}
 800632a:	b085      	sub	sp, #20
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
 8006330:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006332:	2300      	movs	r3, #0
 8006334:	60fb      	str	r3, [r7, #12]
 8006336:	e014      	b.n	8006362 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006338:	4a0f      	ldr	r2, [pc, #60]	; (8006378 <vQueueAddToRegistry+0x50>)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d10b      	bne.n	800635c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006344:	490c      	ldr	r1, [pc, #48]	; (8006378 <vQueueAddToRegistry+0x50>)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	683a      	ldr	r2, [r7, #0]
 800634a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800634e:	4a0a      	ldr	r2, [pc, #40]	; (8006378 <vQueueAddToRegistry+0x50>)
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	00db      	lsls	r3, r3, #3
 8006354:	4413      	add	r3, r2
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800635a:	e006      	b.n	800636a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	3301      	adds	r3, #1
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	2b07      	cmp	r3, #7
 8006366:	d9e7      	bls.n	8006338 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006368:	bf00      	nop
 800636a:	bf00      	nop
 800636c:	3714      	adds	r7, #20
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	20000cd4 	.word	0x20000cd4

0800637c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	60f8      	str	r0, [r7, #12]
 8006384:	60b9      	str	r1, [r7, #8]
 8006386:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800638c:	f001 fbca 	bl	8007b24 <vPortEnterCritical>
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006396:	b25b      	sxtb	r3, r3
 8006398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800639c:	d103      	bne.n	80063a6 <vQueueWaitForMessageRestricted+0x2a>
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80063ac:	b25b      	sxtb	r3, r3
 80063ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063b2:	d103      	bne.n	80063bc <vQueueWaitForMessageRestricted+0x40>
 80063b4:	697b      	ldr	r3, [r7, #20]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80063bc:	f001 fbe2 	bl	8007b84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d106      	bne.n	80063d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	3324      	adds	r3, #36	; 0x24
 80063cc:	687a      	ldr	r2, [r7, #4]
 80063ce:	68b9      	ldr	r1, [r7, #8]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 fc61 	bl	8006c98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80063d6:	6978      	ldr	r0, [r7, #20]
 80063d8:	f7ff ff26 	bl	8006228 <prvUnlockQueue>
	}
 80063dc:	bf00      	nop
 80063de:	3718      	adds	r7, #24
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b08e      	sub	sp, #56	; 0x38
 80063e8:	af04      	add	r7, sp, #16
 80063ea:	60f8      	str	r0, [r7, #12]
 80063ec:	60b9      	str	r1, [r7, #8]
 80063ee:	607a      	str	r2, [r7, #4]
 80063f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80063f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d10a      	bne.n	800640e <xTaskCreateStatic+0x2a>
	__asm volatile
 80063f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	623b      	str	r3, [r7, #32]
}
 800640a:	bf00      	nop
 800640c:	e7fe      	b.n	800640c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800640e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <xTaskCreateStatic+0x46>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	61fb      	str	r3, [r7, #28]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800642a:	23bc      	movs	r3, #188	; 0xbc
 800642c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	2bbc      	cmp	r3, #188	; 0xbc
 8006432:	d00a      	beq.n	800644a <xTaskCreateStatic+0x66>
	__asm volatile
 8006434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006438:	f383 8811 	msr	BASEPRI, r3
 800643c:	f3bf 8f6f 	isb	sy
 8006440:	f3bf 8f4f 	dsb	sy
 8006444:	61bb      	str	r3, [r7, #24]
}
 8006446:	bf00      	nop
 8006448:	e7fe      	b.n	8006448 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800644a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800644c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800644e:	2b00      	cmp	r3, #0
 8006450:	d01e      	beq.n	8006490 <xTaskCreateStatic+0xac>
 8006452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006454:	2b00      	cmp	r3, #0
 8006456:	d01b      	beq.n	8006490 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800645a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800645c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800645e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006460:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006464:	2202      	movs	r2, #2
 8006466:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800646a:	2300      	movs	r3, #0
 800646c:	9303      	str	r3, [sp, #12]
 800646e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006470:	9302      	str	r3, [sp, #8]
 8006472:	f107 0314 	add.w	r3, r7, #20
 8006476:	9301      	str	r3, [sp, #4]
 8006478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647a:	9300      	str	r3, [sp, #0]
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	68b9      	ldr	r1, [r7, #8]
 8006482:	68f8      	ldr	r0, [r7, #12]
 8006484:	f000 f850 	bl	8006528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006488:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800648a:	f000 f8f3 	bl	8006674 <prvAddNewTaskToReadyList>
 800648e:	e001      	b.n	8006494 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8006490:	2300      	movs	r3, #0
 8006492:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006494:	697b      	ldr	r3, [r7, #20]
	}
 8006496:	4618      	mov	r0, r3
 8006498:	3728      	adds	r7, #40	; 0x28
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}

0800649e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800649e:	b580      	push	{r7, lr}
 80064a0:	b08c      	sub	sp, #48	; 0x30
 80064a2:	af04      	add	r7, sp, #16
 80064a4:	60f8      	str	r0, [r7, #12]
 80064a6:	60b9      	str	r1, [r7, #8]
 80064a8:	603b      	str	r3, [r7, #0]
 80064aa:	4613      	mov	r3, r2
 80064ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064ae:	88fb      	ldrh	r3, [r7, #6]
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f001 fc58 	bl	8007d68 <pvPortMalloc>
 80064b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d00e      	beq.n	80064de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064c0:	20bc      	movs	r0, #188	; 0xbc
 80064c2:	f001 fc51 	bl	8007d68 <pvPortMalloc>
 80064c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064c8:	69fb      	ldr	r3, [r7, #28]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	631a      	str	r2, [r3, #48]	; 0x30
 80064d4:	e005      	b.n	80064e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80064d6:	6978      	ldr	r0, [r7, #20]
 80064d8:	f001 fd12 	bl	8007f00 <vPortFree>
 80064dc:	e001      	b.n	80064e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80064de:	2300      	movs	r3, #0
 80064e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d017      	beq.n	8006518 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80064e8:	69fb      	ldr	r3, [r7, #28]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80064f0:	88fa      	ldrh	r2, [r7, #6]
 80064f2:	2300      	movs	r3, #0
 80064f4:	9303      	str	r3, [sp, #12]
 80064f6:	69fb      	ldr	r3, [r7, #28]
 80064f8:	9302      	str	r3, [sp, #8]
 80064fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064fc:	9301      	str	r3, [sp, #4]
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68b9      	ldr	r1, [r7, #8]
 8006506:	68f8      	ldr	r0, [r7, #12]
 8006508:	f000 f80e 	bl	8006528 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800650c:	69f8      	ldr	r0, [r7, #28]
 800650e:	f000 f8b1 	bl	8006674 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006512:	2301      	movs	r3, #1
 8006514:	61bb      	str	r3, [r7, #24]
 8006516:	e002      	b.n	800651e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006518:	f04f 33ff 	mov.w	r3, #4294967295
 800651c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800651e:	69bb      	ldr	r3, [r7, #24]
	}
 8006520:	4618      	mov	r0, r3
 8006522:	3720      	adds	r7, #32
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b088      	sub	sp, #32
 800652c:	af00      	add	r7, sp, #0
 800652e:	60f8      	str	r0, [r7, #12]
 8006530:	60b9      	str	r1, [r7, #8]
 8006532:	607a      	str	r2, [r7, #4]
 8006534:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006538:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	461a      	mov	r2, r3
 8006540:	21a5      	movs	r1, #165	; 0xa5
 8006542:	f001 ff2c 	bl	800839e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006550:	3b01      	subs	r3, #1
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	4413      	add	r3, r2
 8006556:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	f023 0307 	bic.w	r3, r3, #7
 800655e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006560:	69bb      	ldr	r3, [r7, #24]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	2b00      	cmp	r3, #0
 8006568:	d00a      	beq.n	8006580 <prvInitialiseNewTask+0x58>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	617b      	str	r3, [r7, #20]
}
 800657c:	bf00      	nop
 800657e:	e7fe      	b.n	800657e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d01f      	beq.n	80065c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006586:	2300      	movs	r3, #0
 8006588:	61fb      	str	r3, [r7, #28]
 800658a:	e012      	b.n	80065b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800658c:	68ba      	ldr	r2, [r7, #8]
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	4413      	add	r3, r2
 8006592:	7819      	ldrb	r1, [r3, #0]
 8006594:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	4413      	add	r3, r2
 800659a:	3334      	adds	r3, #52	; 0x34
 800659c:	460a      	mov	r2, r1
 800659e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065a0:	68ba      	ldr	r2, [r7, #8]
 80065a2:	69fb      	ldr	r3, [r7, #28]
 80065a4:	4413      	add	r3, r2
 80065a6:	781b      	ldrb	r3, [r3, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d006      	beq.n	80065ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065ac:	69fb      	ldr	r3, [r7, #28]
 80065ae:	3301      	adds	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	2b0f      	cmp	r3, #15
 80065b6:	d9e9      	bls.n	800658c <prvInitialiseNewTask+0x64>
 80065b8:	e000      	b.n	80065bc <prvInitialiseNewTask+0x94>
			{
				break;
 80065ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80065c4:	e003      	b.n	80065ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	2200      	movs	r2, #0
 80065ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80065ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065d0:	2b37      	cmp	r3, #55	; 0x37
 80065d2:	d901      	bls.n	80065d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80065d4:	2337      	movs	r3, #55	; 0x37
 80065d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80065d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80065de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80065e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80065e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065e6:	2200      	movs	r2, #0
 80065e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80065ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ec:	3304      	adds	r3, #4
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7ff f8be 	bl	8005770 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80065f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065f6:	3318      	adds	r3, #24
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7ff f8b9 	bl	8005770 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80065fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006600:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006602:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006606:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800660a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800660c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800660e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006612:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006616:	2200      	movs	r2, #0
 8006618:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	2200      	movs	r2, #0
 8006620:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006624:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006626:	3354      	adds	r3, #84	; 0x54
 8006628:	2260      	movs	r2, #96	; 0x60
 800662a:	2100      	movs	r1, #0
 800662c:	4618      	mov	r0, r3
 800662e:	f001 feb6 	bl	800839e <memset>
 8006632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006634:	4a0c      	ldr	r2, [pc, #48]	; (8006668 <prvInitialiseNewTask+0x140>)
 8006636:	659a      	str	r2, [r3, #88]	; 0x58
 8006638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800663a:	4a0c      	ldr	r2, [pc, #48]	; (800666c <prvInitialiseNewTask+0x144>)
 800663c:	65da      	str	r2, [r3, #92]	; 0x5c
 800663e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006640:	4a0b      	ldr	r2, [pc, #44]	; (8006670 <prvInitialiseNewTask+0x148>)
 8006642:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006644:	683a      	ldr	r2, [r7, #0]
 8006646:	68f9      	ldr	r1, [r7, #12]
 8006648:	69b8      	ldr	r0, [r7, #24]
 800664a:	f001 f941 	bl	80078d0 <pxPortInitialiseStack>
 800664e:	4602      	mov	r2, r0
 8006650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006652:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	2b00      	cmp	r3, #0
 8006658:	d002      	beq.n	8006660 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800665e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006660:	bf00      	nop
 8006662:	3720      	adds	r7, #32
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}
 8006668:	0800cd2c 	.word	0x0800cd2c
 800666c:	0800cd4c 	.word	0x0800cd4c
 8006670:	0800cd0c 	.word	0x0800cd0c

08006674 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006674:	b580      	push	{r7, lr}
 8006676:	b082      	sub	sp, #8
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800667c:	f001 fa52 	bl	8007b24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006680:	4b2d      	ldr	r3, [pc, #180]	; (8006738 <prvAddNewTaskToReadyList+0xc4>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3301      	adds	r3, #1
 8006686:	4a2c      	ldr	r2, [pc, #176]	; (8006738 <prvAddNewTaskToReadyList+0xc4>)
 8006688:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800668a:	4b2c      	ldr	r3, [pc, #176]	; (800673c <prvAddNewTaskToReadyList+0xc8>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d109      	bne.n	80066a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006692:	4a2a      	ldr	r2, [pc, #168]	; (800673c <prvAddNewTaskToReadyList+0xc8>)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006698:	4b27      	ldr	r3, [pc, #156]	; (8006738 <prvAddNewTaskToReadyList+0xc4>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d110      	bne.n	80066c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066a0:	f000 fc26 	bl	8006ef0 <prvInitialiseTaskLists>
 80066a4:	e00d      	b.n	80066c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066a6:	4b26      	ldr	r3, [pc, #152]	; (8006740 <prvAddNewTaskToReadyList+0xcc>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d109      	bne.n	80066c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066ae:	4b23      	ldr	r3, [pc, #140]	; (800673c <prvAddNewTaskToReadyList+0xc8>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d802      	bhi.n	80066c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066bc:	4a1f      	ldr	r2, [pc, #124]	; (800673c <prvAddNewTaskToReadyList+0xc8>)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066c2:	4b20      	ldr	r3, [pc, #128]	; (8006744 <prvAddNewTaskToReadyList+0xd0>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	3301      	adds	r3, #1
 80066c8:	4a1e      	ldr	r2, [pc, #120]	; (8006744 <prvAddNewTaskToReadyList+0xd0>)
 80066ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80066cc:	4b1d      	ldr	r3, [pc, #116]	; (8006744 <prvAddNewTaskToReadyList+0xd0>)
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066d8:	4b1b      	ldr	r3, [pc, #108]	; (8006748 <prvAddNewTaskToReadyList+0xd4>)
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	429a      	cmp	r2, r3
 80066de:	d903      	bls.n	80066e8 <prvAddNewTaskToReadyList+0x74>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066e4:	4a18      	ldr	r2, [pc, #96]	; (8006748 <prvAddNewTaskToReadyList+0xd4>)
 80066e6:	6013      	str	r3, [r2, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ec:	4613      	mov	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	4413      	add	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4a15      	ldr	r2, [pc, #84]	; (800674c <prvAddNewTaskToReadyList+0xd8>)
 80066f6:	441a      	add	r2, r3
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	3304      	adds	r3, #4
 80066fc:	4619      	mov	r1, r3
 80066fe:	4610      	mov	r0, r2
 8006700:	f7ff f843 	bl	800578a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006704:	f001 fa3e 	bl	8007b84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006708:	4b0d      	ldr	r3, [pc, #52]	; (8006740 <prvAddNewTaskToReadyList+0xcc>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00e      	beq.n	800672e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006710:	4b0a      	ldr	r3, [pc, #40]	; (800673c <prvAddNewTaskToReadyList+0xc8>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	429a      	cmp	r2, r3
 800671c:	d207      	bcs.n	800672e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800671e:	4b0c      	ldr	r3, [pc, #48]	; (8006750 <prvAddNewTaskToReadyList+0xdc>)
 8006720:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	f3bf 8f4f 	dsb	sy
 800672a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800672e:	bf00      	nop
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	200011e8 	.word	0x200011e8
 800673c:	20000d14 	.word	0x20000d14
 8006740:	200011f4 	.word	0x200011f4
 8006744:	20001204 	.word	0x20001204
 8006748:	200011f0 	.word	0x200011f0
 800674c:	20000d18 	.word	0x20000d18
 8006750:	e000ed04 	.word	0xe000ed04

08006754 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800675c:	2300      	movs	r3, #0
 800675e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d017      	beq.n	8006796 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006766:	4b13      	ldr	r3, [pc, #76]	; (80067b4 <vTaskDelay+0x60>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00a      	beq.n	8006784 <vTaskDelay+0x30>
	__asm volatile
 800676e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006772:	f383 8811 	msr	BASEPRI, r3
 8006776:	f3bf 8f6f 	isb	sy
 800677a:	f3bf 8f4f 	dsb	sy
 800677e:	60bb      	str	r3, [r7, #8]
}
 8006780:	bf00      	nop
 8006782:	e7fe      	b.n	8006782 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006784:	f000 f88a 	bl	800689c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006788:	2100      	movs	r1, #0
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fcfe 	bl	800718c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006790:	f000 f892 	bl	80068b8 <xTaskResumeAll>
 8006794:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d107      	bne.n	80067ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800679c:	4b06      	ldr	r3, [pc, #24]	; (80067b8 <vTaskDelay+0x64>)
 800679e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20001210 	.word	0x20001210
 80067b8:	e000ed04 	.word	0xe000ed04

080067bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b08a      	sub	sp, #40	; 0x28
 80067c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067c2:	2300      	movs	r3, #0
 80067c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80067c6:	2300      	movs	r3, #0
 80067c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067ca:	463a      	mov	r2, r7
 80067cc:	1d39      	adds	r1, r7, #4
 80067ce:	f107 0308 	add.w	r3, r7, #8
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe ff78 	bl	80056c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067d8:	6839      	ldr	r1, [r7, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	68ba      	ldr	r2, [r7, #8]
 80067de:	9202      	str	r2, [sp, #8]
 80067e0:	9301      	str	r3, [sp, #4]
 80067e2:	2300      	movs	r3, #0
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	2300      	movs	r3, #0
 80067e8:	460a      	mov	r2, r1
 80067ea:	4924      	ldr	r1, [pc, #144]	; (800687c <vTaskStartScheduler+0xc0>)
 80067ec:	4824      	ldr	r0, [pc, #144]	; (8006880 <vTaskStartScheduler+0xc4>)
 80067ee:	f7ff fdf9 	bl	80063e4 <xTaskCreateStatic>
 80067f2:	4603      	mov	r3, r0
 80067f4:	4a23      	ldr	r2, [pc, #140]	; (8006884 <vTaskStartScheduler+0xc8>)
 80067f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067f8:	4b22      	ldr	r3, [pc, #136]	; (8006884 <vTaskStartScheduler+0xc8>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d002      	beq.n	8006806 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006800:	2301      	movs	r3, #1
 8006802:	617b      	str	r3, [r7, #20]
 8006804:	e001      	b.n	800680a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006806:	2300      	movs	r3, #0
 8006808:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	2b01      	cmp	r3, #1
 800680e:	d102      	bne.n	8006816 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006810:	f000 fd10 	bl	8007234 <xTimerCreateTimerTask>
 8006814:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2b01      	cmp	r3, #1
 800681a:	d11b      	bne.n	8006854 <vTaskStartScheduler+0x98>
	__asm volatile
 800681c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006820:	f383 8811 	msr	BASEPRI, r3
 8006824:	f3bf 8f6f 	isb	sy
 8006828:	f3bf 8f4f 	dsb	sy
 800682c:	613b      	str	r3, [r7, #16]
}
 800682e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006830:	4b15      	ldr	r3, [pc, #84]	; (8006888 <vTaskStartScheduler+0xcc>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	3354      	adds	r3, #84	; 0x54
 8006836:	4a15      	ldr	r2, [pc, #84]	; (800688c <vTaskStartScheduler+0xd0>)
 8006838:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800683a:	4b15      	ldr	r3, [pc, #84]	; (8006890 <vTaskStartScheduler+0xd4>)
 800683c:	f04f 32ff 	mov.w	r2, #4294967295
 8006840:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006842:	4b14      	ldr	r3, [pc, #80]	; (8006894 <vTaskStartScheduler+0xd8>)
 8006844:	2201      	movs	r2, #1
 8006846:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006848:	4b13      	ldr	r3, [pc, #76]	; (8006898 <vTaskStartScheduler+0xdc>)
 800684a:	2200      	movs	r2, #0
 800684c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800684e:	f001 f8c7 	bl	80079e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006852:	e00e      	b.n	8006872 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685a:	d10a      	bne.n	8006872 <vTaskStartScheduler+0xb6>
	__asm volatile
 800685c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006860:	f383 8811 	msr	BASEPRI, r3
 8006864:	f3bf 8f6f 	isb	sy
 8006868:	f3bf 8f4f 	dsb	sy
 800686c:	60fb      	str	r3, [r7, #12]
}
 800686e:	bf00      	nop
 8006870:	e7fe      	b.n	8006870 <vTaskStartScheduler+0xb4>
}
 8006872:	bf00      	nop
 8006874:	3718      	adds	r7, #24
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	0800cc28 	.word	0x0800cc28
 8006880:	08006ec1 	.word	0x08006ec1
 8006884:	2000120c 	.word	0x2000120c
 8006888:	20000d14 	.word	0x20000d14
 800688c:	200001f8 	.word	0x200001f8
 8006890:	20001208 	.word	0x20001208
 8006894:	200011f4 	.word	0x200011f4
 8006898:	200011ec 	.word	0x200011ec

0800689c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80068a0:	4b04      	ldr	r3, [pc, #16]	; (80068b4 <vTaskSuspendAll+0x18>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3301      	adds	r3, #1
 80068a6:	4a03      	ldr	r2, [pc, #12]	; (80068b4 <vTaskSuspendAll+0x18>)
 80068a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068aa:	bf00      	nop
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	20001210 	.word	0x20001210

080068b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068c2:	2300      	movs	r3, #0
 80068c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80068c6:	4b42      	ldr	r3, [pc, #264]	; (80069d0 <xTaskResumeAll+0x118>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d10a      	bne.n	80068e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80068ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d2:	f383 8811 	msr	BASEPRI, r3
 80068d6:	f3bf 8f6f 	isb	sy
 80068da:	f3bf 8f4f 	dsb	sy
 80068de:	603b      	str	r3, [r7, #0]
}
 80068e0:	bf00      	nop
 80068e2:	e7fe      	b.n	80068e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068e4:	f001 f91e 	bl	8007b24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068e8:	4b39      	ldr	r3, [pc, #228]	; (80069d0 <xTaskResumeAll+0x118>)
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	3b01      	subs	r3, #1
 80068ee:	4a38      	ldr	r2, [pc, #224]	; (80069d0 <xTaskResumeAll+0x118>)
 80068f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068f2:	4b37      	ldr	r3, [pc, #220]	; (80069d0 <xTaskResumeAll+0x118>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d162      	bne.n	80069c0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068fa:	4b36      	ldr	r3, [pc, #216]	; (80069d4 <xTaskResumeAll+0x11c>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d05e      	beq.n	80069c0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006902:	e02f      	b.n	8006964 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006904:	4b34      	ldr	r3, [pc, #208]	; (80069d8 <xTaskResumeAll+0x120>)
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3318      	adds	r3, #24
 8006910:	4618      	mov	r0, r3
 8006912:	f7fe ff97 	bl	8005844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	3304      	adds	r3, #4
 800691a:	4618      	mov	r0, r3
 800691c:	f7fe ff92 	bl	8005844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006924:	4b2d      	ldr	r3, [pc, #180]	; (80069dc <xTaskResumeAll+0x124>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	429a      	cmp	r2, r3
 800692a:	d903      	bls.n	8006934 <xTaskResumeAll+0x7c>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006930:	4a2a      	ldr	r2, [pc, #168]	; (80069dc <xTaskResumeAll+0x124>)
 8006932:	6013      	str	r3, [r2, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006938:	4613      	mov	r3, r2
 800693a:	009b      	lsls	r3, r3, #2
 800693c:	4413      	add	r3, r2
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	4a27      	ldr	r2, [pc, #156]	; (80069e0 <xTaskResumeAll+0x128>)
 8006942:	441a      	add	r2, r3
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	3304      	adds	r3, #4
 8006948:	4619      	mov	r1, r3
 800694a:	4610      	mov	r0, r2
 800694c:	f7fe ff1d 	bl	800578a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006954:	4b23      	ldr	r3, [pc, #140]	; (80069e4 <xTaskResumeAll+0x12c>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695a:	429a      	cmp	r2, r3
 800695c:	d302      	bcc.n	8006964 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800695e:	4b22      	ldr	r3, [pc, #136]	; (80069e8 <xTaskResumeAll+0x130>)
 8006960:	2201      	movs	r2, #1
 8006962:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006964:	4b1c      	ldr	r3, [pc, #112]	; (80069d8 <xTaskResumeAll+0x120>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d1cb      	bne.n	8006904 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006972:	f000 fb5f 	bl	8007034 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006976:	4b1d      	ldr	r3, [pc, #116]	; (80069ec <xTaskResumeAll+0x134>)
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d010      	beq.n	80069a4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006982:	f000 f847 	bl	8006a14 <xTaskIncrementTick>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d002      	beq.n	8006992 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800698c:	4b16      	ldr	r3, [pc, #88]	; (80069e8 <xTaskResumeAll+0x130>)
 800698e:	2201      	movs	r2, #1
 8006990:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	3b01      	subs	r3, #1
 8006996:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1f1      	bne.n	8006982 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800699e:	4b13      	ldr	r3, [pc, #76]	; (80069ec <xTaskResumeAll+0x134>)
 80069a0:	2200      	movs	r2, #0
 80069a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069a4:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <xTaskResumeAll+0x130>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d009      	beq.n	80069c0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069ac:	2301      	movs	r3, #1
 80069ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069b0:	4b0f      	ldr	r3, [pc, #60]	; (80069f0 <xTaskResumeAll+0x138>)
 80069b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b6:	601a      	str	r2, [r3, #0]
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069c0:	f001 f8e0 	bl	8007b84 <vPortExitCritical>

	return xAlreadyYielded;
 80069c4:	68bb      	ldr	r3, [r7, #8]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3710      	adds	r7, #16
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	20001210 	.word	0x20001210
 80069d4:	200011e8 	.word	0x200011e8
 80069d8:	200011a8 	.word	0x200011a8
 80069dc:	200011f0 	.word	0x200011f0
 80069e0:	20000d18 	.word	0x20000d18
 80069e4:	20000d14 	.word	0x20000d14
 80069e8:	200011fc 	.word	0x200011fc
 80069ec:	200011f8 	.word	0x200011f8
 80069f0:	e000ed04 	.word	0xe000ed04

080069f4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069fa:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <xTaskGetTickCount+0x1c>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a00:	687b      	ldr	r3, [r7, #4]
}
 8006a02:	4618      	mov	r0, r3
 8006a04:	370c      	adds	r7, #12
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	200011ec 	.word	0x200011ec

08006a14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a1e:	4b4f      	ldr	r3, [pc, #316]	; (8006b5c <xTaskIncrementTick+0x148>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f040 808f 	bne.w	8006b46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a28:	4b4d      	ldr	r3, [pc, #308]	; (8006b60 <xTaskIncrementTick+0x14c>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3301      	adds	r3, #1
 8006a2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a30:	4a4b      	ldr	r2, [pc, #300]	; (8006b60 <xTaskIncrementTick+0x14c>)
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d120      	bne.n	8006a7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a3c:	4b49      	ldr	r3, [pc, #292]	; (8006b64 <xTaskIncrementTick+0x150>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00a      	beq.n	8006a5c <xTaskIncrementTick+0x48>
	__asm volatile
 8006a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4a:	f383 8811 	msr	BASEPRI, r3
 8006a4e:	f3bf 8f6f 	isb	sy
 8006a52:	f3bf 8f4f 	dsb	sy
 8006a56:	603b      	str	r3, [r7, #0]
}
 8006a58:	bf00      	nop
 8006a5a:	e7fe      	b.n	8006a5a <xTaskIncrementTick+0x46>
 8006a5c:	4b41      	ldr	r3, [pc, #260]	; (8006b64 <xTaskIncrementTick+0x150>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	60fb      	str	r3, [r7, #12]
 8006a62:	4b41      	ldr	r3, [pc, #260]	; (8006b68 <xTaskIncrementTick+0x154>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a3f      	ldr	r2, [pc, #252]	; (8006b64 <xTaskIncrementTick+0x150>)
 8006a68:	6013      	str	r3, [r2, #0]
 8006a6a:	4a3f      	ldr	r2, [pc, #252]	; (8006b68 <xTaskIncrementTick+0x154>)
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6013      	str	r3, [r2, #0]
 8006a70:	4b3e      	ldr	r3, [pc, #248]	; (8006b6c <xTaskIncrementTick+0x158>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3301      	adds	r3, #1
 8006a76:	4a3d      	ldr	r2, [pc, #244]	; (8006b6c <xTaskIncrementTick+0x158>)
 8006a78:	6013      	str	r3, [r2, #0]
 8006a7a:	f000 fadb 	bl	8007034 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a7e:	4b3c      	ldr	r3, [pc, #240]	; (8006b70 <xTaskIncrementTick+0x15c>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d349      	bcc.n	8006b1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006a88:	4b36      	ldr	r3, [pc, #216]	; (8006b64 <xTaskIncrementTick+0x150>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d104      	bne.n	8006a9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a92:	4b37      	ldr	r3, [pc, #220]	; (8006b70 <xTaskIncrementTick+0x15c>)
 8006a94:	f04f 32ff 	mov.w	r2, #4294967295
 8006a98:	601a      	str	r2, [r3, #0]
					break;
 8006a9a:	e03f      	b.n	8006b1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a9c:	4b31      	ldr	r3, [pc, #196]	; (8006b64 <xTaskIncrementTick+0x150>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	68db      	ldr	r3, [r3, #12]
 8006aa2:	68db      	ldr	r3, [r3, #12]
 8006aa4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006aac:	693a      	ldr	r2, [r7, #16]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d203      	bcs.n	8006abc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ab4:	4a2e      	ldr	r2, [pc, #184]	; (8006b70 <xTaskIncrementTick+0x15c>)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006aba:	e02f      	b.n	8006b1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	3304      	adds	r3, #4
 8006ac0:	4618      	mov	r0, r3
 8006ac2:	f7fe febf 	bl	8005844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d004      	beq.n	8006ad8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	3318      	adds	r3, #24
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7fe feb6 	bl	8005844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	4b25      	ldr	r3, [pc, #148]	; (8006b74 <xTaskIncrementTick+0x160>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d903      	bls.n	8006aec <xTaskIncrementTick+0xd8>
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ae8:	4a22      	ldr	r2, [pc, #136]	; (8006b74 <xTaskIncrementTick+0x160>)
 8006aea:	6013      	str	r3, [r2, #0]
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006af0:	4613      	mov	r3, r2
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	009b      	lsls	r3, r3, #2
 8006af8:	4a1f      	ldr	r2, [pc, #124]	; (8006b78 <xTaskIncrementTick+0x164>)
 8006afa:	441a      	add	r2, r3
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	3304      	adds	r3, #4
 8006b00:	4619      	mov	r1, r3
 8006b02:	4610      	mov	r0, r2
 8006b04:	f7fe fe41 	bl	800578a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b08:	68bb      	ldr	r3, [r7, #8]
 8006b0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0c:	4b1b      	ldr	r3, [pc, #108]	; (8006b7c <xTaskIncrementTick+0x168>)
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b12:	429a      	cmp	r2, r3
 8006b14:	d3b8      	bcc.n	8006a88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b16:	2301      	movs	r3, #1
 8006b18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b1a:	e7b5      	b.n	8006a88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b1c:	4b17      	ldr	r3, [pc, #92]	; (8006b7c <xTaskIncrementTick+0x168>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b22:	4915      	ldr	r1, [pc, #84]	; (8006b78 <xTaskIncrementTick+0x164>)
 8006b24:	4613      	mov	r3, r2
 8006b26:	009b      	lsls	r3, r3, #2
 8006b28:	4413      	add	r3, r2
 8006b2a:	009b      	lsls	r3, r3, #2
 8006b2c:	440b      	add	r3, r1
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d901      	bls.n	8006b38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006b34:	2301      	movs	r3, #1
 8006b36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b38:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <xTaskIncrementTick+0x16c>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d007      	beq.n	8006b50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e004      	b.n	8006b50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b46:	4b0f      	ldr	r3, [pc, #60]	; (8006b84 <xTaskIncrementTick+0x170>)
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	4a0d      	ldr	r2, [pc, #52]	; (8006b84 <xTaskIncrementTick+0x170>)
 8006b4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b50:	697b      	ldr	r3, [r7, #20]
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3718      	adds	r7, #24
 8006b56:	46bd      	mov	sp, r7
 8006b58:	bd80      	pop	{r7, pc}
 8006b5a:	bf00      	nop
 8006b5c:	20001210 	.word	0x20001210
 8006b60:	200011ec 	.word	0x200011ec
 8006b64:	200011a0 	.word	0x200011a0
 8006b68:	200011a4 	.word	0x200011a4
 8006b6c:	20001200 	.word	0x20001200
 8006b70:	20001208 	.word	0x20001208
 8006b74:	200011f0 	.word	0x200011f0
 8006b78:	20000d18 	.word	0x20000d18
 8006b7c:	20000d14 	.word	0x20000d14
 8006b80:	200011fc 	.word	0x200011fc
 8006b84:	200011f8 	.word	0x200011f8

08006b88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b085      	sub	sp, #20
 8006b8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006b8e:	4b2a      	ldr	r3, [pc, #168]	; (8006c38 <vTaskSwitchContext+0xb0>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d003      	beq.n	8006b9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006b96:	4b29      	ldr	r3, [pc, #164]	; (8006c3c <vTaskSwitchContext+0xb4>)
 8006b98:	2201      	movs	r2, #1
 8006b9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006b9c:	e046      	b.n	8006c2c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006b9e:	4b27      	ldr	r3, [pc, #156]	; (8006c3c <vTaskSwitchContext+0xb4>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba4:	4b26      	ldr	r3, [pc, #152]	; (8006c40 <vTaskSwitchContext+0xb8>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	60fb      	str	r3, [r7, #12]
 8006baa:	e010      	b.n	8006bce <vTaskSwitchContext+0x46>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	607b      	str	r3, [r7, #4]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <vTaskSwitchContext+0x3e>
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	3b01      	subs	r3, #1
 8006bcc:	60fb      	str	r3, [r7, #12]
 8006bce:	491d      	ldr	r1, [pc, #116]	; (8006c44 <vTaskSwitchContext+0xbc>)
 8006bd0:	68fa      	ldr	r2, [r7, #12]
 8006bd2:	4613      	mov	r3, r2
 8006bd4:	009b      	lsls	r3, r3, #2
 8006bd6:	4413      	add	r3, r2
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	440b      	add	r3, r1
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d0e4      	beq.n	8006bac <vTaskSwitchContext+0x24>
 8006be2:	68fa      	ldr	r2, [r7, #12]
 8006be4:	4613      	mov	r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4413      	add	r3, r2
 8006bea:	009b      	lsls	r3, r3, #2
 8006bec:	4a15      	ldr	r2, [pc, #84]	; (8006c44 <vTaskSwitchContext+0xbc>)
 8006bee:	4413      	add	r3, r2
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	685a      	ldr	r2, [r3, #4]
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	605a      	str	r2, [r3, #4]
 8006bfc:	68bb      	ldr	r3, [r7, #8]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	3308      	adds	r3, #8
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d104      	bne.n	8006c12 <vTaskSwitchContext+0x8a>
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	685a      	ldr	r2, [r3, #4]
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	605a      	str	r2, [r3, #4]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	68db      	ldr	r3, [r3, #12]
 8006c18:	4a0b      	ldr	r2, [pc, #44]	; (8006c48 <vTaskSwitchContext+0xc0>)
 8006c1a:	6013      	str	r3, [r2, #0]
 8006c1c:	4a08      	ldr	r2, [pc, #32]	; (8006c40 <vTaskSwitchContext+0xb8>)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c22:	4b09      	ldr	r3, [pc, #36]	; (8006c48 <vTaskSwitchContext+0xc0>)
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3354      	adds	r3, #84	; 0x54
 8006c28:	4a08      	ldr	r2, [pc, #32]	; (8006c4c <vTaskSwitchContext+0xc4>)
 8006c2a:	6013      	str	r3, [r2, #0]
}
 8006c2c:	bf00      	nop
 8006c2e:	3714      	adds	r7, #20
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	20001210 	.word	0x20001210
 8006c3c:	200011fc 	.word	0x200011fc
 8006c40:	200011f0 	.word	0x200011f0
 8006c44:	20000d18 	.word	0x20000d18
 8006c48:	20000d14 	.word	0x20000d14
 8006c4c:	200001f8 	.word	0x200001f8

08006c50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d10a      	bne.n	8006c76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c64:	f383 8811 	msr	BASEPRI, r3
 8006c68:	f3bf 8f6f 	isb	sy
 8006c6c:	f3bf 8f4f 	dsb	sy
 8006c70:	60fb      	str	r3, [r7, #12]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c76:	4b07      	ldr	r3, [pc, #28]	; (8006c94 <vTaskPlaceOnEventList+0x44>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3318      	adds	r3, #24
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f7fe fda7 	bl	80057d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006c84:	2101      	movs	r1, #1
 8006c86:	6838      	ldr	r0, [r7, #0]
 8006c88:	f000 fa80 	bl	800718c <prvAddCurrentTaskToDelayedList>
}
 8006c8c:	bf00      	nop
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20000d14 	.word	0x20000d14

08006c98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b086      	sub	sp, #24
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d10a      	bne.n	8006cc0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	617b      	str	r3, [r7, #20]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cc0:	4b0a      	ldr	r3, [pc, #40]	; (8006cec <vTaskPlaceOnEventListRestricted+0x54>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	3318      	adds	r3, #24
 8006cc6:	4619      	mov	r1, r3
 8006cc8:	68f8      	ldr	r0, [r7, #12]
 8006cca:	f7fe fd5e 	bl	800578a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d002      	beq.n	8006cda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006cd4:	f04f 33ff 	mov.w	r3, #4294967295
 8006cd8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006cda:	6879      	ldr	r1, [r7, #4]
 8006cdc:	68b8      	ldr	r0, [r7, #8]
 8006cde:	f000 fa55 	bl	800718c <prvAddCurrentTaskToDelayedList>
	}
 8006ce2:	bf00      	nop
 8006ce4:	3718      	adds	r7, #24
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	bd80      	pop	{r7, pc}
 8006cea:	bf00      	nop
 8006cec:	20000d14 	.word	0x20000d14

08006cf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b086      	sub	sp, #24
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68db      	ldr	r3, [r3, #12]
 8006cfc:	68db      	ldr	r3, [r3, #12]
 8006cfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10a      	bne.n	8006d1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	60fb      	str	r3, [r7, #12]
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	3318      	adds	r3, #24
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7fe fd8f 	bl	8005844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d26:	4b1e      	ldr	r3, [pc, #120]	; (8006da0 <xTaskRemoveFromEventList+0xb0>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d11d      	bne.n	8006d6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	3304      	adds	r3, #4
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fe fd86 	bl	8005844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d3c:	4b19      	ldr	r3, [pc, #100]	; (8006da4 <xTaskRemoveFromEventList+0xb4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	429a      	cmp	r2, r3
 8006d42:	d903      	bls.n	8006d4c <xTaskRemoveFromEventList+0x5c>
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d48:	4a16      	ldr	r2, [pc, #88]	; (8006da4 <xTaskRemoveFromEventList+0xb4>)
 8006d4a:	6013      	str	r3, [r2, #0]
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	4a13      	ldr	r2, [pc, #76]	; (8006da8 <xTaskRemoveFromEventList+0xb8>)
 8006d5a:	441a      	add	r2, r3
 8006d5c:	693b      	ldr	r3, [r7, #16]
 8006d5e:	3304      	adds	r3, #4
 8006d60:	4619      	mov	r1, r3
 8006d62:	4610      	mov	r0, r2
 8006d64:	f7fe fd11 	bl	800578a <vListInsertEnd>
 8006d68:	e005      	b.n	8006d76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	3318      	adds	r3, #24
 8006d6e:	4619      	mov	r1, r3
 8006d70:	480e      	ldr	r0, [pc, #56]	; (8006dac <xTaskRemoveFromEventList+0xbc>)
 8006d72:	f7fe fd0a 	bl	800578a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d7a:	4b0d      	ldr	r3, [pc, #52]	; (8006db0 <xTaskRemoveFromEventList+0xc0>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d905      	bls.n	8006d90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006d84:	2301      	movs	r3, #1
 8006d86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006d88:	4b0a      	ldr	r3, [pc, #40]	; (8006db4 <xTaskRemoveFromEventList+0xc4>)
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	e001      	b.n	8006d94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006d94:	697b      	ldr	r3, [r7, #20]
}
 8006d96:	4618      	mov	r0, r3
 8006d98:	3718      	adds	r7, #24
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}
 8006d9e:	bf00      	nop
 8006da0:	20001210 	.word	0x20001210
 8006da4:	200011f0 	.word	0x200011f0
 8006da8:	20000d18 	.word	0x20000d18
 8006dac:	200011a8 	.word	0x200011a8
 8006db0:	20000d14 	.word	0x20000d14
 8006db4:	200011fc 	.word	0x200011fc

08006db8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006db8:	b480      	push	{r7}
 8006dba:	b083      	sub	sp, #12
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006dc0:	4b06      	ldr	r3, [pc, #24]	; (8006ddc <vTaskInternalSetTimeOutState+0x24>)
 8006dc2:	681a      	ldr	r2, [r3, #0]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006dc8:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <vTaskInternalSetTimeOutState+0x28>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	605a      	str	r2, [r3, #4]
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr
 8006ddc:	20001200 	.word	0x20001200
 8006de0:	200011ec 	.word	0x200011ec

08006de4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b088      	sub	sp, #32
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
 8006dec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d10a      	bne.n	8006e0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006df8:	f383 8811 	msr	BASEPRI, r3
 8006dfc:	f3bf 8f6f 	isb	sy
 8006e00:	f3bf 8f4f 	dsb	sy
 8006e04:	613b      	str	r3, [r7, #16]
}
 8006e06:	bf00      	nop
 8006e08:	e7fe      	b.n	8006e08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d10a      	bne.n	8006e26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e14:	f383 8811 	msr	BASEPRI, r3
 8006e18:	f3bf 8f6f 	isb	sy
 8006e1c:	f3bf 8f4f 	dsb	sy
 8006e20:	60fb      	str	r3, [r7, #12]
}
 8006e22:	bf00      	nop
 8006e24:	e7fe      	b.n	8006e24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006e26:	f000 fe7d 	bl	8007b24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ea0 <xTaskCheckForTimeOut+0xbc>)
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	69ba      	ldr	r2, [r7, #24]
 8006e36:	1ad3      	subs	r3, r2, r3
 8006e38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e42:	d102      	bne.n	8006e4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e44:	2300      	movs	r3, #0
 8006e46:	61fb      	str	r3, [r7, #28]
 8006e48:	e023      	b.n	8006e92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681a      	ldr	r2, [r3, #0]
 8006e4e:	4b15      	ldr	r3, [pc, #84]	; (8006ea4 <xTaskCheckForTimeOut+0xc0>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	429a      	cmp	r2, r3
 8006e54:	d007      	beq.n	8006e66 <xTaskCheckForTimeOut+0x82>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	69ba      	ldr	r2, [r7, #24]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d302      	bcc.n	8006e66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006e60:	2301      	movs	r3, #1
 8006e62:	61fb      	str	r3, [r7, #28]
 8006e64:	e015      	b.n	8006e92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d20b      	bcs.n	8006e88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	1ad2      	subs	r2, r2, r3
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f7ff ff9b 	bl	8006db8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	61fb      	str	r3, [r7, #28]
 8006e86:	e004      	b.n	8006e92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006e92:	f000 fe77 	bl	8007b84 <vPortExitCritical>

	return xReturn;
 8006e96:	69fb      	ldr	r3, [r7, #28]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3720      	adds	r7, #32
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}
 8006ea0:	200011ec 	.word	0x200011ec
 8006ea4:	20001200 	.word	0x20001200

08006ea8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006eac:	4b03      	ldr	r3, [pc, #12]	; (8006ebc <vTaskMissedYield+0x14>)
 8006eae:	2201      	movs	r2, #1
 8006eb0:	601a      	str	r2, [r3, #0]
}
 8006eb2:	bf00      	nop
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eba:	4770      	bx	lr
 8006ebc:	200011fc 	.word	0x200011fc

08006ec0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b082      	sub	sp, #8
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ec8:	f000 f852 	bl	8006f70 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ecc:	4b06      	ldr	r3, [pc, #24]	; (8006ee8 <prvIdleTask+0x28>)
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2b01      	cmp	r3, #1
 8006ed2:	d9f9      	bls.n	8006ec8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006ed4:	4b05      	ldr	r3, [pc, #20]	; (8006eec <prvIdleTask+0x2c>)
 8006ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eda:	601a      	str	r2, [r3, #0]
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006ee4:	e7f0      	b.n	8006ec8 <prvIdleTask+0x8>
 8006ee6:	bf00      	nop
 8006ee8:	20000d18 	.word	0x20000d18
 8006eec:	e000ed04 	.word	0xe000ed04

08006ef0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	607b      	str	r3, [r7, #4]
 8006efa:	e00c      	b.n	8006f16 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	4613      	mov	r3, r2
 8006f00:	009b      	lsls	r3, r3, #2
 8006f02:	4413      	add	r3, r2
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4a12      	ldr	r2, [pc, #72]	; (8006f50 <prvInitialiseTaskLists+0x60>)
 8006f08:	4413      	add	r3, r2
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe fc10 	bl	8005730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	3301      	adds	r3, #1
 8006f14:	607b      	str	r3, [r7, #4]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2b37      	cmp	r3, #55	; 0x37
 8006f1a:	d9ef      	bls.n	8006efc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f1c:	480d      	ldr	r0, [pc, #52]	; (8006f54 <prvInitialiseTaskLists+0x64>)
 8006f1e:	f7fe fc07 	bl	8005730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f22:	480d      	ldr	r0, [pc, #52]	; (8006f58 <prvInitialiseTaskLists+0x68>)
 8006f24:	f7fe fc04 	bl	8005730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f28:	480c      	ldr	r0, [pc, #48]	; (8006f5c <prvInitialiseTaskLists+0x6c>)
 8006f2a:	f7fe fc01 	bl	8005730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f2e:	480c      	ldr	r0, [pc, #48]	; (8006f60 <prvInitialiseTaskLists+0x70>)
 8006f30:	f7fe fbfe 	bl	8005730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f34:	480b      	ldr	r0, [pc, #44]	; (8006f64 <prvInitialiseTaskLists+0x74>)
 8006f36:	f7fe fbfb 	bl	8005730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	; (8006f68 <prvInitialiseTaskLists+0x78>)
 8006f3c:	4a05      	ldr	r2, [pc, #20]	; (8006f54 <prvInitialiseTaskLists+0x64>)
 8006f3e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f40:	4b0a      	ldr	r3, [pc, #40]	; (8006f6c <prvInitialiseTaskLists+0x7c>)
 8006f42:	4a05      	ldr	r2, [pc, #20]	; (8006f58 <prvInitialiseTaskLists+0x68>)
 8006f44:	601a      	str	r2, [r3, #0]
}
 8006f46:	bf00      	nop
 8006f48:	3708      	adds	r7, #8
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	20000d18 	.word	0x20000d18
 8006f54:	20001178 	.word	0x20001178
 8006f58:	2000118c 	.word	0x2000118c
 8006f5c:	200011a8 	.word	0x200011a8
 8006f60:	200011bc 	.word	0x200011bc
 8006f64:	200011d4 	.word	0x200011d4
 8006f68:	200011a0 	.word	0x200011a0
 8006f6c:	200011a4 	.word	0x200011a4

08006f70 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006f76:	e019      	b.n	8006fac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006f78:	f000 fdd4 	bl	8007b24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f7c:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <prvCheckTasksWaitingTermination+0x50>)
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	3304      	adds	r3, #4
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f7fe fc5b 	bl	8005844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006f8e:	4b0d      	ldr	r3, [pc, #52]	; (8006fc4 <prvCheckTasksWaitingTermination+0x54>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	3b01      	subs	r3, #1
 8006f94:	4a0b      	ldr	r2, [pc, #44]	; (8006fc4 <prvCheckTasksWaitingTermination+0x54>)
 8006f96:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006f98:	4b0b      	ldr	r3, [pc, #44]	; (8006fc8 <prvCheckTasksWaitingTermination+0x58>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	3b01      	subs	r3, #1
 8006f9e:	4a0a      	ldr	r2, [pc, #40]	; (8006fc8 <prvCheckTasksWaitingTermination+0x58>)
 8006fa0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fa2:	f000 fdef 	bl	8007b84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 f810 	bl	8006fcc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fac:	4b06      	ldr	r3, [pc, #24]	; (8006fc8 <prvCheckTasksWaitingTermination+0x58>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d1e1      	bne.n	8006f78 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop
 8006fb8:	3708      	adds	r7, #8
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	200011bc 	.word	0x200011bc
 8006fc4:	200011e8 	.word	0x200011e8
 8006fc8:	200011d0 	.word	0x200011d0

08006fcc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	3354      	adds	r3, #84	; 0x54
 8006fd8:	4618      	mov	r0, r3
 8006fda:	f002 f905 	bl	80091e8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d108      	bne.n	8006ffa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 ff87 	bl	8007f00 <vPortFree>
				vPortFree( pxTCB );
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 ff84 	bl	8007f00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ff8:	e018      	b.n	800702c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007000:	2b01      	cmp	r3, #1
 8007002:	d103      	bne.n	800700c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007004:	6878      	ldr	r0, [r7, #4]
 8007006:	f000 ff7b 	bl	8007f00 <vPortFree>
	}
 800700a:	e00f      	b.n	800702c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007012:	2b02      	cmp	r3, #2
 8007014:	d00a      	beq.n	800702c <prvDeleteTCB+0x60>
	__asm volatile
 8007016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701a:	f383 8811 	msr	BASEPRI, r3
 800701e:	f3bf 8f6f 	isb	sy
 8007022:	f3bf 8f4f 	dsb	sy
 8007026:	60fb      	str	r3, [r7, #12]
}
 8007028:	bf00      	nop
 800702a:	e7fe      	b.n	800702a <prvDeleteTCB+0x5e>
	}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800703a:	4b0c      	ldr	r3, [pc, #48]	; (800706c <prvResetNextTaskUnblockTime+0x38>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d104      	bne.n	800704e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007044:	4b0a      	ldr	r3, [pc, #40]	; (8007070 <prvResetNextTaskUnblockTime+0x3c>)
 8007046:	f04f 32ff 	mov.w	r2, #4294967295
 800704a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800704c:	e008      	b.n	8007060 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800704e:	4b07      	ldr	r3, [pc, #28]	; (800706c <prvResetNextTaskUnblockTime+0x38>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	68db      	ldr	r3, [r3, #12]
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	685b      	ldr	r3, [r3, #4]
 800705c:	4a04      	ldr	r2, [pc, #16]	; (8007070 <prvResetNextTaskUnblockTime+0x3c>)
 800705e:	6013      	str	r3, [r2, #0]
}
 8007060:	bf00      	nop
 8007062:	370c      	adds	r7, #12
 8007064:	46bd      	mov	sp, r7
 8007066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706a:	4770      	bx	lr
 800706c:	200011a0 	.word	0x200011a0
 8007070:	20001208 	.word	0x20001208

08007074 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800707a:	4b0b      	ldr	r3, [pc, #44]	; (80070a8 <xTaskGetSchedulerState+0x34>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d102      	bne.n	8007088 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007082:	2301      	movs	r3, #1
 8007084:	607b      	str	r3, [r7, #4]
 8007086:	e008      	b.n	800709a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007088:	4b08      	ldr	r3, [pc, #32]	; (80070ac <xTaskGetSchedulerState+0x38>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d102      	bne.n	8007096 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007090:	2302      	movs	r3, #2
 8007092:	607b      	str	r3, [r7, #4]
 8007094:	e001      	b.n	800709a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007096:	2300      	movs	r3, #0
 8007098:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800709a:	687b      	ldr	r3, [r7, #4]
	}
 800709c:	4618      	mov	r0, r3
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr
 80070a8:	200011f4 	.word	0x200011f4
 80070ac:	20001210 	.word	0x20001210

080070b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80070bc:	2300      	movs	r3, #0
 80070be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d056      	beq.n	8007174 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80070c6:	4b2e      	ldr	r3, [pc, #184]	; (8007180 <xTaskPriorityDisinherit+0xd0>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	693a      	ldr	r2, [r7, #16]
 80070cc:	429a      	cmp	r2, r3
 80070ce:	d00a      	beq.n	80070e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	f383 8811 	msr	BASEPRI, r3
 80070d8:	f3bf 8f6f 	isb	sy
 80070dc:	f3bf 8f4f 	dsb	sy
 80070e0:	60fb      	str	r3, [r7, #12]
}
 80070e2:	bf00      	nop
 80070e4:	e7fe      	b.n	80070e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d10a      	bne.n	8007104 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	60bb      	str	r3, [r7, #8]
}
 8007100:	bf00      	nop
 8007102:	e7fe      	b.n	8007102 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007104:	693b      	ldr	r3, [r7, #16]
 8007106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007108:	1e5a      	subs	r2, r3, #1
 800710a:	693b      	ldr	r3, [r7, #16]
 800710c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007112:	693b      	ldr	r3, [r7, #16]
 8007114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007116:	429a      	cmp	r2, r3
 8007118:	d02c      	beq.n	8007174 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711e:	2b00      	cmp	r3, #0
 8007120:	d128      	bne.n	8007174 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007122:	693b      	ldr	r3, [r7, #16]
 8007124:	3304      	adds	r3, #4
 8007126:	4618      	mov	r0, r3
 8007128:	f7fe fb8c 	bl	8005844 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007138:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007140:	693b      	ldr	r3, [r7, #16]
 8007142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <xTaskPriorityDisinherit+0xd4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	429a      	cmp	r2, r3
 800714a:	d903      	bls.n	8007154 <xTaskPriorityDisinherit+0xa4>
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	4a0c      	ldr	r2, [pc, #48]	; (8007184 <xTaskPriorityDisinherit+0xd4>)
 8007152:	6013      	str	r3, [r2, #0]
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007158:	4613      	mov	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	4a09      	ldr	r2, [pc, #36]	; (8007188 <xTaskPriorityDisinherit+0xd8>)
 8007162:	441a      	add	r2, r3
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	3304      	adds	r3, #4
 8007168:	4619      	mov	r1, r3
 800716a:	4610      	mov	r0, r2
 800716c:	f7fe fb0d 	bl	800578a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007170:	2301      	movs	r3, #1
 8007172:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007174:	697b      	ldr	r3, [r7, #20]
	}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	bd80      	pop	{r7, pc}
 800717e:	bf00      	nop
 8007180:	20000d14 	.word	0x20000d14
 8007184:	200011f0 	.word	0x200011f0
 8007188:	20000d18 	.word	0x20000d18

0800718c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b084      	sub	sp, #16
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007196:	4b21      	ldr	r3, [pc, #132]	; (800721c <prvAddCurrentTaskToDelayedList+0x90>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800719c:	4b20      	ldr	r3, [pc, #128]	; (8007220 <prvAddCurrentTaskToDelayedList+0x94>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	3304      	adds	r3, #4
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7fe fb4e 	bl	8005844 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071ae:	d10a      	bne.n	80071c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d007      	beq.n	80071c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071b6:	4b1a      	ldr	r3, [pc, #104]	; (8007220 <prvAddCurrentTaskToDelayedList+0x94>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3304      	adds	r3, #4
 80071bc:	4619      	mov	r1, r3
 80071be:	4819      	ldr	r0, [pc, #100]	; (8007224 <prvAddCurrentTaskToDelayedList+0x98>)
 80071c0:	f7fe fae3 	bl	800578a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80071c4:	e026      	b.n	8007214 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80071c6:	68fa      	ldr	r2, [r7, #12]
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4413      	add	r3, r2
 80071cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80071ce:	4b14      	ldr	r3, [pc, #80]	; (8007220 <prvAddCurrentTaskToDelayedList+0x94>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	429a      	cmp	r2, r3
 80071dc:	d209      	bcs.n	80071f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071de:	4b12      	ldr	r3, [pc, #72]	; (8007228 <prvAddCurrentTaskToDelayedList+0x9c>)
 80071e0:	681a      	ldr	r2, [r3, #0]
 80071e2:	4b0f      	ldr	r3, [pc, #60]	; (8007220 <prvAddCurrentTaskToDelayedList+0x94>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	3304      	adds	r3, #4
 80071e8:	4619      	mov	r1, r3
 80071ea:	4610      	mov	r0, r2
 80071ec:	f7fe faf1 	bl	80057d2 <vListInsert>
}
 80071f0:	e010      	b.n	8007214 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071f2:	4b0e      	ldr	r3, [pc, #56]	; (800722c <prvAddCurrentTaskToDelayedList+0xa0>)
 80071f4:	681a      	ldr	r2, [r3, #0]
 80071f6:	4b0a      	ldr	r3, [pc, #40]	; (8007220 <prvAddCurrentTaskToDelayedList+0x94>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3304      	adds	r3, #4
 80071fc:	4619      	mov	r1, r3
 80071fe:	4610      	mov	r0, r2
 8007200:	f7fe fae7 	bl	80057d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007204:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	429a      	cmp	r2, r3
 800720c:	d202      	bcs.n	8007214 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800720e:	4a08      	ldr	r2, [pc, #32]	; (8007230 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	6013      	str	r3, [r2, #0]
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	200011ec 	.word	0x200011ec
 8007220:	20000d14 	.word	0x20000d14
 8007224:	200011d4 	.word	0x200011d4
 8007228:	200011a4 	.word	0x200011a4
 800722c:	200011a0 	.word	0x200011a0
 8007230:	20001208 	.word	0x20001208

08007234 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b08a      	sub	sp, #40	; 0x28
 8007238:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800723a:	2300      	movs	r3, #0
 800723c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800723e:	f000 fb07 	bl	8007850 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007242:	4b1c      	ldr	r3, [pc, #112]	; (80072b4 <xTimerCreateTimerTask+0x80>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d021      	beq.n	800728e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800724a:	2300      	movs	r3, #0
 800724c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007252:	1d3a      	adds	r2, r7, #4
 8007254:	f107 0108 	add.w	r1, r7, #8
 8007258:	f107 030c 	add.w	r3, r7, #12
 800725c:	4618      	mov	r0, r3
 800725e:	f7fe fa4d 	bl	80056fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	9202      	str	r2, [sp, #8]
 800726a:	9301      	str	r3, [sp, #4]
 800726c:	2302      	movs	r3, #2
 800726e:	9300      	str	r3, [sp, #0]
 8007270:	2300      	movs	r3, #0
 8007272:	460a      	mov	r2, r1
 8007274:	4910      	ldr	r1, [pc, #64]	; (80072b8 <xTimerCreateTimerTask+0x84>)
 8007276:	4811      	ldr	r0, [pc, #68]	; (80072bc <xTimerCreateTimerTask+0x88>)
 8007278:	f7ff f8b4 	bl	80063e4 <xTaskCreateStatic>
 800727c:	4603      	mov	r3, r0
 800727e:	4a10      	ldr	r2, [pc, #64]	; (80072c0 <xTimerCreateTimerTask+0x8c>)
 8007280:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007282:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <xTimerCreateTimerTask+0x8c>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d001      	beq.n	800728e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800728a:	2301      	movs	r3, #1
 800728c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800728e:	697b      	ldr	r3, [r7, #20]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d10a      	bne.n	80072aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007298:	f383 8811 	msr	BASEPRI, r3
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f3bf 8f4f 	dsb	sy
 80072a4:	613b      	str	r3, [r7, #16]
}
 80072a6:	bf00      	nop
 80072a8:	e7fe      	b.n	80072a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80072aa:	697b      	ldr	r3, [r7, #20]
}
 80072ac:	4618      	mov	r0, r3
 80072ae:	3718      	adds	r7, #24
 80072b0:	46bd      	mov	sp, r7
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	20001244 	.word	0x20001244
 80072b8:	0800cc30 	.word	0x0800cc30
 80072bc:	080073f9 	.word	0x080073f9
 80072c0:	20001248 	.word	0x20001248

080072c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b08a      	sub	sp, #40	; 0x28
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	60f8      	str	r0, [r7, #12]
 80072cc:	60b9      	str	r1, [r7, #8]
 80072ce:	607a      	str	r2, [r7, #4]
 80072d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80072d2:	2300      	movs	r3, #0
 80072d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	623b      	str	r3, [r7, #32]
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80072f2:	4b1a      	ldr	r3, [pc, #104]	; (800735c <xTimerGenericCommand+0x98>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d02a      	beq.n	8007350 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007306:	68bb      	ldr	r3, [r7, #8]
 8007308:	2b05      	cmp	r3, #5
 800730a:	dc18      	bgt.n	800733e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800730c:	f7ff feb2 	bl	8007074 <xTaskGetSchedulerState>
 8007310:	4603      	mov	r3, r0
 8007312:	2b02      	cmp	r3, #2
 8007314:	d109      	bne.n	800732a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007316:	4b11      	ldr	r3, [pc, #68]	; (800735c <xTimerGenericCommand+0x98>)
 8007318:	6818      	ldr	r0, [r3, #0]
 800731a:	f107 0110 	add.w	r1, r7, #16
 800731e:	2300      	movs	r3, #0
 8007320:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007322:	f7fe fbf7 	bl	8005b14 <xQueueGenericSend>
 8007326:	6278      	str	r0, [r7, #36]	; 0x24
 8007328:	e012      	b.n	8007350 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800732a:	4b0c      	ldr	r3, [pc, #48]	; (800735c <xTimerGenericCommand+0x98>)
 800732c:	6818      	ldr	r0, [r3, #0]
 800732e:	f107 0110 	add.w	r1, r7, #16
 8007332:	2300      	movs	r3, #0
 8007334:	2200      	movs	r2, #0
 8007336:	f7fe fbed 	bl	8005b14 <xQueueGenericSend>
 800733a:	6278      	str	r0, [r7, #36]	; 0x24
 800733c:	e008      	b.n	8007350 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800733e:	4b07      	ldr	r3, [pc, #28]	; (800735c <xTimerGenericCommand+0x98>)
 8007340:	6818      	ldr	r0, [r3, #0]
 8007342:	f107 0110 	add.w	r1, r7, #16
 8007346:	2300      	movs	r3, #0
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	f7fe fce1 	bl	8005d10 <xQueueGenericSendFromISR>
 800734e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007352:	4618      	mov	r0, r3
 8007354:	3728      	adds	r7, #40	; 0x28
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	20001244 	.word	0x20001244

08007360 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b088      	sub	sp, #32
 8007364:	af02      	add	r7, sp, #8
 8007366:	6078      	str	r0, [r7, #4]
 8007368:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800736a:	4b22      	ldr	r3, [pc, #136]	; (80073f4 <prvProcessExpiredTimer+0x94>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	68db      	ldr	r3, [r3, #12]
 8007370:	68db      	ldr	r3, [r3, #12]
 8007372:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	3304      	adds	r3, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe fa63 	bl	8005844 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007384:	f003 0304 	and.w	r3, r3, #4
 8007388:	2b00      	cmp	r3, #0
 800738a:	d022      	beq.n	80073d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800738c:	697b      	ldr	r3, [r7, #20]
 800738e:	699a      	ldr	r2, [r3, #24]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	18d1      	adds	r1, r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	683a      	ldr	r2, [r7, #0]
 8007398:	6978      	ldr	r0, [r7, #20]
 800739a:	f000 f8d1 	bl	8007540 <prvInsertTimerInActiveList>
 800739e:	4603      	mov	r3, r0
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d01f      	beq.n	80073e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073a4:	2300      	movs	r3, #0
 80073a6:	9300      	str	r3, [sp, #0]
 80073a8:	2300      	movs	r3, #0
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	2100      	movs	r1, #0
 80073ae:	6978      	ldr	r0, [r7, #20]
 80073b0:	f7ff ff88 	bl	80072c4 <xTimerGenericCommand>
 80073b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80073b6:	693b      	ldr	r3, [r7, #16]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d113      	bne.n	80073e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80073bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c0:	f383 8811 	msr	BASEPRI, r3
 80073c4:	f3bf 8f6f 	isb	sy
 80073c8:	f3bf 8f4f 	dsb	sy
 80073cc:	60fb      	str	r3, [r7, #12]
}
 80073ce:	bf00      	nop
 80073d0:	e7fe      	b.n	80073d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80073d8:	f023 0301 	bic.w	r3, r3, #1
 80073dc:	b2da      	uxtb	r2, r3
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	6a1b      	ldr	r3, [r3, #32]
 80073e8:	6978      	ldr	r0, [r7, #20]
 80073ea:	4798      	blx	r3
}
 80073ec:	bf00      	nop
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	2000123c 	.word	0x2000123c

080073f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007400:	f107 0308 	add.w	r3, r7, #8
 8007404:	4618      	mov	r0, r3
 8007406:	f000 f857 	bl	80074b8 <prvGetNextExpireTime>
 800740a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	4619      	mov	r1, r3
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	f000 f803 	bl	800741c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007416:	f000 f8d5 	bl	80075c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800741a:	e7f1      	b.n	8007400 <prvTimerTask+0x8>

0800741c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007426:	f7ff fa39 	bl	800689c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800742a:	f107 0308 	add.w	r3, r7, #8
 800742e:	4618      	mov	r0, r3
 8007430:	f000 f866 	bl	8007500 <prvSampleTimeNow>
 8007434:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d130      	bne.n	800749e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10a      	bne.n	8007458 <prvProcessTimerOrBlockTask+0x3c>
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	429a      	cmp	r2, r3
 8007448:	d806      	bhi.n	8007458 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800744a:	f7ff fa35 	bl	80068b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800744e:	68f9      	ldr	r1, [r7, #12]
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f7ff ff85 	bl	8007360 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007456:	e024      	b.n	80074a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d008      	beq.n	8007470 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800745e:	4b13      	ldr	r3, [pc, #76]	; (80074ac <prvProcessTimerOrBlockTask+0x90>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d101      	bne.n	800746c <prvProcessTimerOrBlockTask+0x50>
 8007468:	2301      	movs	r3, #1
 800746a:	e000      	b.n	800746e <prvProcessTimerOrBlockTask+0x52>
 800746c:	2300      	movs	r3, #0
 800746e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007470:	4b0f      	ldr	r3, [pc, #60]	; (80074b0 <prvProcessTimerOrBlockTask+0x94>)
 8007472:	6818      	ldr	r0, [r3, #0]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	683a      	ldr	r2, [r7, #0]
 800747c:	4619      	mov	r1, r3
 800747e:	f7fe ff7d 	bl	800637c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007482:	f7ff fa19 	bl	80068b8 <xTaskResumeAll>
 8007486:	4603      	mov	r3, r0
 8007488:	2b00      	cmp	r3, #0
 800748a:	d10a      	bne.n	80074a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800748c:	4b09      	ldr	r3, [pc, #36]	; (80074b4 <prvProcessTimerOrBlockTask+0x98>)
 800748e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007492:	601a      	str	r2, [r3, #0]
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	f3bf 8f6f 	isb	sy
}
 800749c:	e001      	b.n	80074a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800749e:	f7ff fa0b 	bl	80068b8 <xTaskResumeAll>
}
 80074a2:	bf00      	nop
 80074a4:	3710      	adds	r7, #16
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}
 80074aa:	bf00      	nop
 80074ac:	20001240 	.word	0x20001240
 80074b0:	20001244 	.word	0x20001244
 80074b4:	e000ed04 	.word	0xe000ed04

080074b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80074b8:	b480      	push	{r7}
 80074ba:	b085      	sub	sp, #20
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80074c0:	4b0e      	ldr	r3, [pc, #56]	; (80074fc <prvGetNextExpireTime+0x44>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d101      	bne.n	80074ce <prvGetNextExpireTime+0x16>
 80074ca:	2201      	movs	r2, #1
 80074cc:	e000      	b.n	80074d0 <prvGetNextExpireTime+0x18>
 80074ce:	2200      	movs	r2, #0
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d105      	bne.n	80074e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80074dc:	4b07      	ldr	r3, [pc, #28]	; (80074fc <prvGetNextExpireTime+0x44>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	68db      	ldr	r3, [r3, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	60fb      	str	r3, [r7, #12]
 80074e6:	e001      	b.n	80074ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80074e8:	2300      	movs	r3, #0
 80074ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80074ec:	68fb      	ldr	r3, [r7, #12]
}
 80074ee:	4618      	mov	r0, r3
 80074f0:	3714      	adds	r7, #20
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	2000123c 	.word	0x2000123c

08007500 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b084      	sub	sp, #16
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007508:	f7ff fa74 	bl	80069f4 <xTaskGetTickCount>
 800750c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800750e:	4b0b      	ldr	r3, [pc, #44]	; (800753c <prvSampleTimeNow+0x3c>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	68fa      	ldr	r2, [r7, #12]
 8007514:	429a      	cmp	r2, r3
 8007516:	d205      	bcs.n	8007524 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007518:	f000 f936 	bl	8007788 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2201      	movs	r2, #1
 8007520:	601a      	str	r2, [r3, #0]
 8007522:	e002      	b.n	800752a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800752a:	4a04      	ldr	r2, [pc, #16]	; (800753c <prvSampleTimeNow+0x3c>)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007530:	68fb      	ldr	r3, [r7, #12]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	2000124c 	.word	0x2000124c

08007540 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800754e:	2300      	movs	r3, #0
 8007550:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	68ba      	ldr	r2, [r7, #8]
 8007556:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800755e:	68ba      	ldr	r2, [r7, #8]
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	429a      	cmp	r2, r3
 8007564:	d812      	bhi.n	800758c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	1ad2      	subs	r2, r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	429a      	cmp	r2, r3
 8007572:	d302      	bcc.n	800757a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007574:	2301      	movs	r3, #1
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	e01b      	b.n	80075b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800757a:	4b10      	ldr	r3, [pc, #64]	; (80075bc <prvInsertTimerInActiveList+0x7c>)
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	3304      	adds	r3, #4
 8007582:	4619      	mov	r1, r3
 8007584:	4610      	mov	r0, r2
 8007586:	f7fe f924 	bl	80057d2 <vListInsert>
 800758a:	e012      	b.n	80075b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800758c:	687a      	ldr	r2, [r7, #4]
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	429a      	cmp	r2, r3
 8007592:	d206      	bcs.n	80075a2 <prvInsertTimerInActiveList+0x62>
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	429a      	cmp	r2, r3
 800759a:	d302      	bcc.n	80075a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800759c:	2301      	movs	r3, #1
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	e007      	b.n	80075b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075a2:	4b07      	ldr	r3, [pc, #28]	; (80075c0 <prvInsertTimerInActiveList+0x80>)
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	3304      	adds	r3, #4
 80075aa:	4619      	mov	r1, r3
 80075ac:	4610      	mov	r0, r2
 80075ae:	f7fe f910 	bl	80057d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80075b2:	697b      	ldr	r3, [r7, #20]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3718      	adds	r7, #24
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	20001240 	.word	0x20001240
 80075c0:	2000123c 	.word	0x2000123c

080075c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b08e      	sub	sp, #56	; 0x38
 80075c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80075ca:	e0ca      	b.n	8007762 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	da18      	bge.n	8007604 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80075d2:	1d3b      	adds	r3, r7, #4
 80075d4:	3304      	adds	r3, #4
 80075d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80075d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d10a      	bne.n	80075f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80075de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e2:	f383 8811 	msr	BASEPRI, r3
 80075e6:	f3bf 8f6f 	isb	sy
 80075ea:	f3bf 8f4f 	dsb	sy
 80075ee:	61fb      	str	r3, [r7, #28]
}
 80075f0:	bf00      	nop
 80075f2:	e7fe      	b.n	80075f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80075f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075fa:	6850      	ldr	r0, [r2, #4]
 80075fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80075fe:	6892      	ldr	r2, [r2, #8]
 8007600:	4611      	mov	r1, r2
 8007602:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	f2c0 80aa 	blt.w	8007760 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007612:	695b      	ldr	r3, [r3, #20]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d004      	beq.n	8007622 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761a:	3304      	adds	r3, #4
 800761c:	4618      	mov	r0, r3
 800761e:	f7fe f911 	bl	8005844 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007622:	463b      	mov	r3, r7
 8007624:	4618      	mov	r0, r3
 8007626:	f7ff ff6b 	bl	8007500 <prvSampleTimeNow>
 800762a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2b09      	cmp	r3, #9
 8007630:	f200 8097 	bhi.w	8007762 <prvProcessReceivedCommands+0x19e>
 8007634:	a201      	add	r2, pc, #4	; (adr r2, 800763c <prvProcessReceivedCommands+0x78>)
 8007636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800763a:	bf00      	nop
 800763c:	08007665 	.word	0x08007665
 8007640:	08007665 	.word	0x08007665
 8007644:	08007665 	.word	0x08007665
 8007648:	080076d9 	.word	0x080076d9
 800764c:	080076ed 	.word	0x080076ed
 8007650:	08007737 	.word	0x08007737
 8007654:	08007665 	.word	0x08007665
 8007658:	08007665 	.word	0x08007665
 800765c:	080076d9 	.word	0x080076d9
 8007660:	080076ed 	.word	0x080076ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800766a:	f043 0301 	orr.w	r3, r3, #1
 800766e:	b2da      	uxtb	r2, r3
 8007670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	18d1      	adds	r1, r2, r3
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007684:	f7ff ff5c 	bl	8007540 <prvInsertTimerInActiveList>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d069      	beq.n	8007762 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800768e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007694:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007698:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800769c:	f003 0304 	and.w	r3, r3, #4
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d05e      	beq.n	8007762 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80076a4:	68ba      	ldr	r2, [r7, #8]
 80076a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	441a      	add	r2, r3
 80076ac:	2300      	movs	r3, #0
 80076ae:	9300      	str	r3, [sp, #0]
 80076b0:	2300      	movs	r3, #0
 80076b2:	2100      	movs	r1, #0
 80076b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076b6:	f7ff fe05 	bl	80072c4 <xTimerGenericCommand>
 80076ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80076bc:	6a3b      	ldr	r3, [r7, #32]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d14f      	bne.n	8007762 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	f383 8811 	msr	BASEPRI, r3
 80076ca:	f3bf 8f6f 	isb	sy
 80076ce:	f3bf 8f4f 	dsb	sy
 80076d2:	61bb      	str	r3, [r7, #24]
}
 80076d4:	bf00      	nop
 80076d6:	e7fe      	b.n	80076d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076de:	f023 0301 	bic.w	r3, r3, #1
 80076e2:	b2da      	uxtb	r2, r3
 80076e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80076ea:	e03a      	b.n	8007762 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076f2:	f043 0301 	orr.w	r3, r3, #1
 80076f6:	b2da      	uxtb	r2, r3
 80076f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80076fe:	68ba      	ldr	r2, [r7, #8]
 8007700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007702:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	2b00      	cmp	r3, #0
 800770a:	d10a      	bne.n	8007722 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800770c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007710:	f383 8811 	msr	BASEPRI, r3
 8007714:	f3bf 8f6f 	isb	sy
 8007718:	f3bf 8f4f 	dsb	sy
 800771c:	617b      	str	r3, [r7, #20]
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	699a      	ldr	r2, [r3, #24]
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	18d1      	adds	r1, r2, r3
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007730:	f7ff ff06 	bl	8007540 <prvInsertTimerInActiveList>
					break;
 8007734:	e015      	b.n	8007762 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d103      	bne.n	800774c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007744:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007746:	f000 fbdb 	bl	8007f00 <vPortFree>
 800774a:	e00a      	b.n	8007762 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800774c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800774e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007752:	f023 0301 	bic.w	r3, r3, #1
 8007756:	b2da      	uxtb	r2, r3
 8007758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800775e:	e000      	b.n	8007762 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007760:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007762:	4b08      	ldr	r3, [pc, #32]	; (8007784 <prvProcessReceivedCommands+0x1c0>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	1d39      	adds	r1, r7, #4
 8007768:	2200      	movs	r2, #0
 800776a:	4618      	mov	r0, r3
 800776c:	f7fe fb6c 	bl	8005e48 <xQueueReceive>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	f47f af2a 	bne.w	80075cc <prvProcessReceivedCommands+0x8>
	}
}
 8007778:	bf00      	nop
 800777a:	bf00      	nop
 800777c:	3730      	adds	r7, #48	; 0x30
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
 8007782:	bf00      	nop
 8007784:	20001244 	.word	0x20001244

08007788 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b088      	sub	sp, #32
 800778c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800778e:	e048      	b.n	8007822 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007790:	4b2d      	ldr	r3, [pc, #180]	; (8007848 <prvSwitchTimerLists+0xc0>)
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	68db      	ldr	r3, [r3, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800779a:	4b2b      	ldr	r3, [pc, #172]	; (8007848 <prvSwitchTimerLists+0xc0>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	68db      	ldr	r3, [r3, #12]
 80077a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3304      	adds	r3, #4
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fe f84b 	bl	8005844 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	68f8      	ldr	r0, [r7, #12]
 80077b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077bc:	f003 0304 	and.w	r3, r3, #4
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d02e      	beq.n	8007822 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	699b      	ldr	r3, [r3, #24]
 80077c8:	693a      	ldr	r2, [r7, #16]
 80077ca:	4413      	add	r3, r2
 80077cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80077ce:	68ba      	ldr	r2, [r7, #8]
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d90e      	bls.n	80077f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	68ba      	ldr	r2, [r7, #8]
 80077da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	68fa      	ldr	r2, [r7, #12]
 80077e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80077e2:	4b19      	ldr	r3, [pc, #100]	; (8007848 <prvSwitchTimerLists+0xc0>)
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	3304      	adds	r3, #4
 80077ea:	4619      	mov	r1, r3
 80077ec:	4610      	mov	r0, r2
 80077ee:	f7fd fff0 	bl	80057d2 <vListInsert>
 80077f2:	e016      	b.n	8007822 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80077f4:	2300      	movs	r3, #0
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	2300      	movs	r3, #0
 80077fa:	693a      	ldr	r2, [r7, #16]
 80077fc:	2100      	movs	r1, #0
 80077fe:	68f8      	ldr	r0, [r7, #12]
 8007800:	f7ff fd60 	bl	80072c4 <xTimerGenericCommand>
 8007804:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10a      	bne.n	8007822 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	603b      	str	r3, [r7, #0]
}
 800781e:	bf00      	nop
 8007820:	e7fe      	b.n	8007820 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007822:	4b09      	ldr	r3, [pc, #36]	; (8007848 <prvSwitchTimerLists+0xc0>)
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d1b1      	bne.n	8007790 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800782c:	4b06      	ldr	r3, [pc, #24]	; (8007848 <prvSwitchTimerLists+0xc0>)
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007832:	4b06      	ldr	r3, [pc, #24]	; (800784c <prvSwitchTimerLists+0xc4>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	4a04      	ldr	r2, [pc, #16]	; (8007848 <prvSwitchTimerLists+0xc0>)
 8007838:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800783a:	4a04      	ldr	r2, [pc, #16]	; (800784c <prvSwitchTimerLists+0xc4>)
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	6013      	str	r3, [r2, #0]
}
 8007840:	bf00      	nop
 8007842:	3718      	adds	r7, #24
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}
 8007848:	2000123c 	.word	0x2000123c
 800784c:	20001240 	.word	0x20001240

08007850 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007856:	f000 f965 	bl	8007b24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800785a:	4b15      	ldr	r3, [pc, #84]	; (80078b0 <prvCheckForValidListAndQueue+0x60>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d120      	bne.n	80078a4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007862:	4814      	ldr	r0, [pc, #80]	; (80078b4 <prvCheckForValidListAndQueue+0x64>)
 8007864:	f7fd ff64 	bl	8005730 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007868:	4813      	ldr	r0, [pc, #76]	; (80078b8 <prvCheckForValidListAndQueue+0x68>)
 800786a:	f7fd ff61 	bl	8005730 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800786e:	4b13      	ldr	r3, [pc, #76]	; (80078bc <prvCheckForValidListAndQueue+0x6c>)
 8007870:	4a10      	ldr	r2, [pc, #64]	; (80078b4 <prvCheckForValidListAndQueue+0x64>)
 8007872:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007874:	4b12      	ldr	r3, [pc, #72]	; (80078c0 <prvCheckForValidListAndQueue+0x70>)
 8007876:	4a10      	ldr	r2, [pc, #64]	; (80078b8 <prvCheckForValidListAndQueue+0x68>)
 8007878:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800787a:	2300      	movs	r3, #0
 800787c:	9300      	str	r3, [sp, #0]
 800787e:	4b11      	ldr	r3, [pc, #68]	; (80078c4 <prvCheckForValidListAndQueue+0x74>)
 8007880:	4a11      	ldr	r2, [pc, #68]	; (80078c8 <prvCheckForValidListAndQueue+0x78>)
 8007882:	2110      	movs	r1, #16
 8007884:	200a      	movs	r0, #10
 8007886:	f7fe f86f 	bl	8005968 <xQueueGenericCreateStatic>
 800788a:	4603      	mov	r3, r0
 800788c:	4a08      	ldr	r2, [pc, #32]	; (80078b0 <prvCheckForValidListAndQueue+0x60>)
 800788e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007890:	4b07      	ldr	r3, [pc, #28]	; (80078b0 <prvCheckForValidListAndQueue+0x60>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d005      	beq.n	80078a4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007898:	4b05      	ldr	r3, [pc, #20]	; (80078b0 <prvCheckForValidListAndQueue+0x60>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	490b      	ldr	r1, [pc, #44]	; (80078cc <prvCheckForValidListAndQueue+0x7c>)
 800789e:	4618      	mov	r0, r3
 80078a0:	f7fe fd42 	bl	8006328 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80078a4:	f000 f96e 	bl	8007b84 <vPortExitCritical>
}
 80078a8:	bf00      	nop
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20001244 	.word	0x20001244
 80078b4:	20001214 	.word	0x20001214
 80078b8:	20001228 	.word	0x20001228
 80078bc:	2000123c 	.word	0x2000123c
 80078c0:	20001240 	.word	0x20001240
 80078c4:	200012f0 	.word	0x200012f0
 80078c8:	20001250 	.word	0x20001250
 80078cc:	0800cc38 	.word	0x0800cc38

080078d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	3b04      	subs	r3, #4
 80078e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80078e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3b04      	subs	r3, #4
 80078ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	f023 0201 	bic.w	r2, r3, #1
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	3b04      	subs	r3, #4
 80078fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007900:	4a0c      	ldr	r2, [pc, #48]	; (8007934 <pxPortInitialiseStack+0x64>)
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	3b14      	subs	r3, #20
 800790a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3b04      	subs	r3, #4
 8007916:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f06f 0202 	mvn.w	r2, #2
 800791e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	3b20      	subs	r3, #32
 8007924:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007926:	68fb      	ldr	r3, [r7, #12]
}
 8007928:	4618      	mov	r0, r3
 800792a:	3714      	adds	r7, #20
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	08007939 	.word	0x08007939

08007938 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800793e:	2300      	movs	r3, #0
 8007940:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007942:	4b12      	ldr	r3, [pc, #72]	; (800798c <prvTaskExitError+0x54>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800794a:	d00a      	beq.n	8007962 <prvTaskExitError+0x2a>
	__asm volatile
 800794c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007950:	f383 8811 	msr	BASEPRI, r3
 8007954:	f3bf 8f6f 	isb	sy
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	60fb      	str	r3, [r7, #12]
}
 800795e:	bf00      	nop
 8007960:	e7fe      	b.n	8007960 <prvTaskExitError+0x28>
	__asm volatile
 8007962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007966:	f383 8811 	msr	BASEPRI, r3
 800796a:	f3bf 8f6f 	isb	sy
 800796e:	f3bf 8f4f 	dsb	sy
 8007972:	60bb      	str	r3, [r7, #8]
}
 8007974:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007976:	bf00      	nop
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0fc      	beq.n	8007978 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800797e:	bf00      	nop
 8007980:	bf00      	nop
 8007982:	3714      	adds	r7, #20
 8007984:	46bd      	mov	sp, r7
 8007986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798a:	4770      	bx	lr
 800798c:	200001f4 	.word	0x200001f4

08007990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007990:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <pxCurrentTCBConst2>)
 8007992:	6819      	ldr	r1, [r3, #0]
 8007994:	6808      	ldr	r0, [r1, #0]
 8007996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800799a:	f380 8809 	msr	PSP, r0
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f04f 0000 	mov.w	r0, #0
 80079a6:	f380 8811 	msr	BASEPRI, r0
 80079aa:	4770      	bx	lr
 80079ac:	f3af 8000 	nop.w

080079b0 <pxCurrentTCBConst2>:
 80079b0:	20000d14 	.word	0x20000d14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80079b4:	bf00      	nop
 80079b6:	bf00      	nop

080079b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80079b8:	4808      	ldr	r0, [pc, #32]	; (80079dc <prvPortStartFirstTask+0x24>)
 80079ba:	6800      	ldr	r0, [r0, #0]
 80079bc:	6800      	ldr	r0, [r0, #0]
 80079be:	f380 8808 	msr	MSP, r0
 80079c2:	f04f 0000 	mov.w	r0, #0
 80079c6:	f380 8814 	msr	CONTROL, r0
 80079ca:	b662      	cpsie	i
 80079cc:	b661      	cpsie	f
 80079ce:	f3bf 8f4f 	dsb	sy
 80079d2:	f3bf 8f6f 	isb	sy
 80079d6:	df00      	svc	0
 80079d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80079da:	bf00      	nop
 80079dc:	e000ed08 	.word	0xe000ed08

080079e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	b086      	sub	sp, #24
 80079e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80079e6:	4b46      	ldr	r3, [pc, #280]	; (8007b00 <xPortStartScheduler+0x120>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a46      	ldr	r2, [pc, #280]	; (8007b04 <xPortStartScheduler+0x124>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d10a      	bne.n	8007a06 <xPortStartScheduler+0x26>
	__asm volatile
 80079f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f4:	f383 8811 	msr	BASEPRI, r3
 80079f8:	f3bf 8f6f 	isb	sy
 80079fc:	f3bf 8f4f 	dsb	sy
 8007a00:	613b      	str	r3, [r7, #16]
}
 8007a02:	bf00      	nop
 8007a04:	e7fe      	b.n	8007a04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a06:	4b3e      	ldr	r3, [pc, #248]	; (8007b00 <xPortStartScheduler+0x120>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4a3f      	ldr	r2, [pc, #252]	; (8007b08 <xPortStartScheduler+0x128>)
 8007a0c:	4293      	cmp	r3, r2
 8007a0e:	d10a      	bne.n	8007a26 <xPortStartScheduler+0x46>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	60fb      	str	r3, [r7, #12]
}
 8007a22:	bf00      	nop
 8007a24:	e7fe      	b.n	8007a24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a26:	4b39      	ldr	r3, [pc, #228]	; (8007b0c <xPortStartScheduler+0x12c>)
 8007a28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007a32:	697b      	ldr	r3, [r7, #20]
 8007a34:	22ff      	movs	r2, #255	; 0xff
 8007a36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	b2db      	uxtb	r3, r3
 8007a3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007a40:	78fb      	ldrb	r3, [r7, #3]
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	4b31      	ldr	r3, [pc, #196]	; (8007b10 <xPortStartScheduler+0x130>)
 8007a4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007a4e:	4b31      	ldr	r3, [pc, #196]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a50:	2207      	movs	r2, #7
 8007a52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a54:	e009      	b.n	8007a6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007a56:	4b2f      	ldr	r3, [pc, #188]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	3b01      	subs	r3, #1
 8007a5c:	4a2d      	ldr	r2, [pc, #180]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007a60:	78fb      	ldrb	r3, [r7, #3]
 8007a62:	b2db      	uxtb	r3, r3
 8007a64:	005b      	lsls	r3, r3, #1
 8007a66:	b2db      	uxtb	r3, r3
 8007a68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007a6a:	78fb      	ldrb	r3, [r7, #3]
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a72:	2b80      	cmp	r3, #128	; 0x80
 8007a74:	d0ef      	beq.n	8007a56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007a76:	4b27      	ldr	r3, [pc, #156]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f1c3 0307 	rsb	r3, r3, #7
 8007a7e:	2b04      	cmp	r3, #4
 8007a80:	d00a      	beq.n	8007a98 <xPortStartScheduler+0xb8>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	60bb      	str	r3, [r7, #8]
}
 8007a94:	bf00      	nop
 8007a96:	e7fe      	b.n	8007a96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007a98:	4b1e      	ldr	r3, [pc, #120]	; (8007b14 <xPortStartScheduler+0x134>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	021b      	lsls	r3, r3, #8
 8007a9e:	4a1d      	ldr	r2, [pc, #116]	; (8007b14 <xPortStartScheduler+0x134>)
 8007aa0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007aa2:	4b1c      	ldr	r3, [pc, #112]	; (8007b14 <xPortStartScheduler+0x134>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007aaa:	4a1a      	ldr	r2, [pc, #104]	; (8007b14 <xPortStartScheduler+0x134>)
 8007aac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	b2da      	uxtb	r2, r3
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007ab6:	4b18      	ldr	r3, [pc, #96]	; (8007b18 <xPortStartScheduler+0x138>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a17      	ldr	r2, [pc, #92]	; (8007b18 <xPortStartScheduler+0x138>)
 8007abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007ac0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007ac2:	4b15      	ldr	r3, [pc, #84]	; (8007b18 <xPortStartScheduler+0x138>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	4a14      	ldr	r2, [pc, #80]	; (8007b18 <xPortStartScheduler+0x138>)
 8007ac8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007acc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007ace:	f000 f8dd 	bl	8007c8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007ad2:	4b12      	ldr	r3, [pc, #72]	; (8007b1c <xPortStartScheduler+0x13c>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007ad8:	f000 f8fc 	bl	8007cd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007adc:	4b10      	ldr	r3, [pc, #64]	; (8007b20 <xPortStartScheduler+0x140>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a0f      	ldr	r2, [pc, #60]	; (8007b20 <xPortStartScheduler+0x140>)
 8007ae2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007ae6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007ae8:	f7ff ff66 	bl	80079b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007aec:	f7ff f84c 	bl	8006b88 <vTaskSwitchContext>
	prvTaskExitError();
 8007af0:	f7ff ff22 	bl	8007938 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007af4:	2300      	movs	r3, #0
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3718      	adds	r7, #24
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	e000ed00 	.word	0xe000ed00
 8007b04:	410fc271 	.word	0x410fc271
 8007b08:	410fc270 	.word	0x410fc270
 8007b0c:	e000e400 	.word	0xe000e400
 8007b10:	20001340 	.word	0x20001340
 8007b14:	20001344 	.word	0x20001344
 8007b18:	e000ed20 	.word	0xe000ed20
 8007b1c:	200001f4 	.word	0x200001f4
 8007b20:	e000ef34 	.word	0xe000ef34

08007b24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
	__asm volatile
 8007b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b2e:	f383 8811 	msr	BASEPRI, r3
 8007b32:	f3bf 8f6f 	isb	sy
 8007b36:	f3bf 8f4f 	dsb	sy
 8007b3a:	607b      	str	r3, [r7, #4]
}
 8007b3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007b3e:	4b0f      	ldr	r3, [pc, #60]	; (8007b7c <vPortEnterCritical+0x58>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	3301      	adds	r3, #1
 8007b44:	4a0d      	ldr	r2, [pc, #52]	; (8007b7c <vPortEnterCritical+0x58>)
 8007b46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007b48:	4b0c      	ldr	r3, [pc, #48]	; (8007b7c <vPortEnterCritical+0x58>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2b01      	cmp	r3, #1
 8007b4e:	d10f      	bne.n	8007b70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007b50:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <vPortEnterCritical+0x5c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	b2db      	uxtb	r3, r3
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d00a      	beq.n	8007b70 <vPortEnterCritical+0x4c>
	__asm volatile
 8007b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b5e:	f383 8811 	msr	BASEPRI, r3
 8007b62:	f3bf 8f6f 	isb	sy
 8007b66:	f3bf 8f4f 	dsb	sy
 8007b6a:	603b      	str	r3, [r7, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	e7fe      	b.n	8007b6e <vPortEnterCritical+0x4a>
	}
}
 8007b70:	bf00      	nop
 8007b72:	370c      	adds	r7, #12
 8007b74:	46bd      	mov	sp, r7
 8007b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7a:	4770      	bx	lr
 8007b7c:	200001f4 	.word	0x200001f4
 8007b80:	e000ed04 	.word	0xe000ed04

08007b84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007b84:	b480      	push	{r7}
 8007b86:	b083      	sub	sp, #12
 8007b88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007b8a:	4b12      	ldr	r3, [pc, #72]	; (8007bd4 <vPortExitCritical+0x50>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d10a      	bne.n	8007ba8 <vPortExitCritical+0x24>
	__asm volatile
 8007b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b96:	f383 8811 	msr	BASEPRI, r3
 8007b9a:	f3bf 8f6f 	isb	sy
 8007b9e:	f3bf 8f4f 	dsb	sy
 8007ba2:	607b      	str	r3, [r7, #4]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	; (8007bd4 <vPortExitCritical+0x50>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3b01      	subs	r3, #1
 8007bae:	4a09      	ldr	r2, [pc, #36]	; (8007bd4 <vPortExitCritical+0x50>)
 8007bb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007bb2:	4b08      	ldr	r3, [pc, #32]	; (8007bd4 <vPortExitCritical+0x50>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d105      	bne.n	8007bc6 <vPortExitCritical+0x42>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	f383 8811 	msr	BASEPRI, r3
}
 8007bc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007bc6:	bf00      	nop
 8007bc8:	370c      	adds	r7, #12
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd0:	4770      	bx	lr
 8007bd2:	bf00      	nop
 8007bd4:	200001f4 	.word	0x200001f4
	...

08007be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007be0:	f3ef 8009 	mrs	r0, PSP
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	4b15      	ldr	r3, [pc, #84]	; (8007c40 <pxCurrentTCBConst>)
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	f01e 0f10 	tst.w	lr, #16
 8007bf0:	bf08      	it	eq
 8007bf2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007bf6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bfa:	6010      	str	r0, [r2, #0]
 8007bfc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c04:	f380 8811 	msr	BASEPRI, r0
 8007c08:	f3bf 8f4f 	dsb	sy
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f7fe ffba 	bl	8006b88 <vTaskSwitchContext>
 8007c14:	f04f 0000 	mov.w	r0, #0
 8007c18:	f380 8811 	msr	BASEPRI, r0
 8007c1c:	bc09      	pop	{r0, r3}
 8007c1e:	6819      	ldr	r1, [r3, #0]
 8007c20:	6808      	ldr	r0, [r1, #0]
 8007c22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c26:	f01e 0f10 	tst.w	lr, #16
 8007c2a:	bf08      	it	eq
 8007c2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007c30:	f380 8809 	msr	PSP, r0
 8007c34:	f3bf 8f6f 	isb	sy
 8007c38:	4770      	bx	lr
 8007c3a:	bf00      	nop
 8007c3c:	f3af 8000 	nop.w

08007c40 <pxCurrentTCBConst>:
 8007c40:	20000d14 	.word	0x20000d14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007c44:	bf00      	nop
 8007c46:	bf00      	nop

08007c48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007c4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c52:	f383 8811 	msr	BASEPRI, r3
 8007c56:	f3bf 8f6f 	isb	sy
 8007c5a:	f3bf 8f4f 	dsb	sy
 8007c5e:	607b      	str	r3, [r7, #4]
}
 8007c60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007c62:	f7fe fed7 	bl	8006a14 <xTaskIncrementTick>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d003      	beq.n	8007c74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007c6c:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <xPortSysTickHandler+0x40>)
 8007c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	2300      	movs	r3, #0
 8007c76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	f383 8811 	msr	BASEPRI, r3
}
 8007c7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007c80:	bf00      	nop
 8007c82:	3708      	adds	r7, #8
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}
 8007c88:	e000ed04 	.word	0xe000ed04

08007c8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007c90:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <vPortSetupTimerInterrupt+0x34>)
 8007c92:	2200      	movs	r2, #0
 8007c94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007c96:	4b0b      	ldr	r3, [pc, #44]	; (8007cc4 <vPortSetupTimerInterrupt+0x38>)
 8007c98:	2200      	movs	r2, #0
 8007c9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007c9c:	4b0a      	ldr	r3, [pc, #40]	; (8007cc8 <vPortSetupTimerInterrupt+0x3c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a0a      	ldr	r2, [pc, #40]	; (8007ccc <vPortSetupTimerInterrupt+0x40>)
 8007ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8007ca6:	099b      	lsrs	r3, r3, #6
 8007ca8:	4a09      	ldr	r2, [pc, #36]	; (8007cd0 <vPortSetupTimerInterrupt+0x44>)
 8007caa:	3b01      	subs	r3, #1
 8007cac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007cae:	4b04      	ldr	r3, [pc, #16]	; (8007cc0 <vPortSetupTimerInterrupt+0x34>)
 8007cb0:	2207      	movs	r2, #7
 8007cb2:	601a      	str	r2, [r3, #0]
}
 8007cb4:	bf00      	nop
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
 8007cbe:	bf00      	nop
 8007cc0:	e000e010 	.word	0xe000e010
 8007cc4:	e000e018 	.word	0xe000e018
 8007cc8:	200001e8 	.word	0x200001e8
 8007ccc:	10624dd3 	.word	0x10624dd3
 8007cd0:	e000e014 	.word	0xe000e014

08007cd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007cd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ce4 <vPortEnableVFP+0x10>
 8007cd8:	6801      	ldr	r1, [r0, #0]
 8007cda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007cde:	6001      	str	r1, [r0, #0]
 8007ce0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ce2:	bf00      	nop
 8007ce4:	e000ed88 	.word	0xe000ed88

08007ce8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007cee:	f3ef 8305 	mrs	r3, IPSR
 8007cf2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	2b0f      	cmp	r3, #15
 8007cf8:	d914      	bls.n	8007d24 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007cfa:	4a17      	ldr	r2, [pc, #92]	; (8007d58 <vPortValidateInterruptPriority+0x70>)
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	4413      	add	r3, r2
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d04:	4b15      	ldr	r3, [pc, #84]	; (8007d5c <vPortValidateInterruptPriority+0x74>)
 8007d06:	781b      	ldrb	r3, [r3, #0]
 8007d08:	7afa      	ldrb	r2, [r7, #11]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d20a      	bcs.n	8007d24 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d12:	f383 8811 	msr	BASEPRI, r3
 8007d16:	f3bf 8f6f 	isb	sy
 8007d1a:	f3bf 8f4f 	dsb	sy
 8007d1e:	607b      	str	r3, [r7, #4]
}
 8007d20:	bf00      	nop
 8007d22:	e7fe      	b.n	8007d22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d24:	4b0e      	ldr	r3, [pc, #56]	; (8007d60 <vPortValidateInterruptPriority+0x78>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007d2c:	4b0d      	ldr	r3, [pc, #52]	; (8007d64 <vPortValidateInterruptPriority+0x7c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d90a      	bls.n	8007d4a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d38:	f383 8811 	msr	BASEPRI, r3
 8007d3c:	f3bf 8f6f 	isb	sy
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	603b      	str	r3, [r7, #0]
}
 8007d46:	bf00      	nop
 8007d48:	e7fe      	b.n	8007d48 <vPortValidateInterruptPriority+0x60>
	}
 8007d4a:	bf00      	nop
 8007d4c:	3714      	adds	r7, #20
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	e000e3f0 	.word	0xe000e3f0
 8007d5c:	20001340 	.word	0x20001340
 8007d60:	e000ed0c 	.word	0xe000ed0c
 8007d64:	20001344 	.word	0x20001344

08007d68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007d68:	b580      	push	{r7, lr}
 8007d6a:	b08a      	sub	sp, #40	; 0x28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007d70:	2300      	movs	r3, #0
 8007d72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007d74:	f7fe fd92 	bl	800689c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007d78:	4b5b      	ldr	r3, [pc, #364]	; (8007ee8 <pvPortMalloc+0x180>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007d80:	f000 f920 	bl	8007fc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007d84:	4b59      	ldr	r3, [pc, #356]	; (8007eec <pvPortMalloc+0x184>)
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4013      	ands	r3, r2
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	f040 8093 	bne.w	8007eb8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d01d      	beq.n	8007dd4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007d98:	2208      	movs	r2, #8
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f003 0307 	and.w	r3, r3, #7
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d014      	beq.n	8007dd4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	f023 0307 	bic.w	r3, r3, #7
 8007db0:	3308      	adds	r3, #8
 8007db2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d00a      	beq.n	8007dd4 <pvPortMalloc+0x6c>
	__asm volatile
 8007dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc2:	f383 8811 	msr	BASEPRI, r3
 8007dc6:	f3bf 8f6f 	isb	sy
 8007dca:	f3bf 8f4f 	dsb	sy
 8007dce:	617b      	str	r3, [r7, #20]
}
 8007dd0:	bf00      	nop
 8007dd2:	e7fe      	b.n	8007dd2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d06e      	beq.n	8007eb8 <pvPortMalloc+0x150>
 8007dda:	4b45      	ldr	r3, [pc, #276]	; (8007ef0 <pvPortMalloc+0x188>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	687a      	ldr	r2, [r7, #4]
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d869      	bhi.n	8007eb8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007de4:	4b43      	ldr	r3, [pc, #268]	; (8007ef4 <pvPortMalloc+0x18c>)
 8007de6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007de8:	4b42      	ldr	r3, [pc, #264]	; (8007ef4 <pvPortMalloc+0x18c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dee:	e004      	b.n	8007dfa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dfc:	685b      	ldr	r3, [r3, #4]
 8007dfe:	687a      	ldr	r2, [r7, #4]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d903      	bls.n	8007e0c <pvPortMalloc+0xa4>
 8007e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d1f1      	bne.n	8007df0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e0c:	4b36      	ldr	r3, [pc, #216]	; (8007ee8 <pvPortMalloc+0x180>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e12:	429a      	cmp	r2, r3
 8007e14:	d050      	beq.n	8007eb8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	2208      	movs	r2, #8
 8007e1c:	4413      	add	r3, r2
 8007e1e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	6a3b      	ldr	r3, [r7, #32]
 8007e26:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	1ad2      	subs	r2, r2, r3
 8007e30:	2308      	movs	r3, #8
 8007e32:	005b      	lsls	r3, r3, #1
 8007e34:	429a      	cmp	r2, r3
 8007e36:	d91f      	bls.n	8007e78 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007e38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e40:	69bb      	ldr	r3, [r7, #24]
 8007e42:	f003 0307 	and.w	r3, r3, #7
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d00a      	beq.n	8007e60 <pvPortMalloc+0xf8>
	__asm volatile
 8007e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4e:	f383 8811 	msr	BASEPRI, r3
 8007e52:	f3bf 8f6f 	isb	sy
 8007e56:	f3bf 8f4f 	dsb	sy
 8007e5a:	613b      	str	r3, [r7, #16]
}
 8007e5c:	bf00      	nop
 8007e5e:	e7fe      	b.n	8007e5e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	1ad2      	subs	r2, r2, r3
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007e72:	69b8      	ldr	r0, [r7, #24]
 8007e74:	f000 f908 	bl	8008088 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007e78:	4b1d      	ldr	r3, [pc, #116]	; (8007ef0 <pvPortMalloc+0x188>)
 8007e7a:	681a      	ldr	r2, [r3, #0]
 8007e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	4a1b      	ldr	r2, [pc, #108]	; (8007ef0 <pvPortMalloc+0x188>)
 8007e84:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007e86:	4b1a      	ldr	r3, [pc, #104]	; (8007ef0 <pvPortMalloc+0x188>)
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	4b1b      	ldr	r3, [pc, #108]	; (8007ef8 <pvPortMalloc+0x190>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d203      	bcs.n	8007e9a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007e92:	4b17      	ldr	r3, [pc, #92]	; (8007ef0 <pvPortMalloc+0x188>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	4a18      	ldr	r2, [pc, #96]	; (8007ef8 <pvPortMalloc+0x190>)
 8007e98:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	685a      	ldr	r2, [r3, #4]
 8007e9e:	4b13      	ldr	r3, [pc, #76]	; (8007eec <pvPortMalloc+0x184>)
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ea6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eaa:	2200      	movs	r2, #0
 8007eac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007eae:	4b13      	ldr	r3, [pc, #76]	; (8007efc <pvPortMalloc+0x194>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	3301      	adds	r3, #1
 8007eb4:	4a11      	ldr	r2, [pc, #68]	; (8007efc <pvPortMalloc+0x194>)
 8007eb6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007eb8:	f7fe fcfe 	bl	80068b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ebc:	69fb      	ldr	r3, [r7, #28]
 8007ebe:	f003 0307 	and.w	r3, r3, #7
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d00a      	beq.n	8007edc <pvPortMalloc+0x174>
	__asm volatile
 8007ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eca:	f383 8811 	msr	BASEPRI, r3
 8007ece:	f3bf 8f6f 	isb	sy
 8007ed2:	f3bf 8f4f 	dsb	sy
 8007ed6:	60fb      	str	r3, [r7, #12]
}
 8007ed8:	bf00      	nop
 8007eda:	e7fe      	b.n	8007eda <pvPortMalloc+0x172>
	return pvReturn;
 8007edc:	69fb      	ldr	r3, [r7, #28]
}
 8007ede:	4618      	mov	r0, r3
 8007ee0:	3728      	adds	r7, #40	; 0x28
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}
 8007ee6:	bf00      	nop
 8007ee8:	20004f50 	.word	0x20004f50
 8007eec:	20004f64 	.word	0x20004f64
 8007ef0:	20004f54 	.word	0x20004f54
 8007ef4:	20004f48 	.word	0x20004f48
 8007ef8:	20004f58 	.word	0x20004f58
 8007efc:	20004f5c 	.word	0x20004f5c

08007f00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d04d      	beq.n	8007fae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f12:	2308      	movs	r3, #8
 8007f14:	425b      	negs	r3, r3
 8007f16:	697a      	ldr	r2, [r7, #20]
 8007f18:	4413      	add	r3, r2
 8007f1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	685a      	ldr	r2, [r3, #4]
 8007f24:	4b24      	ldr	r3, [pc, #144]	; (8007fb8 <vPortFree+0xb8>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d10a      	bne.n	8007f44 <vPortFree+0x44>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	60fb      	str	r3, [r7, #12]
}
 8007f40:	bf00      	nop
 8007f42:	e7fe      	b.n	8007f42 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00a      	beq.n	8007f62 <vPortFree+0x62>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	60bb      	str	r3, [r7, #8]
}
 8007f5e:	bf00      	nop
 8007f60:	e7fe      	b.n	8007f60 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	4b14      	ldr	r3, [pc, #80]	; (8007fb8 <vPortFree+0xb8>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d01e      	beq.n	8007fae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007f70:	693b      	ldr	r3, [r7, #16]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d11a      	bne.n	8007fae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	4b0e      	ldr	r3, [pc, #56]	; (8007fb8 <vPortFree+0xb8>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	43db      	mvns	r3, r3
 8007f82:	401a      	ands	r2, r3
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007f88:	f7fe fc88 	bl	800689c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	685a      	ldr	r2, [r3, #4]
 8007f90:	4b0a      	ldr	r3, [pc, #40]	; (8007fbc <vPortFree+0xbc>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4413      	add	r3, r2
 8007f96:	4a09      	ldr	r2, [pc, #36]	; (8007fbc <vPortFree+0xbc>)
 8007f98:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007f9a:	6938      	ldr	r0, [r7, #16]
 8007f9c:	f000 f874 	bl	8008088 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007fa0:	4b07      	ldr	r3, [pc, #28]	; (8007fc0 <vPortFree+0xc0>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	4a06      	ldr	r2, [pc, #24]	; (8007fc0 <vPortFree+0xc0>)
 8007fa8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007faa:	f7fe fc85 	bl	80068b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007fae:	bf00      	nop
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop
 8007fb8:	20004f64 	.word	0x20004f64
 8007fbc:	20004f54 	.word	0x20004f54
 8007fc0:	20004f60 	.word	0x20004f60

08007fc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007fca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007fce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007fd0:	4b27      	ldr	r3, [pc, #156]	; (8008070 <prvHeapInit+0xac>)
 8007fd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f003 0307 	and.w	r3, r3, #7
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d00c      	beq.n	8007ff8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	3307      	adds	r3, #7
 8007fe2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 0307 	bic.w	r3, r3, #7
 8007fea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	4a1f      	ldr	r2, [pc, #124]	; (8008070 <prvHeapInit+0xac>)
 8007ff4:	4413      	add	r3, r2
 8007ff6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ffc:	4a1d      	ldr	r2, [pc, #116]	; (8008074 <prvHeapInit+0xb0>)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008002:	4b1c      	ldr	r3, [pc, #112]	; (8008074 <prvHeapInit+0xb0>)
 8008004:	2200      	movs	r2, #0
 8008006:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	68ba      	ldr	r2, [r7, #8]
 800800c:	4413      	add	r3, r2
 800800e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008010:	2208      	movs	r2, #8
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f023 0307 	bic.w	r3, r3, #7
 800801e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	4a15      	ldr	r2, [pc, #84]	; (8008078 <prvHeapInit+0xb4>)
 8008024:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008026:	4b14      	ldr	r3, [pc, #80]	; (8008078 <prvHeapInit+0xb4>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	2200      	movs	r2, #0
 800802c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800802e:	4b12      	ldr	r3, [pc, #72]	; (8008078 <prvHeapInit+0xb4>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2200      	movs	r2, #0
 8008034:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	68fa      	ldr	r2, [r7, #12]
 800803e:	1ad2      	subs	r2, r2, r3
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008044:	4b0c      	ldr	r3, [pc, #48]	; (8008078 <prvHeapInit+0xb4>)
 8008046:	681a      	ldr	r2, [r3, #0]
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	685b      	ldr	r3, [r3, #4]
 8008050:	4a0a      	ldr	r2, [pc, #40]	; (800807c <prvHeapInit+0xb8>)
 8008052:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008054:	683b      	ldr	r3, [r7, #0]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	4a09      	ldr	r2, [pc, #36]	; (8008080 <prvHeapInit+0xbc>)
 800805a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800805c:	4b09      	ldr	r3, [pc, #36]	; (8008084 <prvHeapInit+0xc0>)
 800805e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008062:	601a      	str	r2, [r3, #0]
}
 8008064:	bf00      	nop
 8008066:	3714      	adds	r7, #20
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr
 8008070:	20001348 	.word	0x20001348
 8008074:	20004f48 	.word	0x20004f48
 8008078:	20004f50 	.word	0x20004f50
 800807c:	20004f58 	.word	0x20004f58
 8008080:	20004f54 	.word	0x20004f54
 8008084:	20004f64 	.word	0x20004f64

08008088 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008088:	b480      	push	{r7}
 800808a:	b085      	sub	sp, #20
 800808c:	af00      	add	r7, sp, #0
 800808e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008090:	4b28      	ldr	r3, [pc, #160]	; (8008134 <prvInsertBlockIntoFreeList+0xac>)
 8008092:	60fb      	str	r3, [r7, #12]
 8008094:	e002      	b.n	800809c <prvInsertBlockIntoFreeList+0x14>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	60fb      	str	r3, [r7, #12]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	429a      	cmp	r2, r3
 80080a4:	d8f7      	bhi.n	8008096 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	685b      	ldr	r3, [r3, #4]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	4413      	add	r3, r2
 80080b2:	687a      	ldr	r2, [r7, #4]
 80080b4:	429a      	cmp	r2, r3
 80080b6:	d108      	bne.n	80080ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	685a      	ldr	r2, [r3, #4]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	441a      	add	r2, r3
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	685b      	ldr	r3, [r3, #4]
 80080d2:	68ba      	ldr	r2, [r7, #8]
 80080d4:	441a      	add	r2, r3
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	429a      	cmp	r2, r3
 80080dc:	d118      	bne.n	8008110 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	4b15      	ldr	r3, [pc, #84]	; (8008138 <prvInsertBlockIntoFreeList+0xb0>)
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d00d      	beq.n	8008106 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	685b      	ldr	r3, [r3, #4]
 80080f4:	441a      	add	r2, r3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	601a      	str	r2, [r3, #0]
 8008104:	e008      	b.n	8008118 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008106:	4b0c      	ldr	r3, [pc, #48]	; (8008138 <prvInsertBlockIntoFreeList+0xb0>)
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	601a      	str	r2, [r3, #0]
 800810e:	e003      	b.n	8008118 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008118:	68fa      	ldr	r2, [r7, #12]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	429a      	cmp	r2, r3
 800811e:	d002      	beq.n	8008126 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	687a      	ldr	r2, [r7, #4]
 8008124:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008126:	bf00      	nop
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	20004f48 	.word	0x20004f48
 8008138:	20004f50 	.word	0x20004f50

0800813c <__errno>:
 800813c:	4b01      	ldr	r3, [pc, #4]	; (8008144 <__errno+0x8>)
 800813e:	6818      	ldr	r0, [r3, #0]
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	200001f8 	.word	0x200001f8

08008148 <std>:
 8008148:	2300      	movs	r3, #0
 800814a:	b510      	push	{r4, lr}
 800814c:	4604      	mov	r4, r0
 800814e:	e9c0 3300 	strd	r3, r3, [r0]
 8008152:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008156:	6083      	str	r3, [r0, #8]
 8008158:	8181      	strh	r1, [r0, #12]
 800815a:	6643      	str	r3, [r0, #100]	; 0x64
 800815c:	81c2      	strh	r2, [r0, #14]
 800815e:	6183      	str	r3, [r0, #24]
 8008160:	4619      	mov	r1, r3
 8008162:	2208      	movs	r2, #8
 8008164:	305c      	adds	r0, #92	; 0x5c
 8008166:	f000 f91a 	bl	800839e <memset>
 800816a:	4b05      	ldr	r3, [pc, #20]	; (8008180 <std+0x38>)
 800816c:	6263      	str	r3, [r4, #36]	; 0x24
 800816e:	4b05      	ldr	r3, [pc, #20]	; (8008184 <std+0x3c>)
 8008170:	62a3      	str	r3, [r4, #40]	; 0x28
 8008172:	4b05      	ldr	r3, [pc, #20]	; (8008188 <std+0x40>)
 8008174:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008176:	4b05      	ldr	r3, [pc, #20]	; (800818c <std+0x44>)
 8008178:	6224      	str	r4, [r4, #32]
 800817a:	6323      	str	r3, [r4, #48]	; 0x30
 800817c:	bd10      	pop	{r4, pc}
 800817e:	bf00      	nop
 8008180:	0800930d 	.word	0x0800930d
 8008184:	0800932f 	.word	0x0800932f
 8008188:	08009367 	.word	0x08009367
 800818c:	0800938b 	.word	0x0800938b

08008190 <_cleanup_r>:
 8008190:	4901      	ldr	r1, [pc, #4]	; (8008198 <_cleanup_r+0x8>)
 8008192:	f000 b8af 	b.w	80082f4 <_fwalk_reent>
 8008196:	bf00      	nop
 8008198:	0800af39 	.word	0x0800af39

0800819c <__sfmoreglue>:
 800819c:	b570      	push	{r4, r5, r6, lr}
 800819e:	2268      	movs	r2, #104	; 0x68
 80081a0:	1e4d      	subs	r5, r1, #1
 80081a2:	4355      	muls	r5, r2
 80081a4:	460e      	mov	r6, r1
 80081a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80081aa:	f000 f921 	bl	80083f0 <_malloc_r>
 80081ae:	4604      	mov	r4, r0
 80081b0:	b140      	cbz	r0, 80081c4 <__sfmoreglue+0x28>
 80081b2:	2100      	movs	r1, #0
 80081b4:	e9c0 1600 	strd	r1, r6, [r0]
 80081b8:	300c      	adds	r0, #12
 80081ba:	60a0      	str	r0, [r4, #8]
 80081bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80081c0:	f000 f8ed 	bl	800839e <memset>
 80081c4:	4620      	mov	r0, r4
 80081c6:	bd70      	pop	{r4, r5, r6, pc}

080081c8 <__sfp_lock_acquire>:
 80081c8:	4801      	ldr	r0, [pc, #4]	; (80081d0 <__sfp_lock_acquire+0x8>)
 80081ca:	f000 b8d8 	b.w	800837e <__retarget_lock_acquire_recursive>
 80081ce:	bf00      	nop
 80081d0:	20004f69 	.word	0x20004f69

080081d4 <__sfp_lock_release>:
 80081d4:	4801      	ldr	r0, [pc, #4]	; (80081dc <__sfp_lock_release+0x8>)
 80081d6:	f000 b8d3 	b.w	8008380 <__retarget_lock_release_recursive>
 80081da:	bf00      	nop
 80081dc:	20004f69 	.word	0x20004f69

080081e0 <__sinit_lock_acquire>:
 80081e0:	4801      	ldr	r0, [pc, #4]	; (80081e8 <__sinit_lock_acquire+0x8>)
 80081e2:	f000 b8cc 	b.w	800837e <__retarget_lock_acquire_recursive>
 80081e6:	bf00      	nop
 80081e8:	20004f6a 	.word	0x20004f6a

080081ec <__sinit_lock_release>:
 80081ec:	4801      	ldr	r0, [pc, #4]	; (80081f4 <__sinit_lock_release+0x8>)
 80081ee:	f000 b8c7 	b.w	8008380 <__retarget_lock_release_recursive>
 80081f2:	bf00      	nop
 80081f4:	20004f6a 	.word	0x20004f6a

080081f8 <__sinit>:
 80081f8:	b510      	push	{r4, lr}
 80081fa:	4604      	mov	r4, r0
 80081fc:	f7ff fff0 	bl	80081e0 <__sinit_lock_acquire>
 8008200:	69a3      	ldr	r3, [r4, #24]
 8008202:	b11b      	cbz	r3, 800820c <__sinit+0x14>
 8008204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008208:	f7ff bff0 	b.w	80081ec <__sinit_lock_release>
 800820c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008210:	6523      	str	r3, [r4, #80]	; 0x50
 8008212:	4b13      	ldr	r3, [pc, #76]	; (8008260 <__sinit+0x68>)
 8008214:	4a13      	ldr	r2, [pc, #76]	; (8008264 <__sinit+0x6c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	62a2      	str	r2, [r4, #40]	; 0x28
 800821a:	42a3      	cmp	r3, r4
 800821c:	bf04      	itt	eq
 800821e:	2301      	moveq	r3, #1
 8008220:	61a3      	streq	r3, [r4, #24]
 8008222:	4620      	mov	r0, r4
 8008224:	f000 f820 	bl	8008268 <__sfp>
 8008228:	6060      	str	r0, [r4, #4]
 800822a:	4620      	mov	r0, r4
 800822c:	f000 f81c 	bl	8008268 <__sfp>
 8008230:	60a0      	str	r0, [r4, #8]
 8008232:	4620      	mov	r0, r4
 8008234:	f000 f818 	bl	8008268 <__sfp>
 8008238:	2200      	movs	r2, #0
 800823a:	60e0      	str	r0, [r4, #12]
 800823c:	2104      	movs	r1, #4
 800823e:	6860      	ldr	r0, [r4, #4]
 8008240:	f7ff ff82 	bl	8008148 <std>
 8008244:	68a0      	ldr	r0, [r4, #8]
 8008246:	2201      	movs	r2, #1
 8008248:	2109      	movs	r1, #9
 800824a:	f7ff ff7d 	bl	8008148 <std>
 800824e:	68e0      	ldr	r0, [r4, #12]
 8008250:	2202      	movs	r2, #2
 8008252:	2112      	movs	r1, #18
 8008254:	f7ff ff78 	bl	8008148 <std>
 8008258:	2301      	movs	r3, #1
 800825a:	61a3      	str	r3, [r4, #24]
 800825c:	e7d2      	b.n	8008204 <__sinit+0xc>
 800825e:	bf00      	nop
 8008260:	0800cd6c 	.word	0x0800cd6c
 8008264:	08008191 	.word	0x08008191

08008268 <__sfp>:
 8008268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800826a:	4607      	mov	r7, r0
 800826c:	f7ff ffac 	bl	80081c8 <__sfp_lock_acquire>
 8008270:	4b1e      	ldr	r3, [pc, #120]	; (80082ec <__sfp+0x84>)
 8008272:	681e      	ldr	r6, [r3, #0]
 8008274:	69b3      	ldr	r3, [r6, #24]
 8008276:	b913      	cbnz	r3, 800827e <__sfp+0x16>
 8008278:	4630      	mov	r0, r6
 800827a:	f7ff ffbd 	bl	80081f8 <__sinit>
 800827e:	3648      	adds	r6, #72	; 0x48
 8008280:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008284:	3b01      	subs	r3, #1
 8008286:	d503      	bpl.n	8008290 <__sfp+0x28>
 8008288:	6833      	ldr	r3, [r6, #0]
 800828a:	b30b      	cbz	r3, 80082d0 <__sfp+0x68>
 800828c:	6836      	ldr	r6, [r6, #0]
 800828e:	e7f7      	b.n	8008280 <__sfp+0x18>
 8008290:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008294:	b9d5      	cbnz	r5, 80082cc <__sfp+0x64>
 8008296:	4b16      	ldr	r3, [pc, #88]	; (80082f0 <__sfp+0x88>)
 8008298:	60e3      	str	r3, [r4, #12]
 800829a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800829e:	6665      	str	r5, [r4, #100]	; 0x64
 80082a0:	f000 f86c 	bl	800837c <__retarget_lock_init_recursive>
 80082a4:	f7ff ff96 	bl	80081d4 <__sfp_lock_release>
 80082a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80082ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80082b0:	6025      	str	r5, [r4, #0]
 80082b2:	61a5      	str	r5, [r4, #24]
 80082b4:	2208      	movs	r2, #8
 80082b6:	4629      	mov	r1, r5
 80082b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80082bc:	f000 f86f 	bl	800839e <memset>
 80082c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80082c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80082c8:	4620      	mov	r0, r4
 80082ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80082cc:	3468      	adds	r4, #104	; 0x68
 80082ce:	e7d9      	b.n	8008284 <__sfp+0x1c>
 80082d0:	2104      	movs	r1, #4
 80082d2:	4638      	mov	r0, r7
 80082d4:	f7ff ff62 	bl	800819c <__sfmoreglue>
 80082d8:	4604      	mov	r4, r0
 80082da:	6030      	str	r0, [r6, #0]
 80082dc:	2800      	cmp	r0, #0
 80082de:	d1d5      	bne.n	800828c <__sfp+0x24>
 80082e0:	f7ff ff78 	bl	80081d4 <__sfp_lock_release>
 80082e4:	230c      	movs	r3, #12
 80082e6:	603b      	str	r3, [r7, #0]
 80082e8:	e7ee      	b.n	80082c8 <__sfp+0x60>
 80082ea:	bf00      	nop
 80082ec:	0800cd6c 	.word	0x0800cd6c
 80082f0:	ffff0001 	.word	0xffff0001

080082f4 <_fwalk_reent>:
 80082f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80082f8:	4606      	mov	r6, r0
 80082fa:	4688      	mov	r8, r1
 80082fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008300:	2700      	movs	r7, #0
 8008302:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008306:	f1b9 0901 	subs.w	r9, r9, #1
 800830a:	d505      	bpl.n	8008318 <_fwalk_reent+0x24>
 800830c:	6824      	ldr	r4, [r4, #0]
 800830e:	2c00      	cmp	r4, #0
 8008310:	d1f7      	bne.n	8008302 <_fwalk_reent+0xe>
 8008312:	4638      	mov	r0, r7
 8008314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008318:	89ab      	ldrh	r3, [r5, #12]
 800831a:	2b01      	cmp	r3, #1
 800831c:	d907      	bls.n	800832e <_fwalk_reent+0x3a>
 800831e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008322:	3301      	adds	r3, #1
 8008324:	d003      	beq.n	800832e <_fwalk_reent+0x3a>
 8008326:	4629      	mov	r1, r5
 8008328:	4630      	mov	r0, r6
 800832a:	47c0      	blx	r8
 800832c:	4307      	orrs	r7, r0
 800832e:	3568      	adds	r5, #104	; 0x68
 8008330:	e7e9      	b.n	8008306 <_fwalk_reent+0x12>
	...

08008334 <__libc_init_array>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	4d0d      	ldr	r5, [pc, #52]	; (800836c <__libc_init_array+0x38>)
 8008338:	4c0d      	ldr	r4, [pc, #52]	; (8008370 <__libc_init_array+0x3c>)
 800833a:	1b64      	subs	r4, r4, r5
 800833c:	10a4      	asrs	r4, r4, #2
 800833e:	2600      	movs	r6, #0
 8008340:	42a6      	cmp	r6, r4
 8008342:	d109      	bne.n	8008358 <__libc_init_array+0x24>
 8008344:	4d0b      	ldr	r5, [pc, #44]	; (8008374 <__libc_init_array+0x40>)
 8008346:	4c0c      	ldr	r4, [pc, #48]	; (8008378 <__libc_init_array+0x44>)
 8008348:	f004 fc2c 	bl	800cba4 <_init>
 800834c:	1b64      	subs	r4, r4, r5
 800834e:	10a4      	asrs	r4, r4, #2
 8008350:	2600      	movs	r6, #0
 8008352:	42a6      	cmp	r6, r4
 8008354:	d105      	bne.n	8008362 <__libc_init_array+0x2e>
 8008356:	bd70      	pop	{r4, r5, r6, pc}
 8008358:	f855 3b04 	ldr.w	r3, [r5], #4
 800835c:	4798      	blx	r3
 800835e:	3601      	adds	r6, #1
 8008360:	e7ee      	b.n	8008340 <__libc_init_array+0xc>
 8008362:	f855 3b04 	ldr.w	r3, [r5], #4
 8008366:	4798      	blx	r3
 8008368:	3601      	adds	r6, #1
 800836a:	e7f2      	b.n	8008352 <__libc_init_array+0x1e>
 800836c:	0800d1bc 	.word	0x0800d1bc
 8008370:	0800d1bc 	.word	0x0800d1bc
 8008374:	0800d1bc 	.word	0x0800d1bc
 8008378:	0800d1c0 	.word	0x0800d1c0

0800837c <__retarget_lock_init_recursive>:
 800837c:	4770      	bx	lr

0800837e <__retarget_lock_acquire_recursive>:
 800837e:	4770      	bx	lr

08008380 <__retarget_lock_release_recursive>:
 8008380:	4770      	bx	lr

08008382 <memcpy>:
 8008382:	440a      	add	r2, r1
 8008384:	4291      	cmp	r1, r2
 8008386:	f100 33ff 	add.w	r3, r0, #4294967295
 800838a:	d100      	bne.n	800838e <memcpy+0xc>
 800838c:	4770      	bx	lr
 800838e:	b510      	push	{r4, lr}
 8008390:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008394:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008398:	4291      	cmp	r1, r2
 800839a:	d1f9      	bne.n	8008390 <memcpy+0xe>
 800839c:	bd10      	pop	{r4, pc}

0800839e <memset>:
 800839e:	4402      	add	r2, r0
 80083a0:	4603      	mov	r3, r0
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d100      	bne.n	80083a8 <memset+0xa>
 80083a6:	4770      	bx	lr
 80083a8:	f803 1b01 	strb.w	r1, [r3], #1
 80083ac:	e7f9      	b.n	80083a2 <memset+0x4>
	...

080083b0 <sbrk_aligned>:
 80083b0:	b570      	push	{r4, r5, r6, lr}
 80083b2:	4e0e      	ldr	r6, [pc, #56]	; (80083ec <sbrk_aligned+0x3c>)
 80083b4:	460c      	mov	r4, r1
 80083b6:	6831      	ldr	r1, [r6, #0]
 80083b8:	4605      	mov	r5, r0
 80083ba:	b911      	cbnz	r1, 80083c2 <sbrk_aligned+0x12>
 80083bc:	f000 ff70 	bl	80092a0 <_sbrk_r>
 80083c0:	6030      	str	r0, [r6, #0]
 80083c2:	4621      	mov	r1, r4
 80083c4:	4628      	mov	r0, r5
 80083c6:	f000 ff6b 	bl	80092a0 <_sbrk_r>
 80083ca:	1c43      	adds	r3, r0, #1
 80083cc:	d00a      	beq.n	80083e4 <sbrk_aligned+0x34>
 80083ce:	1cc4      	adds	r4, r0, #3
 80083d0:	f024 0403 	bic.w	r4, r4, #3
 80083d4:	42a0      	cmp	r0, r4
 80083d6:	d007      	beq.n	80083e8 <sbrk_aligned+0x38>
 80083d8:	1a21      	subs	r1, r4, r0
 80083da:	4628      	mov	r0, r5
 80083dc:	f000 ff60 	bl	80092a0 <_sbrk_r>
 80083e0:	3001      	adds	r0, #1
 80083e2:	d101      	bne.n	80083e8 <sbrk_aligned+0x38>
 80083e4:	f04f 34ff 	mov.w	r4, #4294967295
 80083e8:	4620      	mov	r0, r4
 80083ea:	bd70      	pop	{r4, r5, r6, pc}
 80083ec:	20004f70 	.word	0x20004f70

080083f0 <_malloc_r>:
 80083f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083f4:	1ccd      	adds	r5, r1, #3
 80083f6:	f025 0503 	bic.w	r5, r5, #3
 80083fa:	3508      	adds	r5, #8
 80083fc:	2d0c      	cmp	r5, #12
 80083fe:	bf38      	it	cc
 8008400:	250c      	movcc	r5, #12
 8008402:	2d00      	cmp	r5, #0
 8008404:	4607      	mov	r7, r0
 8008406:	db01      	blt.n	800840c <_malloc_r+0x1c>
 8008408:	42a9      	cmp	r1, r5
 800840a:	d905      	bls.n	8008418 <_malloc_r+0x28>
 800840c:	230c      	movs	r3, #12
 800840e:	603b      	str	r3, [r7, #0]
 8008410:	2600      	movs	r6, #0
 8008412:	4630      	mov	r0, r6
 8008414:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008418:	4e2e      	ldr	r6, [pc, #184]	; (80084d4 <_malloc_r+0xe4>)
 800841a:	f003 f969 	bl	800b6f0 <__malloc_lock>
 800841e:	6833      	ldr	r3, [r6, #0]
 8008420:	461c      	mov	r4, r3
 8008422:	bb34      	cbnz	r4, 8008472 <_malloc_r+0x82>
 8008424:	4629      	mov	r1, r5
 8008426:	4638      	mov	r0, r7
 8008428:	f7ff ffc2 	bl	80083b0 <sbrk_aligned>
 800842c:	1c43      	adds	r3, r0, #1
 800842e:	4604      	mov	r4, r0
 8008430:	d14d      	bne.n	80084ce <_malloc_r+0xde>
 8008432:	6834      	ldr	r4, [r6, #0]
 8008434:	4626      	mov	r6, r4
 8008436:	2e00      	cmp	r6, #0
 8008438:	d140      	bne.n	80084bc <_malloc_r+0xcc>
 800843a:	6823      	ldr	r3, [r4, #0]
 800843c:	4631      	mov	r1, r6
 800843e:	4638      	mov	r0, r7
 8008440:	eb04 0803 	add.w	r8, r4, r3
 8008444:	f000 ff2c 	bl	80092a0 <_sbrk_r>
 8008448:	4580      	cmp	r8, r0
 800844a:	d13a      	bne.n	80084c2 <_malloc_r+0xd2>
 800844c:	6821      	ldr	r1, [r4, #0]
 800844e:	3503      	adds	r5, #3
 8008450:	1a6d      	subs	r5, r5, r1
 8008452:	f025 0503 	bic.w	r5, r5, #3
 8008456:	3508      	adds	r5, #8
 8008458:	2d0c      	cmp	r5, #12
 800845a:	bf38      	it	cc
 800845c:	250c      	movcc	r5, #12
 800845e:	4629      	mov	r1, r5
 8008460:	4638      	mov	r0, r7
 8008462:	f7ff ffa5 	bl	80083b0 <sbrk_aligned>
 8008466:	3001      	adds	r0, #1
 8008468:	d02b      	beq.n	80084c2 <_malloc_r+0xd2>
 800846a:	6823      	ldr	r3, [r4, #0]
 800846c:	442b      	add	r3, r5
 800846e:	6023      	str	r3, [r4, #0]
 8008470:	e00e      	b.n	8008490 <_malloc_r+0xa0>
 8008472:	6822      	ldr	r2, [r4, #0]
 8008474:	1b52      	subs	r2, r2, r5
 8008476:	d41e      	bmi.n	80084b6 <_malloc_r+0xc6>
 8008478:	2a0b      	cmp	r2, #11
 800847a:	d916      	bls.n	80084aa <_malloc_r+0xba>
 800847c:	1961      	adds	r1, r4, r5
 800847e:	42a3      	cmp	r3, r4
 8008480:	6025      	str	r5, [r4, #0]
 8008482:	bf18      	it	ne
 8008484:	6059      	strne	r1, [r3, #4]
 8008486:	6863      	ldr	r3, [r4, #4]
 8008488:	bf08      	it	eq
 800848a:	6031      	streq	r1, [r6, #0]
 800848c:	5162      	str	r2, [r4, r5]
 800848e:	604b      	str	r3, [r1, #4]
 8008490:	4638      	mov	r0, r7
 8008492:	f104 060b 	add.w	r6, r4, #11
 8008496:	f003 f931 	bl	800b6fc <__malloc_unlock>
 800849a:	f026 0607 	bic.w	r6, r6, #7
 800849e:	1d23      	adds	r3, r4, #4
 80084a0:	1af2      	subs	r2, r6, r3
 80084a2:	d0b6      	beq.n	8008412 <_malloc_r+0x22>
 80084a4:	1b9b      	subs	r3, r3, r6
 80084a6:	50a3      	str	r3, [r4, r2]
 80084a8:	e7b3      	b.n	8008412 <_malloc_r+0x22>
 80084aa:	6862      	ldr	r2, [r4, #4]
 80084ac:	42a3      	cmp	r3, r4
 80084ae:	bf0c      	ite	eq
 80084b0:	6032      	streq	r2, [r6, #0]
 80084b2:	605a      	strne	r2, [r3, #4]
 80084b4:	e7ec      	b.n	8008490 <_malloc_r+0xa0>
 80084b6:	4623      	mov	r3, r4
 80084b8:	6864      	ldr	r4, [r4, #4]
 80084ba:	e7b2      	b.n	8008422 <_malloc_r+0x32>
 80084bc:	4634      	mov	r4, r6
 80084be:	6876      	ldr	r6, [r6, #4]
 80084c0:	e7b9      	b.n	8008436 <_malloc_r+0x46>
 80084c2:	230c      	movs	r3, #12
 80084c4:	603b      	str	r3, [r7, #0]
 80084c6:	4638      	mov	r0, r7
 80084c8:	f003 f918 	bl	800b6fc <__malloc_unlock>
 80084cc:	e7a1      	b.n	8008412 <_malloc_r+0x22>
 80084ce:	6025      	str	r5, [r4, #0]
 80084d0:	e7de      	b.n	8008490 <_malloc_r+0xa0>
 80084d2:	bf00      	nop
 80084d4:	20004f6c 	.word	0x20004f6c

080084d8 <__cvt>:
 80084d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084dc:	ec55 4b10 	vmov	r4, r5, d0
 80084e0:	2d00      	cmp	r5, #0
 80084e2:	460e      	mov	r6, r1
 80084e4:	4619      	mov	r1, r3
 80084e6:	462b      	mov	r3, r5
 80084e8:	bfbb      	ittet	lt
 80084ea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80084ee:	461d      	movlt	r5, r3
 80084f0:	2300      	movge	r3, #0
 80084f2:	232d      	movlt	r3, #45	; 0x2d
 80084f4:	700b      	strb	r3, [r1, #0]
 80084f6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80084f8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80084fc:	4691      	mov	r9, r2
 80084fe:	f023 0820 	bic.w	r8, r3, #32
 8008502:	bfbc      	itt	lt
 8008504:	4622      	movlt	r2, r4
 8008506:	4614      	movlt	r4, r2
 8008508:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800850c:	d005      	beq.n	800851a <__cvt+0x42>
 800850e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008512:	d100      	bne.n	8008516 <__cvt+0x3e>
 8008514:	3601      	adds	r6, #1
 8008516:	2102      	movs	r1, #2
 8008518:	e000      	b.n	800851c <__cvt+0x44>
 800851a:	2103      	movs	r1, #3
 800851c:	ab03      	add	r3, sp, #12
 800851e:	9301      	str	r3, [sp, #4]
 8008520:	ab02      	add	r3, sp, #8
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	ec45 4b10 	vmov	d0, r4, r5
 8008528:	4653      	mov	r3, sl
 800852a:	4632      	mov	r2, r6
 800852c:	f001 fe90 	bl	800a250 <_dtoa_r>
 8008530:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008534:	4607      	mov	r7, r0
 8008536:	d102      	bne.n	800853e <__cvt+0x66>
 8008538:	f019 0f01 	tst.w	r9, #1
 800853c:	d022      	beq.n	8008584 <__cvt+0xac>
 800853e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008542:	eb07 0906 	add.w	r9, r7, r6
 8008546:	d110      	bne.n	800856a <__cvt+0x92>
 8008548:	783b      	ldrb	r3, [r7, #0]
 800854a:	2b30      	cmp	r3, #48	; 0x30
 800854c:	d10a      	bne.n	8008564 <__cvt+0x8c>
 800854e:	2200      	movs	r2, #0
 8008550:	2300      	movs	r3, #0
 8008552:	4620      	mov	r0, r4
 8008554:	4629      	mov	r1, r5
 8008556:	f7f8 fac7 	bl	8000ae8 <__aeabi_dcmpeq>
 800855a:	b918      	cbnz	r0, 8008564 <__cvt+0x8c>
 800855c:	f1c6 0601 	rsb	r6, r6, #1
 8008560:	f8ca 6000 	str.w	r6, [sl]
 8008564:	f8da 3000 	ldr.w	r3, [sl]
 8008568:	4499      	add	r9, r3
 800856a:	2200      	movs	r2, #0
 800856c:	2300      	movs	r3, #0
 800856e:	4620      	mov	r0, r4
 8008570:	4629      	mov	r1, r5
 8008572:	f7f8 fab9 	bl	8000ae8 <__aeabi_dcmpeq>
 8008576:	b108      	cbz	r0, 800857c <__cvt+0xa4>
 8008578:	f8cd 900c 	str.w	r9, [sp, #12]
 800857c:	2230      	movs	r2, #48	; 0x30
 800857e:	9b03      	ldr	r3, [sp, #12]
 8008580:	454b      	cmp	r3, r9
 8008582:	d307      	bcc.n	8008594 <__cvt+0xbc>
 8008584:	9b03      	ldr	r3, [sp, #12]
 8008586:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008588:	1bdb      	subs	r3, r3, r7
 800858a:	4638      	mov	r0, r7
 800858c:	6013      	str	r3, [r2, #0]
 800858e:	b004      	add	sp, #16
 8008590:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008594:	1c59      	adds	r1, r3, #1
 8008596:	9103      	str	r1, [sp, #12]
 8008598:	701a      	strb	r2, [r3, #0]
 800859a:	e7f0      	b.n	800857e <__cvt+0xa6>

0800859c <__exponent>:
 800859c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800859e:	4603      	mov	r3, r0
 80085a0:	2900      	cmp	r1, #0
 80085a2:	bfb8      	it	lt
 80085a4:	4249      	neglt	r1, r1
 80085a6:	f803 2b02 	strb.w	r2, [r3], #2
 80085aa:	bfb4      	ite	lt
 80085ac:	222d      	movlt	r2, #45	; 0x2d
 80085ae:	222b      	movge	r2, #43	; 0x2b
 80085b0:	2909      	cmp	r1, #9
 80085b2:	7042      	strb	r2, [r0, #1]
 80085b4:	dd2a      	ble.n	800860c <__exponent+0x70>
 80085b6:	f10d 0407 	add.w	r4, sp, #7
 80085ba:	46a4      	mov	ip, r4
 80085bc:	270a      	movs	r7, #10
 80085be:	46a6      	mov	lr, r4
 80085c0:	460a      	mov	r2, r1
 80085c2:	fb91 f6f7 	sdiv	r6, r1, r7
 80085c6:	fb07 1516 	mls	r5, r7, r6, r1
 80085ca:	3530      	adds	r5, #48	; 0x30
 80085cc:	2a63      	cmp	r2, #99	; 0x63
 80085ce:	f104 34ff 	add.w	r4, r4, #4294967295
 80085d2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80085d6:	4631      	mov	r1, r6
 80085d8:	dcf1      	bgt.n	80085be <__exponent+0x22>
 80085da:	3130      	adds	r1, #48	; 0x30
 80085dc:	f1ae 0502 	sub.w	r5, lr, #2
 80085e0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80085e4:	1c44      	adds	r4, r0, #1
 80085e6:	4629      	mov	r1, r5
 80085e8:	4561      	cmp	r1, ip
 80085ea:	d30a      	bcc.n	8008602 <__exponent+0x66>
 80085ec:	f10d 0209 	add.w	r2, sp, #9
 80085f0:	eba2 020e 	sub.w	r2, r2, lr
 80085f4:	4565      	cmp	r5, ip
 80085f6:	bf88      	it	hi
 80085f8:	2200      	movhi	r2, #0
 80085fa:	4413      	add	r3, r2
 80085fc:	1a18      	subs	r0, r3, r0
 80085fe:	b003      	add	sp, #12
 8008600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008602:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008606:	f804 2f01 	strb.w	r2, [r4, #1]!
 800860a:	e7ed      	b.n	80085e8 <__exponent+0x4c>
 800860c:	2330      	movs	r3, #48	; 0x30
 800860e:	3130      	adds	r1, #48	; 0x30
 8008610:	7083      	strb	r3, [r0, #2]
 8008612:	70c1      	strb	r1, [r0, #3]
 8008614:	1d03      	adds	r3, r0, #4
 8008616:	e7f1      	b.n	80085fc <__exponent+0x60>

08008618 <_printf_float>:
 8008618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861c:	ed2d 8b02 	vpush	{d8}
 8008620:	b08d      	sub	sp, #52	; 0x34
 8008622:	460c      	mov	r4, r1
 8008624:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008628:	4616      	mov	r6, r2
 800862a:	461f      	mov	r7, r3
 800862c:	4605      	mov	r5, r0
 800862e:	f003 f82f 	bl	800b690 <_localeconv_r>
 8008632:	f8d0 a000 	ldr.w	sl, [r0]
 8008636:	4650      	mov	r0, sl
 8008638:	f7f7 fdda 	bl	80001f0 <strlen>
 800863c:	2300      	movs	r3, #0
 800863e:	930a      	str	r3, [sp, #40]	; 0x28
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	9305      	str	r3, [sp, #20]
 8008644:	f8d8 3000 	ldr.w	r3, [r8]
 8008648:	f894 b018 	ldrb.w	fp, [r4, #24]
 800864c:	3307      	adds	r3, #7
 800864e:	f023 0307 	bic.w	r3, r3, #7
 8008652:	f103 0208 	add.w	r2, r3, #8
 8008656:	f8c8 2000 	str.w	r2, [r8]
 800865a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008662:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008666:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800866a:	9307      	str	r3, [sp, #28]
 800866c:	f8cd 8018 	str.w	r8, [sp, #24]
 8008670:	ee08 0a10 	vmov	s16, r0
 8008674:	4b9f      	ldr	r3, [pc, #636]	; (80088f4 <_printf_float+0x2dc>)
 8008676:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800867a:	f04f 32ff 	mov.w	r2, #4294967295
 800867e:	f7f8 fa65 	bl	8000b4c <__aeabi_dcmpun>
 8008682:	bb88      	cbnz	r0, 80086e8 <_printf_float+0xd0>
 8008684:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008688:	4b9a      	ldr	r3, [pc, #616]	; (80088f4 <_printf_float+0x2dc>)
 800868a:	f04f 32ff 	mov.w	r2, #4294967295
 800868e:	f7f8 fa3f 	bl	8000b10 <__aeabi_dcmple>
 8008692:	bb48      	cbnz	r0, 80086e8 <_printf_float+0xd0>
 8008694:	2200      	movs	r2, #0
 8008696:	2300      	movs	r3, #0
 8008698:	4640      	mov	r0, r8
 800869a:	4649      	mov	r1, r9
 800869c:	f7f8 fa2e 	bl	8000afc <__aeabi_dcmplt>
 80086a0:	b110      	cbz	r0, 80086a8 <_printf_float+0x90>
 80086a2:	232d      	movs	r3, #45	; 0x2d
 80086a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086a8:	4b93      	ldr	r3, [pc, #588]	; (80088f8 <_printf_float+0x2e0>)
 80086aa:	4894      	ldr	r0, [pc, #592]	; (80088fc <_printf_float+0x2e4>)
 80086ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80086b0:	bf94      	ite	ls
 80086b2:	4698      	movls	r8, r3
 80086b4:	4680      	movhi	r8, r0
 80086b6:	2303      	movs	r3, #3
 80086b8:	6123      	str	r3, [r4, #16]
 80086ba:	9b05      	ldr	r3, [sp, #20]
 80086bc:	f023 0204 	bic.w	r2, r3, #4
 80086c0:	6022      	str	r2, [r4, #0]
 80086c2:	f04f 0900 	mov.w	r9, #0
 80086c6:	9700      	str	r7, [sp, #0]
 80086c8:	4633      	mov	r3, r6
 80086ca:	aa0b      	add	r2, sp, #44	; 0x2c
 80086cc:	4621      	mov	r1, r4
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 f9d8 	bl	8008a84 <_printf_common>
 80086d4:	3001      	adds	r0, #1
 80086d6:	f040 8090 	bne.w	80087fa <_printf_float+0x1e2>
 80086da:	f04f 30ff 	mov.w	r0, #4294967295
 80086de:	b00d      	add	sp, #52	; 0x34
 80086e0:	ecbd 8b02 	vpop	{d8}
 80086e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e8:	4642      	mov	r2, r8
 80086ea:	464b      	mov	r3, r9
 80086ec:	4640      	mov	r0, r8
 80086ee:	4649      	mov	r1, r9
 80086f0:	f7f8 fa2c 	bl	8000b4c <__aeabi_dcmpun>
 80086f4:	b140      	cbz	r0, 8008708 <_printf_float+0xf0>
 80086f6:	464b      	mov	r3, r9
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bfbc      	itt	lt
 80086fc:	232d      	movlt	r3, #45	; 0x2d
 80086fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008702:	487f      	ldr	r0, [pc, #508]	; (8008900 <_printf_float+0x2e8>)
 8008704:	4b7f      	ldr	r3, [pc, #508]	; (8008904 <_printf_float+0x2ec>)
 8008706:	e7d1      	b.n	80086ac <_printf_float+0x94>
 8008708:	6863      	ldr	r3, [r4, #4]
 800870a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800870e:	9206      	str	r2, [sp, #24]
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	d13f      	bne.n	8008794 <_printf_float+0x17c>
 8008714:	2306      	movs	r3, #6
 8008716:	6063      	str	r3, [r4, #4]
 8008718:	9b05      	ldr	r3, [sp, #20]
 800871a:	6861      	ldr	r1, [r4, #4]
 800871c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008720:	2300      	movs	r3, #0
 8008722:	9303      	str	r3, [sp, #12]
 8008724:	ab0a      	add	r3, sp, #40	; 0x28
 8008726:	e9cd b301 	strd	fp, r3, [sp, #4]
 800872a:	ab09      	add	r3, sp, #36	; 0x24
 800872c:	ec49 8b10 	vmov	d0, r8, r9
 8008730:	9300      	str	r3, [sp, #0]
 8008732:	6022      	str	r2, [r4, #0]
 8008734:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008738:	4628      	mov	r0, r5
 800873a:	f7ff fecd 	bl	80084d8 <__cvt>
 800873e:	9b06      	ldr	r3, [sp, #24]
 8008740:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008742:	2b47      	cmp	r3, #71	; 0x47
 8008744:	4680      	mov	r8, r0
 8008746:	d108      	bne.n	800875a <_printf_float+0x142>
 8008748:	1cc8      	adds	r0, r1, #3
 800874a:	db02      	blt.n	8008752 <_printf_float+0x13a>
 800874c:	6863      	ldr	r3, [r4, #4]
 800874e:	4299      	cmp	r1, r3
 8008750:	dd41      	ble.n	80087d6 <_printf_float+0x1be>
 8008752:	f1ab 0b02 	sub.w	fp, fp, #2
 8008756:	fa5f fb8b 	uxtb.w	fp, fp
 800875a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800875e:	d820      	bhi.n	80087a2 <_printf_float+0x18a>
 8008760:	3901      	subs	r1, #1
 8008762:	465a      	mov	r2, fp
 8008764:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008768:	9109      	str	r1, [sp, #36]	; 0x24
 800876a:	f7ff ff17 	bl	800859c <__exponent>
 800876e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008770:	1813      	adds	r3, r2, r0
 8008772:	2a01      	cmp	r2, #1
 8008774:	4681      	mov	r9, r0
 8008776:	6123      	str	r3, [r4, #16]
 8008778:	dc02      	bgt.n	8008780 <_printf_float+0x168>
 800877a:	6822      	ldr	r2, [r4, #0]
 800877c:	07d2      	lsls	r2, r2, #31
 800877e:	d501      	bpl.n	8008784 <_printf_float+0x16c>
 8008780:	3301      	adds	r3, #1
 8008782:	6123      	str	r3, [r4, #16]
 8008784:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008788:	2b00      	cmp	r3, #0
 800878a:	d09c      	beq.n	80086c6 <_printf_float+0xae>
 800878c:	232d      	movs	r3, #45	; 0x2d
 800878e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008792:	e798      	b.n	80086c6 <_printf_float+0xae>
 8008794:	9a06      	ldr	r2, [sp, #24]
 8008796:	2a47      	cmp	r2, #71	; 0x47
 8008798:	d1be      	bne.n	8008718 <_printf_float+0x100>
 800879a:	2b00      	cmp	r3, #0
 800879c:	d1bc      	bne.n	8008718 <_printf_float+0x100>
 800879e:	2301      	movs	r3, #1
 80087a0:	e7b9      	b.n	8008716 <_printf_float+0xfe>
 80087a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80087a6:	d118      	bne.n	80087da <_printf_float+0x1c2>
 80087a8:	2900      	cmp	r1, #0
 80087aa:	6863      	ldr	r3, [r4, #4]
 80087ac:	dd0b      	ble.n	80087c6 <_printf_float+0x1ae>
 80087ae:	6121      	str	r1, [r4, #16]
 80087b0:	b913      	cbnz	r3, 80087b8 <_printf_float+0x1a0>
 80087b2:	6822      	ldr	r2, [r4, #0]
 80087b4:	07d0      	lsls	r0, r2, #31
 80087b6:	d502      	bpl.n	80087be <_printf_float+0x1a6>
 80087b8:	3301      	adds	r3, #1
 80087ba:	440b      	add	r3, r1
 80087bc:	6123      	str	r3, [r4, #16]
 80087be:	65a1      	str	r1, [r4, #88]	; 0x58
 80087c0:	f04f 0900 	mov.w	r9, #0
 80087c4:	e7de      	b.n	8008784 <_printf_float+0x16c>
 80087c6:	b913      	cbnz	r3, 80087ce <_printf_float+0x1b6>
 80087c8:	6822      	ldr	r2, [r4, #0]
 80087ca:	07d2      	lsls	r2, r2, #31
 80087cc:	d501      	bpl.n	80087d2 <_printf_float+0x1ba>
 80087ce:	3302      	adds	r3, #2
 80087d0:	e7f4      	b.n	80087bc <_printf_float+0x1a4>
 80087d2:	2301      	movs	r3, #1
 80087d4:	e7f2      	b.n	80087bc <_printf_float+0x1a4>
 80087d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80087da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087dc:	4299      	cmp	r1, r3
 80087de:	db05      	blt.n	80087ec <_printf_float+0x1d4>
 80087e0:	6823      	ldr	r3, [r4, #0]
 80087e2:	6121      	str	r1, [r4, #16]
 80087e4:	07d8      	lsls	r0, r3, #31
 80087e6:	d5ea      	bpl.n	80087be <_printf_float+0x1a6>
 80087e8:	1c4b      	adds	r3, r1, #1
 80087ea:	e7e7      	b.n	80087bc <_printf_float+0x1a4>
 80087ec:	2900      	cmp	r1, #0
 80087ee:	bfd4      	ite	le
 80087f0:	f1c1 0202 	rsble	r2, r1, #2
 80087f4:	2201      	movgt	r2, #1
 80087f6:	4413      	add	r3, r2
 80087f8:	e7e0      	b.n	80087bc <_printf_float+0x1a4>
 80087fa:	6823      	ldr	r3, [r4, #0]
 80087fc:	055a      	lsls	r2, r3, #21
 80087fe:	d407      	bmi.n	8008810 <_printf_float+0x1f8>
 8008800:	6923      	ldr	r3, [r4, #16]
 8008802:	4642      	mov	r2, r8
 8008804:	4631      	mov	r1, r6
 8008806:	4628      	mov	r0, r5
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	d12c      	bne.n	8008868 <_printf_float+0x250>
 800880e:	e764      	b.n	80086da <_printf_float+0xc2>
 8008810:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008814:	f240 80e0 	bls.w	80089d8 <_printf_float+0x3c0>
 8008818:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800881c:	2200      	movs	r2, #0
 800881e:	2300      	movs	r3, #0
 8008820:	f7f8 f962 	bl	8000ae8 <__aeabi_dcmpeq>
 8008824:	2800      	cmp	r0, #0
 8008826:	d034      	beq.n	8008892 <_printf_float+0x27a>
 8008828:	4a37      	ldr	r2, [pc, #220]	; (8008908 <_printf_float+0x2f0>)
 800882a:	2301      	movs	r3, #1
 800882c:	4631      	mov	r1, r6
 800882e:	4628      	mov	r0, r5
 8008830:	47b8      	blx	r7
 8008832:	3001      	adds	r0, #1
 8008834:	f43f af51 	beq.w	80086da <_printf_float+0xc2>
 8008838:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800883c:	429a      	cmp	r2, r3
 800883e:	db02      	blt.n	8008846 <_printf_float+0x22e>
 8008840:	6823      	ldr	r3, [r4, #0]
 8008842:	07d8      	lsls	r0, r3, #31
 8008844:	d510      	bpl.n	8008868 <_printf_float+0x250>
 8008846:	ee18 3a10 	vmov	r3, s16
 800884a:	4652      	mov	r2, sl
 800884c:	4631      	mov	r1, r6
 800884e:	4628      	mov	r0, r5
 8008850:	47b8      	blx	r7
 8008852:	3001      	adds	r0, #1
 8008854:	f43f af41 	beq.w	80086da <_printf_float+0xc2>
 8008858:	f04f 0800 	mov.w	r8, #0
 800885c:	f104 091a 	add.w	r9, r4, #26
 8008860:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008862:	3b01      	subs	r3, #1
 8008864:	4543      	cmp	r3, r8
 8008866:	dc09      	bgt.n	800887c <_printf_float+0x264>
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	079b      	lsls	r3, r3, #30
 800886c:	f100 8105 	bmi.w	8008a7a <_printf_float+0x462>
 8008870:	68e0      	ldr	r0, [r4, #12]
 8008872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008874:	4298      	cmp	r0, r3
 8008876:	bfb8      	it	lt
 8008878:	4618      	movlt	r0, r3
 800887a:	e730      	b.n	80086de <_printf_float+0xc6>
 800887c:	2301      	movs	r3, #1
 800887e:	464a      	mov	r2, r9
 8008880:	4631      	mov	r1, r6
 8008882:	4628      	mov	r0, r5
 8008884:	47b8      	blx	r7
 8008886:	3001      	adds	r0, #1
 8008888:	f43f af27 	beq.w	80086da <_printf_float+0xc2>
 800888c:	f108 0801 	add.w	r8, r8, #1
 8008890:	e7e6      	b.n	8008860 <_printf_float+0x248>
 8008892:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008894:	2b00      	cmp	r3, #0
 8008896:	dc39      	bgt.n	800890c <_printf_float+0x2f4>
 8008898:	4a1b      	ldr	r2, [pc, #108]	; (8008908 <_printf_float+0x2f0>)
 800889a:	2301      	movs	r3, #1
 800889c:	4631      	mov	r1, r6
 800889e:	4628      	mov	r0, r5
 80088a0:	47b8      	blx	r7
 80088a2:	3001      	adds	r0, #1
 80088a4:	f43f af19 	beq.w	80086da <_printf_float+0xc2>
 80088a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80088ac:	4313      	orrs	r3, r2
 80088ae:	d102      	bne.n	80088b6 <_printf_float+0x29e>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	07d9      	lsls	r1, r3, #31
 80088b4:	d5d8      	bpl.n	8008868 <_printf_float+0x250>
 80088b6:	ee18 3a10 	vmov	r3, s16
 80088ba:	4652      	mov	r2, sl
 80088bc:	4631      	mov	r1, r6
 80088be:	4628      	mov	r0, r5
 80088c0:	47b8      	blx	r7
 80088c2:	3001      	adds	r0, #1
 80088c4:	f43f af09 	beq.w	80086da <_printf_float+0xc2>
 80088c8:	f04f 0900 	mov.w	r9, #0
 80088cc:	f104 0a1a 	add.w	sl, r4, #26
 80088d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80088d2:	425b      	negs	r3, r3
 80088d4:	454b      	cmp	r3, r9
 80088d6:	dc01      	bgt.n	80088dc <_printf_float+0x2c4>
 80088d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088da:	e792      	b.n	8008802 <_printf_float+0x1ea>
 80088dc:	2301      	movs	r3, #1
 80088de:	4652      	mov	r2, sl
 80088e0:	4631      	mov	r1, r6
 80088e2:	4628      	mov	r0, r5
 80088e4:	47b8      	blx	r7
 80088e6:	3001      	adds	r0, #1
 80088e8:	f43f aef7 	beq.w	80086da <_printf_float+0xc2>
 80088ec:	f109 0901 	add.w	r9, r9, #1
 80088f0:	e7ee      	b.n	80088d0 <_printf_float+0x2b8>
 80088f2:	bf00      	nop
 80088f4:	7fefffff 	.word	0x7fefffff
 80088f8:	0800cd70 	.word	0x0800cd70
 80088fc:	0800cd74 	.word	0x0800cd74
 8008900:	0800cd7c 	.word	0x0800cd7c
 8008904:	0800cd78 	.word	0x0800cd78
 8008908:	0800cd80 	.word	0x0800cd80
 800890c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800890e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008910:	429a      	cmp	r2, r3
 8008912:	bfa8      	it	ge
 8008914:	461a      	movge	r2, r3
 8008916:	2a00      	cmp	r2, #0
 8008918:	4691      	mov	r9, r2
 800891a:	dc37      	bgt.n	800898c <_printf_float+0x374>
 800891c:	f04f 0b00 	mov.w	fp, #0
 8008920:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008924:	f104 021a 	add.w	r2, r4, #26
 8008928:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800892a:	9305      	str	r3, [sp, #20]
 800892c:	eba3 0309 	sub.w	r3, r3, r9
 8008930:	455b      	cmp	r3, fp
 8008932:	dc33      	bgt.n	800899c <_printf_float+0x384>
 8008934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008938:	429a      	cmp	r2, r3
 800893a:	db3b      	blt.n	80089b4 <_printf_float+0x39c>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	07da      	lsls	r2, r3, #31
 8008940:	d438      	bmi.n	80089b4 <_printf_float+0x39c>
 8008942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008944:	9a05      	ldr	r2, [sp, #20]
 8008946:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008948:	1a9a      	subs	r2, r3, r2
 800894a:	eba3 0901 	sub.w	r9, r3, r1
 800894e:	4591      	cmp	r9, r2
 8008950:	bfa8      	it	ge
 8008952:	4691      	movge	r9, r2
 8008954:	f1b9 0f00 	cmp.w	r9, #0
 8008958:	dc35      	bgt.n	80089c6 <_printf_float+0x3ae>
 800895a:	f04f 0800 	mov.w	r8, #0
 800895e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008962:	f104 0a1a 	add.w	sl, r4, #26
 8008966:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800896a:	1a9b      	subs	r3, r3, r2
 800896c:	eba3 0309 	sub.w	r3, r3, r9
 8008970:	4543      	cmp	r3, r8
 8008972:	f77f af79 	ble.w	8008868 <_printf_float+0x250>
 8008976:	2301      	movs	r3, #1
 8008978:	4652      	mov	r2, sl
 800897a:	4631      	mov	r1, r6
 800897c:	4628      	mov	r0, r5
 800897e:	47b8      	blx	r7
 8008980:	3001      	adds	r0, #1
 8008982:	f43f aeaa 	beq.w	80086da <_printf_float+0xc2>
 8008986:	f108 0801 	add.w	r8, r8, #1
 800898a:	e7ec      	b.n	8008966 <_printf_float+0x34e>
 800898c:	4613      	mov	r3, r2
 800898e:	4631      	mov	r1, r6
 8008990:	4642      	mov	r2, r8
 8008992:	4628      	mov	r0, r5
 8008994:	47b8      	blx	r7
 8008996:	3001      	adds	r0, #1
 8008998:	d1c0      	bne.n	800891c <_printf_float+0x304>
 800899a:	e69e      	b.n	80086da <_printf_float+0xc2>
 800899c:	2301      	movs	r3, #1
 800899e:	4631      	mov	r1, r6
 80089a0:	4628      	mov	r0, r5
 80089a2:	9205      	str	r2, [sp, #20]
 80089a4:	47b8      	blx	r7
 80089a6:	3001      	adds	r0, #1
 80089a8:	f43f ae97 	beq.w	80086da <_printf_float+0xc2>
 80089ac:	9a05      	ldr	r2, [sp, #20]
 80089ae:	f10b 0b01 	add.w	fp, fp, #1
 80089b2:	e7b9      	b.n	8008928 <_printf_float+0x310>
 80089b4:	ee18 3a10 	vmov	r3, s16
 80089b8:	4652      	mov	r2, sl
 80089ba:	4631      	mov	r1, r6
 80089bc:	4628      	mov	r0, r5
 80089be:	47b8      	blx	r7
 80089c0:	3001      	adds	r0, #1
 80089c2:	d1be      	bne.n	8008942 <_printf_float+0x32a>
 80089c4:	e689      	b.n	80086da <_printf_float+0xc2>
 80089c6:	9a05      	ldr	r2, [sp, #20]
 80089c8:	464b      	mov	r3, r9
 80089ca:	4442      	add	r2, r8
 80089cc:	4631      	mov	r1, r6
 80089ce:	4628      	mov	r0, r5
 80089d0:	47b8      	blx	r7
 80089d2:	3001      	adds	r0, #1
 80089d4:	d1c1      	bne.n	800895a <_printf_float+0x342>
 80089d6:	e680      	b.n	80086da <_printf_float+0xc2>
 80089d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80089da:	2a01      	cmp	r2, #1
 80089dc:	dc01      	bgt.n	80089e2 <_printf_float+0x3ca>
 80089de:	07db      	lsls	r3, r3, #31
 80089e0:	d538      	bpl.n	8008a54 <_printf_float+0x43c>
 80089e2:	2301      	movs	r3, #1
 80089e4:	4642      	mov	r2, r8
 80089e6:	4631      	mov	r1, r6
 80089e8:	4628      	mov	r0, r5
 80089ea:	47b8      	blx	r7
 80089ec:	3001      	adds	r0, #1
 80089ee:	f43f ae74 	beq.w	80086da <_printf_float+0xc2>
 80089f2:	ee18 3a10 	vmov	r3, s16
 80089f6:	4652      	mov	r2, sl
 80089f8:	4631      	mov	r1, r6
 80089fa:	4628      	mov	r0, r5
 80089fc:	47b8      	blx	r7
 80089fe:	3001      	adds	r0, #1
 8008a00:	f43f ae6b 	beq.w	80086da <_printf_float+0xc2>
 8008a04:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a08:	2200      	movs	r2, #0
 8008a0a:	2300      	movs	r3, #0
 8008a0c:	f7f8 f86c 	bl	8000ae8 <__aeabi_dcmpeq>
 8008a10:	b9d8      	cbnz	r0, 8008a4a <_printf_float+0x432>
 8008a12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a14:	f108 0201 	add.w	r2, r8, #1
 8008a18:	3b01      	subs	r3, #1
 8008a1a:	4631      	mov	r1, r6
 8008a1c:	4628      	mov	r0, r5
 8008a1e:	47b8      	blx	r7
 8008a20:	3001      	adds	r0, #1
 8008a22:	d10e      	bne.n	8008a42 <_printf_float+0x42a>
 8008a24:	e659      	b.n	80086da <_printf_float+0xc2>
 8008a26:	2301      	movs	r3, #1
 8008a28:	4652      	mov	r2, sl
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4628      	mov	r0, r5
 8008a2e:	47b8      	blx	r7
 8008a30:	3001      	adds	r0, #1
 8008a32:	f43f ae52 	beq.w	80086da <_printf_float+0xc2>
 8008a36:	f108 0801 	add.w	r8, r8, #1
 8008a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a3c:	3b01      	subs	r3, #1
 8008a3e:	4543      	cmp	r3, r8
 8008a40:	dcf1      	bgt.n	8008a26 <_printf_float+0x40e>
 8008a42:	464b      	mov	r3, r9
 8008a44:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008a48:	e6dc      	b.n	8008804 <_printf_float+0x1ec>
 8008a4a:	f04f 0800 	mov.w	r8, #0
 8008a4e:	f104 0a1a 	add.w	sl, r4, #26
 8008a52:	e7f2      	b.n	8008a3a <_printf_float+0x422>
 8008a54:	2301      	movs	r3, #1
 8008a56:	4642      	mov	r2, r8
 8008a58:	e7df      	b.n	8008a1a <_printf_float+0x402>
 8008a5a:	2301      	movs	r3, #1
 8008a5c:	464a      	mov	r2, r9
 8008a5e:	4631      	mov	r1, r6
 8008a60:	4628      	mov	r0, r5
 8008a62:	47b8      	blx	r7
 8008a64:	3001      	adds	r0, #1
 8008a66:	f43f ae38 	beq.w	80086da <_printf_float+0xc2>
 8008a6a:	f108 0801 	add.w	r8, r8, #1
 8008a6e:	68e3      	ldr	r3, [r4, #12]
 8008a70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008a72:	1a5b      	subs	r3, r3, r1
 8008a74:	4543      	cmp	r3, r8
 8008a76:	dcf0      	bgt.n	8008a5a <_printf_float+0x442>
 8008a78:	e6fa      	b.n	8008870 <_printf_float+0x258>
 8008a7a:	f04f 0800 	mov.w	r8, #0
 8008a7e:	f104 0919 	add.w	r9, r4, #25
 8008a82:	e7f4      	b.n	8008a6e <_printf_float+0x456>

08008a84 <_printf_common>:
 8008a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a88:	4616      	mov	r6, r2
 8008a8a:	4699      	mov	r9, r3
 8008a8c:	688a      	ldr	r2, [r1, #8]
 8008a8e:	690b      	ldr	r3, [r1, #16]
 8008a90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008a94:	4293      	cmp	r3, r2
 8008a96:	bfb8      	it	lt
 8008a98:	4613      	movlt	r3, r2
 8008a9a:	6033      	str	r3, [r6, #0]
 8008a9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008aa0:	4607      	mov	r7, r0
 8008aa2:	460c      	mov	r4, r1
 8008aa4:	b10a      	cbz	r2, 8008aaa <_printf_common+0x26>
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	6033      	str	r3, [r6, #0]
 8008aaa:	6823      	ldr	r3, [r4, #0]
 8008aac:	0699      	lsls	r1, r3, #26
 8008aae:	bf42      	ittt	mi
 8008ab0:	6833      	ldrmi	r3, [r6, #0]
 8008ab2:	3302      	addmi	r3, #2
 8008ab4:	6033      	strmi	r3, [r6, #0]
 8008ab6:	6825      	ldr	r5, [r4, #0]
 8008ab8:	f015 0506 	ands.w	r5, r5, #6
 8008abc:	d106      	bne.n	8008acc <_printf_common+0x48>
 8008abe:	f104 0a19 	add.w	sl, r4, #25
 8008ac2:	68e3      	ldr	r3, [r4, #12]
 8008ac4:	6832      	ldr	r2, [r6, #0]
 8008ac6:	1a9b      	subs	r3, r3, r2
 8008ac8:	42ab      	cmp	r3, r5
 8008aca:	dc26      	bgt.n	8008b1a <_printf_common+0x96>
 8008acc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008ad0:	1e13      	subs	r3, r2, #0
 8008ad2:	6822      	ldr	r2, [r4, #0]
 8008ad4:	bf18      	it	ne
 8008ad6:	2301      	movne	r3, #1
 8008ad8:	0692      	lsls	r2, r2, #26
 8008ada:	d42b      	bmi.n	8008b34 <_printf_common+0xb0>
 8008adc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008ae0:	4649      	mov	r1, r9
 8008ae2:	4638      	mov	r0, r7
 8008ae4:	47c0      	blx	r8
 8008ae6:	3001      	adds	r0, #1
 8008ae8:	d01e      	beq.n	8008b28 <_printf_common+0xa4>
 8008aea:	6823      	ldr	r3, [r4, #0]
 8008aec:	68e5      	ldr	r5, [r4, #12]
 8008aee:	6832      	ldr	r2, [r6, #0]
 8008af0:	f003 0306 	and.w	r3, r3, #6
 8008af4:	2b04      	cmp	r3, #4
 8008af6:	bf08      	it	eq
 8008af8:	1aad      	subeq	r5, r5, r2
 8008afa:	68a3      	ldr	r3, [r4, #8]
 8008afc:	6922      	ldr	r2, [r4, #16]
 8008afe:	bf0c      	ite	eq
 8008b00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b04:	2500      	movne	r5, #0
 8008b06:	4293      	cmp	r3, r2
 8008b08:	bfc4      	itt	gt
 8008b0a:	1a9b      	subgt	r3, r3, r2
 8008b0c:	18ed      	addgt	r5, r5, r3
 8008b0e:	2600      	movs	r6, #0
 8008b10:	341a      	adds	r4, #26
 8008b12:	42b5      	cmp	r5, r6
 8008b14:	d11a      	bne.n	8008b4c <_printf_common+0xc8>
 8008b16:	2000      	movs	r0, #0
 8008b18:	e008      	b.n	8008b2c <_printf_common+0xa8>
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	4652      	mov	r2, sl
 8008b1e:	4649      	mov	r1, r9
 8008b20:	4638      	mov	r0, r7
 8008b22:	47c0      	blx	r8
 8008b24:	3001      	adds	r0, #1
 8008b26:	d103      	bne.n	8008b30 <_printf_common+0xac>
 8008b28:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b30:	3501      	adds	r5, #1
 8008b32:	e7c6      	b.n	8008ac2 <_printf_common+0x3e>
 8008b34:	18e1      	adds	r1, r4, r3
 8008b36:	1c5a      	adds	r2, r3, #1
 8008b38:	2030      	movs	r0, #48	; 0x30
 8008b3a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008b3e:	4422      	add	r2, r4
 8008b40:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008b44:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008b48:	3302      	adds	r3, #2
 8008b4a:	e7c7      	b.n	8008adc <_printf_common+0x58>
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	4622      	mov	r2, r4
 8008b50:	4649      	mov	r1, r9
 8008b52:	4638      	mov	r0, r7
 8008b54:	47c0      	blx	r8
 8008b56:	3001      	adds	r0, #1
 8008b58:	d0e6      	beq.n	8008b28 <_printf_common+0xa4>
 8008b5a:	3601      	adds	r6, #1
 8008b5c:	e7d9      	b.n	8008b12 <_printf_common+0x8e>
	...

08008b60 <_printf_i>:
 8008b60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b64:	7e0f      	ldrb	r7, [r1, #24]
 8008b66:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008b68:	2f78      	cmp	r7, #120	; 0x78
 8008b6a:	4691      	mov	r9, r2
 8008b6c:	4680      	mov	r8, r0
 8008b6e:	460c      	mov	r4, r1
 8008b70:	469a      	mov	sl, r3
 8008b72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008b76:	d807      	bhi.n	8008b88 <_printf_i+0x28>
 8008b78:	2f62      	cmp	r7, #98	; 0x62
 8008b7a:	d80a      	bhi.n	8008b92 <_printf_i+0x32>
 8008b7c:	2f00      	cmp	r7, #0
 8008b7e:	f000 80d8 	beq.w	8008d32 <_printf_i+0x1d2>
 8008b82:	2f58      	cmp	r7, #88	; 0x58
 8008b84:	f000 80a3 	beq.w	8008cce <_printf_i+0x16e>
 8008b88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008b8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008b90:	e03a      	b.n	8008c08 <_printf_i+0xa8>
 8008b92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008b96:	2b15      	cmp	r3, #21
 8008b98:	d8f6      	bhi.n	8008b88 <_printf_i+0x28>
 8008b9a:	a101      	add	r1, pc, #4	; (adr r1, 8008ba0 <_printf_i+0x40>)
 8008b9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ba0:	08008bf9 	.word	0x08008bf9
 8008ba4:	08008c0d 	.word	0x08008c0d
 8008ba8:	08008b89 	.word	0x08008b89
 8008bac:	08008b89 	.word	0x08008b89
 8008bb0:	08008b89 	.word	0x08008b89
 8008bb4:	08008b89 	.word	0x08008b89
 8008bb8:	08008c0d 	.word	0x08008c0d
 8008bbc:	08008b89 	.word	0x08008b89
 8008bc0:	08008b89 	.word	0x08008b89
 8008bc4:	08008b89 	.word	0x08008b89
 8008bc8:	08008b89 	.word	0x08008b89
 8008bcc:	08008d19 	.word	0x08008d19
 8008bd0:	08008c3d 	.word	0x08008c3d
 8008bd4:	08008cfb 	.word	0x08008cfb
 8008bd8:	08008b89 	.word	0x08008b89
 8008bdc:	08008b89 	.word	0x08008b89
 8008be0:	08008d3b 	.word	0x08008d3b
 8008be4:	08008b89 	.word	0x08008b89
 8008be8:	08008c3d 	.word	0x08008c3d
 8008bec:	08008b89 	.word	0x08008b89
 8008bf0:	08008b89 	.word	0x08008b89
 8008bf4:	08008d03 	.word	0x08008d03
 8008bf8:	682b      	ldr	r3, [r5, #0]
 8008bfa:	1d1a      	adds	r2, r3, #4
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	602a      	str	r2, [r5, #0]
 8008c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008c08:	2301      	movs	r3, #1
 8008c0a:	e0a3      	b.n	8008d54 <_printf_i+0x1f4>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	6829      	ldr	r1, [r5, #0]
 8008c10:	0606      	lsls	r6, r0, #24
 8008c12:	f101 0304 	add.w	r3, r1, #4
 8008c16:	d50a      	bpl.n	8008c2e <_printf_i+0xce>
 8008c18:	680e      	ldr	r6, [r1, #0]
 8008c1a:	602b      	str	r3, [r5, #0]
 8008c1c:	2e00      	cmp	r6, #0
 8008c1e:	da03      	bge.n	8008c28 <_printf_i+0xc8>
 8008c20:	232d      	movs	r3, #45	; 0x2d
 8008c22:	4276      	negs	r6, r6
 8008c24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c28:	485e      	ldr	r0, [pc, #376]	; (8008da4 <_printf_i+0x244>)
 8008c2a:	230a      	movs	r3, #10
 8008c2c:	e019      	b.n	8008c62 <_printf_i+0x102>
 8008c2e:	680e      	ldr	r6, [r1, #0]
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008c36:	bf18      	it	ne
 8008c38:	b236      	sxthne	r6, r6
 8008c3a:	e7ef      	b.n	8008c1c <_printf_i+0xbc>
 8008c3c:	682b      	ldr	r3, [r5, #0]
 8008c3e:	6820      	ldr	r0, [r4, #0]
 8008c40:	1d19      	adds	r1, r3, #4
 8008c42:	6029      	str	r1, [r5, #0]
 8008c44:	0601      	lsls	r1, r0, #24
 8008c46:	d501      	bpl.n	8008c4c <_printf_i+0xec>
 8008c48:	681e      	ldr	r6, [r3, #0]
 8008c4a:	e002      	b.n	8008c52 <_printf_i+0xf2>
 8008c4c:	0646      	lsls	r6, r0, #25
 8008c4e:	d5fb      	bpl.n	8008c48 <_printf_i+0xe8>
 8008c50:	881e      	ldrh	r6, [r3, #0]
 8008c52:	4854      	ldr	r0, [pc, #336]	; (8008da4 <_printf_i+0x244>)
 8008c54:	2f6f      	cmp	r7, #111	; 0x6f
 8008c56:	bf0c      	ite	eq
 8008c58:	2308      	moveq	r3, #8
 8008c5a:	230a      	movne	r3, #10
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008c62:	6865      	ldr	r5, [r4, #4]
 8008c64:	60a5      	str	r5, [r4, #8]
 8008c66:	2d00      	cmp	r5, #0
 8008c68:	bfa2      	ittt	ge
 8008c6a:	6821      	ldrge	r1, [r4, #0]
 8008c6c:	f021 0104 	bicge.w	r1, r1, #4
 8008c70:	6021      	strge	r1, [r4, #0]
 8008c72:	b90e      	cbnz	r6, 8008c78 <_printf_i+0x118>
 8008c74:	2d00      	cmp	r5, #0
 8008c76:	d04d      	beq.n	8008d14 <_printf_i+0x1b4>
 8008c78:	4615      	mov	r5, r2
 8008c7a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008c7e:	fb03 6711 	mls	r7, r3, r1, r6
 8008c82:	5dc7      	ldrb	r7, [r0, r7]
 8008c84:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008c88:	4637      	mov	r7, r6
 8008c8a:	42bb      	cmp	r3, r7
 8008c8c:	460e      	mov	r6, r1
 8008c8e:	d9f4      	bls.n	8008c7a <_printf_i+0x11a>
 8008c90:	2b08      	cmp	r3, #8
 8008c92:	d10b      	bne.n	8008cac <_printf_i+0x14c>
 8008c94:	6823      	ldr	r3, [r4, #0]
 8008c96:	07de      	lsls	r6, r3, #31
 8008c98:	d508      	bpl.n	8008cac <_printf_i+0x14c>
 8008c9a:	6923      	ldr	r3, [r4, #16]
 8008c9c:	6861      	ldr	r1, [r4, #4]
 8008c9e:	4299      	cmp	r1, r3
 8008ca0:	bfde      	ittt	le
 8008ca2:	2330      	movle	r3, #48	; 0x30
 8008ca4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ca8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008cac:	1b52      	subs	r2, r2, r5
 8008cae:	6122      	str	r2, [r4, #16]
 8008cb0:	f8cd a000 	str.w	sl, [sp]
 8008cb4:	464b      	mov	r3, r9
 8008cb6:	aa03      	add	r2, sp, #12
 8008cb8:	4621      	mov	r1, r4
 8008cba:	4640      	mov	r0, r8
 8008cbc:	f7ff fee2 	bl	8008a84 <_printf_common>
 8008cc0:	3001      	adds	r0, #1
 8008cc2:	d14c      	bne.n	8008d5e <_printf_i+0x1fe>
 8008cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cc8:	b004      	add	sp, #16
 8008cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cce:	4835      	ldr	r0, [pc, #212]	; (8008da4 <_printf_i+0x244>)
 8008cd0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008cd4:	6829      	ldr	r1, [r5, #0]
 8008cd6:	6823      	ldr	r3, [r4, #0]
 8008cd8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008cdc:	6029      	str	r1, [r5, #0]
 8008cde:	061d      	lsls	r5, r3, #24
 8008ce0:	d514      	bpl.n	8008d0c <_printf_i+0x1ac>
 8008ce2:	07df      	lsls	r7, r3, #31
 8008ce4:	bf44      	itt	mi
 8008ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cea:	6023      	strmi	r3, [r4, #0]
 8008cec:	b91e      	cbnz	r6, 8008cf6 <_printf_i+0x196>
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	f023 0320 	bic.w	r3, r3, #32
 8008cf4:	6023      	str	r3, [r4, #0]
 8008cf6:	2310      	movs	r3, #16
 8008cf8:	e7b0      	b.n	8008c5c <_printf_i+0xfc>
 8008cfa:	6823      	ldr	r3, [r4, #0]
 8008cfc:	f043 0320 	orr.w	r3, r3, #32
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	2378      	movs	r3, #120	; 0x78
 8008d04:	4828      	ldr	r0, [pc, #160]	; (8008da8 <_printf_i+0x248>)
 8008d06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008d0a:	e7e3      	b.n	8008cd4 <_printf_i+0x174>
 8008d0c:	0659      	lsls	r1, r3, #25
 8008d0e:	bf48      	it	mi
 8008d10:	b2b6      	uxthmi	r6, r6
 8008d12:	e7e6      	b.n	8008ce2 <_printf_i+0x182>
 8008d14:	4615      	mov	r5, r2
 8008d16:	e7bb      	b.n	8008c90 <_printf_i+0x130>
 8008d18:	682b      	ldr	r3, [r5, #0]
 8008d1a:	6826      	ldr	r6, [r4, #0]
 8008d1c:	6961      	ldr	r1, [r4, #20]
 8008d1e:	1d18      	adds	r0, r3, #4
 8008d20:	6028      	str	r0, [r5, #0]
 8008d22:	0635      	lsls	r5, r6, #24
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	d501      	bpl.n	8008d2c <_printf_i+0x1cc>
 8008d28:	6019      	str	r1, [r3, #0]
 8008d2a:	e002      	b.n	8008d32 <_printf_i+0x1d2>
 8008d2c:	0670      	lsls	r0, r6, #25
 8008d2e:	d5fb      	bpl.n	8008d28 <_printf_i+0x1c8>
 8008d30:	8019      	strh	r1, [r3, #0]
 8008d32:	2300      	movs	r3, #0
 8008d34:	6123      	str	r3, [r4, #16]
 8008d36:	4615      	mov	r5, r2
 8008d38:	e7ba      	b.n	8008cb0 <_printf_i+0x150>
 8008d3a:	682b      	ldr	r3, [r5, #0]
 8008d3c:	1d1a      	adds	r2, r3, #4
 8008d3e:	602a      	str	r2, [r5, #0]
 8008d40:	681d      	ldr	r5, [r3, #0]
 8008d42:	6862      	ldr	r2, [r4, #4]
 8008d44:	2100      	movs	r1, #0
 8008d46:	4628      	mov	r0, r5
 8008d48:	f7f7 fa5a 	bl	8000200 <memchr>
 8008d4c:	b108      	cbz	r0, 8008d52 <_printf_i+0x1f2>
 8008d4e:	1b40      	subs	r0, r0, r5
 8008d50:	6060      	str	r0, [r4, #4]
 8008d52:	6863      	ldr	r3, [r4, #4]
 8008d54:	6123      	str	r3, [r4, #16]
 8008d56:	2300      	movs	r3, #0
 8008d58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d5c:	e7a8      	b.n	8008cb0 <_printf_i+0x150>
 8008d5e:	6923      	ldr	r3, [r4, #16]
 8008d60:	462a      	mov	r2, r5
 8008d62:	4649      	mov	r1, r9
 8008d64:	4640      	mov	r0, r8
 8008d66:	47d0      	blx	sl
 8008d68:	3001      	adds	r0, #1
 8008d6a:	d0ab      	beq.n	8008cc4 <_printf_i+0x164>
 8008d6c:	6823      	ldr	r3, [r4, #0]
 8008d6e:	079b      	lsls	r3, r3, #30
 8008d70:	d413      	bmi.n	8008d9a <_printf_i+0x23a>
 8008d72:	68e0      	ldr	r0, [r4, #12]
 8008d74:	9b03      	ldr	r3, [sp, #12]
 8008d76:	4298      	cmp	r0, r3
 8008d78:	bfb8      	it	lt
 8008d7a:	4618      	movlt	r0, r3
 8008d7c:	e7a4      	b.n	8008cc8 <_printf_i+0x168>
 8008d7e:	2301      	movs	r3, #1
 8008d80:	4632      	mov	r2, r6
 8008d82:	4649      	mov	r1, r9
 8008d84:	4640      	mov	r0, r8
 8008d86:	47d0      	blx	sl
 8008d88:	3001      	adds	r0, #1
 8008d8a:	d09b      	beq.n	8008cc4 <_printf_i+0x164>
 8008d8c:	3501      	adds	r5, #1
 8008d8e:	68e3      	ldr	r3, [r4, #12]
 8008d90:	9903      	ldr	r1, [sp, #12]
 8008d92:	1a5b      	subs	r3, r3, r1
 8008d94:	42ab      	cmp	r3, r5
 8008d96:	dcf2      	bgt.n	8008d7e <_printf_i+0x21e>
 8008d98:	e7eb      	b.n	8008d72 <_printf_i+0x212>
 8008d9a:	2500      	movs	r5, #0
 8008d9c:	f104 0619 	add.w	r6, r4, #25
 8008da0:	e7f5      	b.n	8008d8e <_printf_i+0x22e>
 8008da2:	bf00      	nop
 8008da4:	0800cd82 	.word	0x0800cd82
 8008da8:	0800cd93 	.word	0x0800cd93

08008dac <_scanf_float>:
 8008dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008db0:	b087      	sub	sp, #28
 8008db2:	4617      	mov	r7, r2
 8008db4:	9303      	str	r3, [sp, #12]
 8008db6:	688b      	ldr	r3, [r1, #8]
 8008db8:	1e5a      	subs	r2, r3, #1
 8008dba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008dbe:	bf83      	ittte	hi
 8008dc0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008dc4:	195b      	addhi	r3, r3, r5
 8008dc6:	9302      	strhi	r3, [sp, #8]
 8008dc8:	2300      	movls	r3, #0
 8008dca:	bf86      	itte	hi
 8008dcc:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008dd0:	608b      	strhi	r3, [r1, #8]
 8008dd2:	9302      	strls	r3, [sp, #8]
 8008dd4:	680b      	ldr	r3, [r1, #0]
 8008dd6:	468b      	mov	fp, r1
 8008dd8:	2500      	movs	r5, #0
 8008dda:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008dde:	f84b 3b1c 	str.w	r3, [fp], #28
 8008de2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008de6:	4680      	mov	r8, r0
 8008de8:	460c      	mov	r4, r1
 8008dea:	465e      	mov	r6, fp
 8008dec:	46aa      	mov	sl, r5
 8008dee:	46a9      	mov	r9, r5
 8008df0:	9501      	str	r5, [sp, #4]
 8008df2:	68a2      	ldr	r2, [r4, #8]
 8008df4:	b152      	cbz	r2, 8008e0c <_scanf_float+0x60>
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	2b4e      	cmp	r3, #78	; 0x4e
 8008dfc:	d864      	bhi.n	8008ec8 <_scanf_float+0x11c>
 8008dfe:	2b40      	cmp	r3, #64	; 0x40
 8008e00:	d83c      	bhi.n	8008e7c <_scanf_float+0xd0>
 8008e02:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008e06:	b2c8      	uxtb	r0, r1
 8008e08:	280e      	cmp	r0, #14
 8008e0a:	d93a      	bls.n	8008e82 <_scanf_float+0xd6>
 8008e0c:	f1b9 0f00 	cmp.w	r9, #0
 8008e10:	d003      	beq.n	8008e1a <_scanf_float+0x6e>
 8008e12:	6823      	ldr	r3, [r4, #0]
 8008e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e18:	6023      	str	r3, [r4, #0]
 8008e1a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e1e:	f1ba 0f01 	cmp.w	sl, #1
 8008e22:	f200 8113 	bhi.w	800904c <_scanf_float+0x2a0>
 8008e26:	455e      	cmp	r6, fp
 8008e28:	f200 8105 	bhi.w	8009036 <_scanf_float+0x28a>
 8008e2c:	2501      	movs	r5, #1
 8008e2e:	4628      	mov	r0, r5
 8008e30:	b007      	add	sp, #28
 8008e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e36:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008e3a:	2a0d      	cmp	r2, #13
 8008e3c:	d8e6      	bhi.n	8008e0c <_scanf_float+0x60>
 8008e3e:	a101      	add	r1, pc, #4	; (adr r1, 8008e44 <_scanf_float+0x98>)
 8008e40:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e44:	08008f83 	.word	0x08008f83
 8008e48:	08008e0d 	.word	0x08008e0d
 8008e4c:	08008e0d 	.word	0x08008e0d
 8008e50:	08008e0d 	.word	0x08008e0d
 8008e54:	08008fe3 	.word	0x08008fe3
 8008e58:	08008fbb 	.word	0x08008fbb
 8008e5c:	08008e0d 	.word	0x08008e0d
 8008e60:	08008e0d 	.word	0x08008e0d
 8008e64:	08008f91 	.word	0x08008f91
 8008e68:	08008e0d 	.word	0x08008e0d
 8008e6c:	08008e0d 	.word	0x08008e0d
 8008e70:	08008e0d 	.word	0x08008e0d
 8008e74:	08008e0d 	.word	0x08008e0d
 8008e78:	08008f49 	.word	0x08008f49
 8008e7c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008e80:	e7db      	b.n	8008e3a <_scanf_float+0x8e>
 8008e82:	290e      	cmp	r1, #14
 8008e84:	d8c2      	bhi.n	8008e0c <_scanf_float+0x60>
 8008e86:	a001      	add	r0, pc, #4	; (adr r0, 8008e8c <_scanf_float+0xe0>)
 8008e88:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e8c:	08008f3b 	.word	0x08008f3b
 8008e90:	08008e0d 	.word	0x08008e0d
 8008e94:	08008f3b 	.word	0x08008f3b
 8008e98:	08008fcf 	.word	0x08008fcf
 8008e9c:	08008e0d 	.word	0x08008e0d
 8008ea0:	08008ee9 	.word	0x08008ee9
 8008ea4:	08008f25 	.word	0x08008f25
 8008ea8:	08008f25 	.word	0x08008f25
 8008eac:	08008f25 	.word	0x08008f25
 8008eb0:	08008f25 	.word	0x08008f25
 8008eb4:	08008f25 	.word	0x08008f25
 8008eb8:	08008f25 	.word	0x08008f25
 8008ebc:	08008f25 	.word	0x08008f25
 8008ec0:	08008f25 	.word	0x08008f25
 8008ec4:	08008f25 	.word	0x08008f25
 8008ec8:	2b6e      	cmp	r3, #110	; 0x6e
 8008eca:	d809      	bhi.n	8008ee0 <_scanf_float+0x134>
 8008ecc:	2b60      	cmp	r3, #96	; 0x60
 8008ece:	d8b2      	bhi.n	8008e36 <_scanf_float+0x8a>
 8008ed0:	2b54      	cmp	r3, #84	; 0x54
 8008ed2:	d077      	beq.n	8008fc4 <_scanf_float+0x218>
 8008ed4:	2b59      	cmp	r3, #89	; 0x59
 8008ed6:	d199      	bne.n	8008e0c <_scanf_float+0x60>
 8008ed8:	2d07      	cmp	r5, #7
 8008eda:	d197      	bne.n	8008e0c <_scanf_float+0x60>
 8008edc:	2508      	movs	r5, #8
 8008ede:	e029      	b.n	8008f34 <_scanf_float+0x188>
 8008ee0:	2b74      	cmp	r3, #116	; 0x74
 8008ee2:	d06f      	beq.n	8008fc4 <_scanf_float+0x218>
 8008ee4:	2b79      	cmp	r3, #121	; 0x79
 8008ee6:	e7f6      	b.n	8008ed6 <_scanf_float+0x12a>
 8008ee8:	6821      	ldr	r1, [r4, #0]
 8008eea:	05c8      	lsls	r0, r1, #23
 8008eec:	d51a      	bpl.n	8008f24 <_scanf_float+0x178>
 8008eee:	9b02      	ldr	r3, [sp, #8]
 8008ef0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008ef4:	6021      	str	r1, [r4, #0]
 8008ef6:	f109 0901 	add.w	r9, r9, #1
 8008efa:	b11b      	cbz	r3, 8008f04 <_scanf_float+0x158>
 8008efc:	3b01      	subs	r3, #1
 8008efe:	3201      	adds	r2, #1
 8008f00:	9302      	str	r3, [sp, #8]
 8008f02:	60a2      	str	r2, [r4, #8]
 8008f04:	68a3      	ldr	r3, [r4, #8]
 8008f06:	3b01      	subs	r3, #1
 8008f08:	60a3      	str	r3, [r4, #8]
 8008f0a:	6923      	ldr	r3, [r4, #16]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	6123      	str	r3, [r4, #16]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	3b01      	subs	r3, #1
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	607b      	str	r3, [r7, #4]
 8008f18:	f340 8084 	ble.w	8009024 <_scanf_float+0x278>
 8008f1c:	683b      	ldr	r3, [r7, #0]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	603b      	str	r3, [r7, #0]
 8008f22:	e766      	b.n	8008df2 <_scanf_float+0x46>
 8008f24:	eb1a 0f05 	cmn.w	sl, r5
 8008f28:	f47f af70 	bne.w	8008e0c <_scanf_float+0x60>
 8008f2c:	6822      	ldr	r2, [r4, #0]
 8008f2e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008f32:	6022      	str	r2, [r4, #0]
 8008f34:	f806 3b01 	strb.w	r3, [r6], #1
 8008f38:	e7e4      	b.n	8008f04 <_scanf_float+0x158>
 8008f3a:	6822      	ldr	r2, [r4, #0]
 8008f3c:	0610      	lsls	r0, r2, #24
 8008f3e:	f57f af65 	bpl.w	8008e0c <_scanf_float+0x60>
 8008f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f46:	e7f4      	b.n	8008f32 <_scanf_float+0x186>
 8008f48:	f1ba 0f00 	cmp.w	sl, #0
 8008f4c:	d10e      	bne.n	8008f6c <_scanf_float+0x1c0>
 8008f4e:	f1b9 0f00 	cmp.w	r9, #0
 8008f52:	d10e      	bne.n	8008f72 <_scanf_float+0x1c6>
 8008f54:	6822      	ldr	r2, [r4, #0]
 8008f56:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008f5a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008f5e:	d108      	bne.n	8008f72 <_scanf_float+0x1c6>
 8008f60:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008f64:	6022      	str	r2, [r4, #0]
 8008f66:	f04f 0a01 	mov.w	sl, #1
 8008f6a:	e7e3      	b.n	8008f34 <_scanf_float+0x188>
 8008f6c:	f1ba 0f02 	cmp.w	sl, #2
 8008f70:	d055      	beq.n	800901e <_scanf_float+0x272>
 8008f72:	2d01      	cmp	r5, #1
 8008f74:	d002      	beq.n	8008f7c <_scanf_float+0x1d0>
 8008f76:	2d04      	cmp	r5, #4
 8008f78:	f47f af48 	bne.w	8008e0c <_scanf_float+0x60>
 8008f7c:	3501      	adds	r5, #1
 8008f7e:	b2ed      	uxtb	r5, r5
 8008f80:	e7d8      	b.n	8008f34 <_scanf_float+0x188>
 8008f82:	f1ba 0f01 	cmp.w	sl, #1
 8008f86:	f47f af41 	bne.w	8008e0c <_scanf_float+0x60>
 8008f8a:	f04f 0a02 	mov.w	sl, #2
 8008f8e:	e7d1      	b.n	8008f34 <_scanf_float+0x188>
 8008f90:	b97d      	cbnz	r5, 8008fb2 <_scanf_float+0x206>
 8008f92:	f1b9 0f00 	cmp.w	r9, #0
 8008f96:	f47f af3c 	bne.w	8008e12 <_scanf_float+0x66>
 8008f9a:	6822      	ldr	r2, [r4, #0]
 8008f9c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008fa0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008fa4:	f47f af39 	bne.w	8008e1a <_scanf_float+0x6e>
 8008fa8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008fac:	6022      	str	r2, [r4, #0]
 8008fae:	2501      	movs	r5, #1
 8008fb0:	e7c0      	b.n	8008f34 <_scanf_float+0x188>
 8008fb2:	2d03      	cmp	r5, #3
 8008fb4:	d0e2      	beq.n	8008f7c <_scanf_float+0x1d0>
 8008fb6:	2d05      	cmp	r5, #5
 8008fb8:	e7de      	b.n	8008f78 <_scanf_float+0x1cc>
 8008fba:	2d02      	cmp	r5, #2
 8008fbc:	f47f af26 	bne.w	8008e0c <_scanf_float+0x60>
 8008fc0:	2503      	movs	r5, #3
 8008fc2:	e7b7      	b.n	8008f34 <_scanf_float+0x188>
 8008fc4:	2d06      	cmp	r5, #6
 8008fc6:	f47f af21 	bne.w	8008e0c <_scanf_float+0x60>
 8008fca:	2507      	movs	r5, #7
 8008fcc:	e7b2      	b.n	8008f34 <_scanf_float+0x188>
 8008fce:	6822      	ldr	r2, [r4, #0]
 8008fd0:	0591      	lsls	r1, r2, #22
 8008fd2:	f57f af1b 	bpl.w	8008e0c <_scanf_float+0x60>
 8008fd6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008fda:	6022      	str	r2, [r4, #0]
 8008fdc:	f8cd 9004 	str.w	r9, [sp, #4]
 8008fe0:	e7a8      	b.n	8008f34 <_scanf_float+0x188>
 8008fe2:	6822      	ldr	r2, [r4, #0]
 8008fe4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008fe8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008fec:	d006      	beq.n	8008ffc <_scanf_float+0x250>
 8008fee:	0550      	lsls	r0, r2, #21
 8008ff0:	f57f af0c 	bpl.w	8008e0c <_scanf_float+0x60>
 8008ff4:	f1b9 0f00 	cmp.w	r9, #0
 8008ff8:	f43f af0f 	beq.w	8008e1a <_scanf_float+0x6e>
 8008ffc:	0591      	lsls	r1, r2, #22
 8008ffe:	bf58      	it	pl
 8009000:	9901      	ldrpl	r1, [sp, #4]
 8009002:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009006:	bf58      	it	pl
 8009008:	eba9 0101 	subpl.w	r1, r9, r1
 800900c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009010:	bf58      	it	pl
 8009012:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009016:	6022      	str	r2, [r4, #0]
 8009018:	f04f 0900 	mov.w	r9, #0
 800901c:	e78a      	b.n	8008f34 <_scanf_float+0x188>
 800901e:	f04f 0a03 	mov.w	sl, #3
 8009022:	e787      	b.n	8008f34 <_scanf_float+0x188>
 8009024:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009028:	4639      	mov	r1, r7
 800902a:	4640      	mov	r0, r8
 800902c:	4798      	blx	r3
 800902e:	2800      	cmp	r0, #0
 8009030:	f43f aedf 	beq.w	8008df2 <_scanf_float+0x46>
 8009034:	e6ea      	b.n	8008e0c <_scanf_float+0x60>
 8009036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800903a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800903e:	463a      	mov	r2, r7
 8009040:	4640      	mov	r0, r8
 8009042:	4798      	blx	r3
 8009044:	6923      	ldr	r3, [r4, #16]
 8009046:	3b01      	subs	r3, #1
 8009048:	6123      	str	r3, [r4, #16]
 800904a:	e6ec      	b.n	8008e26 <_scanf_float+0x7a>
 800904c:	1e6b      	subs	r3, r5, #1
 800904e:	2b06      	cmp	r3, #6
 8009050:	d825      	bhi.n	800909e <_scanf_float+0x2f2>
 8009052:	2d02      	cmp	r5, #2
 8009054:	d836      	bhi.n	80090c4 <_scanf_float+0x318>
 8009056:	455e      	cmp	r6, fp
 8009058:	f67f aee8 	bls.w	8008e2c <_scanf_float+0x80>
 800905c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009060:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009064:	463a      	mov	r2, r7
 8009066:	4640      	mov	r0, r8
 8009068:	4798      	blx	r3
 800906a:	6923      	ldr	r3, [r4, #16]
 800906c:	3b01      	subs	r3, #1
 800906e:	6123      	str	r3, [r4, #16]
 8009070:	e7f1      	b.n	8009056 <_scanf_float+0x2aa>
 8009072:	9802      	ldr	r0, [sp, #8]
 8009074:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009078:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800907c:	9002      	str	r0, [sp, #8]
 800907e:	463a      	mov	r2, r7
 8009080:	4640      	mov	r0, r8
 8009082:	4798      	blx	r3
 8009084:	6923      	ldr	r3, [r4, #16]
 8009086:	3b01      	subs	r3, #1
 8009088:	6123      	str	r3, [r4, #16]
 800908a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800908e:	fa5f fa8a 	uxtb.w	sl, sl
 8009092:	f1ba 0f02 	cmp.w	sl, #2
 8009096:	d1ec      	bne.n	8009072 <_scanf_float+0x2c6>
 8009098:	3d03      	subs	r5, #3
 800909a:	b2ed      	uxtb	r5, r5
 800909c:	1b76      	subs	r6, r6, r5
 800909e:	6823      	ldr	r3, [r4, #0]
 80090a0:	05da      	lsls	r2, r3, #23
 80090a2:	d52f      	bpl.n	8009104 <_scanf_float+0x358>
 80090a4:	055b      	lsls	r3, r3, #21
 80090a6:	d510      	bpl.n	80090ca <_scanf_float+0x31e>
 80090a8:	455e      	cmp	r6, fp
 80090aa:	f67f aebf 	bls.w	8008e2c <_scanf_float+0x80>
 80090ae:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090b2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090b6:	463a      	mov	r2, r7
 80090b8:	4640      	mov	r0, r8
 80090ba:	4798      	blx	r3
 80090bc:	6923      	ldr	r3, [r4, #16]
 80090be:	3b01      	subs	r3, #1
 80090c0:	6123      	str	r3, [r4, #16]
 80090c2:	e7f1      	b.n	80090a8 <_scanf_float+0x2fc>
 80090c4:	46aa      	mov	sl, r5
 80090c6:	9602      	str	r6, [sp, #8]
 80090c8:	e7df      	b.n	800908a <_scanf_float+0x2de>
 80090ca:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80090ce:	6923      	ldr	r3, [r4, #16]
 80090d0:	2965      	cmp	r1, #101	; 0x65
 80090d2:	f103 33ff 	add.w	r3, r3, #4294967295
 80090d6:	f106 35ff 	add.w	r5, r6, #4294967295
 80090da:	6123      	str	r3, [r4, #16]
 80090dc:	d00c      	beq.n	80090f8 <_scanf_float+0x34c>
 80090de:	2945      	cmp	r1, #69	; 0x45
 80090e0:	d00a      	beq.n	80090f8 <_scanf_float+0x34c>
 80090e2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090e6:	463a      	mov	r2, r7
 80090e8:	4640      	mov	r0, r8
 80090ea:	4798      	blx	r3
 80090ec:	6923      	ldr	r3, [r4, #16]
 80090ee:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80090f2:	3b01      	subs	r3, #1
 80090f4:	1eb5      	subs	r5, r6, #2
 80090f6:	6123      	str	r3, [r4, #16]
 80090f8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80090fc:	463a      	mov	r2, r7
 80090fe:	4640      	mov	r0, r8
 8009100:	4798      	blx	r3
 8009102:	462e      	mov	r6, r5
 8009104:	6825      	ldr	r5, [r4, #0]
 8009106:	f015 0510 	ands.w	r5, r5, #16
 800910a:	d159      	bne.n	80091c0 <_scanf_float+0x414>
 800910c:	7035      	strb	r5, [r6, #0]
 800910e:	6823      	ldr	r3, [r4, #0]
 8009110:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009114:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009118:	d11b      	bne.n	8009152 <_scanf_float+0x3a6>
 800911a:	9b01      	ldr	r3, [sp, #4]
 800911c:	454b      	cmp	r3, r9
 800911e:	eba3 0209 	sub.w	r2, r3, r9
 8009122:	d123      	bne.n	800916c <_scanf_float+0x3c0>
 8009124:	2200      	movs	r2, #0
 8009126:	4659      	mov	r1, fp
 8009128:	4640      	mov	r0, r8
 800912a:	f000 ff57 	bl	8009fdc <_strtod_r>
 800912e:	6822      	ldr	r2, [r4, #0]
 8009130:	9b03      	ldr	r3, [sp, #12]
 8009132:	f012 0f02 	tst.w	r2, #2
 8009136:	ec57 6b10 	vmov	r6, r7, d0
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	d021      	beq.n	8009182 <_scanf_float+0x3d6>
 800913e:	9903      	ldr	r1, [sp, #12]
 8009140:	1d1a      	adds	r2, r3, #4
 8009142:	600a      	str	r2, [r1, #0]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	e9c3 6700 	strd	r6, r7, [r3]
 800914a:	68e3      	ldr	r3, [r4, #12]
 800914c:	3301      	adds	r3, #1
 800914e:	60e3      	str	r3, [r4, #12]
 8009150:	e66d      	b.n	8008e2e <_scanf_float+0x82>
 8009152:	9b04      	ldr	r3, [sp, #16]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d0e5      	beq.n	8009124 <_scanf_float+0x378>
 8009158:	9905      	ldr	r1, [sp, #20]
 800915a:	230a      	movs	r3, #10
 800915c:	462a      	mov	r2, r5
 800915e:	3101      	adds	r1, #1
 8009160:	4640      	mov	r0, r8
 8009162:	f000 ffc3 	bl	800a0ec <_strtol_r>
 8009166:	9b04      	ldr	r3, [sp, #16]
 8009168:	9e05      	ldr	r6, [sp, #20]
 800916a:	1ac2      	subs	r2, r0, r3
 800916c:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009170:	429e      	cmp	r6, r3
 8009172:	bf28      	it	cs
 8009174:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009178:	4912      	ldr	r1, [pc, #72]	; (80091c4 <_scanf_float+0x418>)
 800917a:	4630      	mov	r0, r6
 800917c:	f000 f8a6 	bl	80092cc <siprintf>
 8009180:	e7d0      	b.n	8009124 <_scanf_float+0x378>
 8009182:	9903      	ldr	r1, [sp, #12]
 8009184:	f012 0f04 	tst.w	r2, #4
 8009188:	f103 0204 	add.w	r2, r3, #4
 800918c:	600a      	str	r2, [r1, #0]
 800918e:	d1d9      	bne.n	8009144 <_scanf_float+0x398>
 8009190:	f8d3 8000 	ldr.w	r8, [r3]
 8009194:	ee10 2a10 	vmov	r2, s0
 8009198:	ee10 0a10 	vmov	r0, s0
 800919c:	463b      	mov	r3, r7
 800919e:	4639      	mov	r1, r7
 80091a0:	f7f7 fcd4 	bl	8000b4c <__aeabi_dcmpun>
 80091a4:	b128      	cbz	r0, 80091b2 <_scanf_float+0x406>
 80091a6:	4808      	ldr	r0, [pc, #32]	; (80091c8 <_scanf_float+0x41c>)
 80091a8:	f000 f88a 	bl	80092c0 <nanf>
 80091ac:	ed88 0a00 	vstr	s0, [r8]
 80091b0:	e7cb      	b.n	800914a <_scanf_float+0x39e>
 80091b2:	4630      	mov	r0, r6
 80091b4:	4639      	mov	r1, r7
 80091b6:	f7f7 fd27 	bl	8000c08 <__aeabi_d2f>
 80091ba:	f8c8 0000 	str.w	r0, [r8]
 80091be:	e7c4      	b.n	800914a <_scanf_float+0x39e>
 80091c0:	2500      	movs	r5, #0
 80091c2:	e634      	b.n	8008e2e <_scanf_float+0x82>
 80091c4:	0800cda4 	.word	0x0800cda4
 80091c8:	0800d1b0 	.word	0x0800d1b0

080091cc <cleanup_glue>:
 80091cc:	b538      	push	{r3, r4, r5, lr}
 80091ce:	460c      	mov	r4, r1
 80091d0:	6809      	ldr	r1, [r1, #0]
 80091d2:	4605      	mov	r5, r0
 80091d4:	b109      	cbz	r1, 80091da <cleanup_glue+0xe>
 80091d6:	f7ff fff9 	bl	80091cc <cleanup_glue>
 80091da:	4621      	mov	r1, r4
 80091dc:	4628      	mov	r0, r5
 80091de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091e2:	f002 bf69 	b.w	800c0b8 <_free_r>
	...

080091e8 <_reclaim_reent>:
 80091e8:	4b2c      	ldr	r3, [pc, #176]	; (800929c <_reclaim_reent+0xb4>)
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4283      	cmp	r3, r0
 80091ee:	b570      	push	{r4, r5, r6, lr}
 80091f0:	4604      	mov	r4, r0
 80091f2:	d051      	beq.n	8009298 <_reclaim_reent+0xb0>
 80091f4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80091f6:	b143      	cbz	r3, 800920a <_reclaim_reent+0x22>
 80091f8:	68db      	ldr	r3, [r3, #12]
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d14a      	bne.n	8009294 <_reclaim_reent+0xac>
 80091fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009200:	6819      	ldr	r1, [r3, #0]
 8009202:	b111      	cbz	r1, 800920a <_reclaim_reent+0x22>
 8009204:	4620      	mov	r0, r4
 8009206:	f002 ff57 	bl	800c0b8 <_free_r>
 800920a:	6961      	ldr	r1, [r4, #20]
 800920c:	b111      	cbz	r1, 8009214 <_reclaim_reent+0x2c>
 800920e:	4620      	mov	r0, r4
 8009210:	f002 ff52 	bl	800c0b8 <_free_r>
 8009214:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009216:	b111      	cbz	r1, 800921e <_reclaim_reent+0x36>
 8009218:	4620      	mov	r0, r4
 800921a:	f002 ff4d 	bl	800c0b8 <_free_r>
 800921e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009220:	b111      	cbz	r1, 8009228 <_reclaim_reent+0x40>
 8009222:	4620      	mov	r0, r4
 8009224:	f002 ff48 	bl	800c0b8 <_free_r>
 8009228:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800922a:	b111      	cbz	r1, 8009232 <_reclaim_reent+0x4a>
 800922c:	4620      	mov	r0, r4
 800922e:	f002 ff43 	bl	800c0b8 <_free_r>
 8009232:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009234:	b111      	cbz	r1, 800923c <_reclaim_reent+0x54>
 8009236:	4620      	mov	r0, r4
 8009238:	f002 ff3e 	bl	800c0b8 <_free_r>
 800923c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800923e:	b111      	cbz	r1, 8009246 <_reclaim_reent+0x5e>
 8009240:	4620      	mov	r0, r4
 8009242:	f002 ff39 	bl	800c0b8 <_free_r>
 8009246:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009248:	b111      	cbz	r1, 8009250 <_reclaim_reent+0x68>
 800924a:	4620      	mov	r0, r4
 800924c:	f002 ff34 	bl	800c0b8 <_free_r>
 8009250:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009252:	b111      	cbz	r1, 800925a <_reclaim_reent+0x72>
 8009254:	4620      	mov	r0, r4
 8009256:	f002 ff2f 	bl	800c0b8 <_free_r>
 800925a:	69a3      	ldr	r3, [r4, #24]
 800925c:	b1e3      	cbz	r3, 8009298 <_reclaim_reent+0xb0>
 800925e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009260:	4620      	mov	r0, r4
 8009262:	4798      	blx	r3
 8009264:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009266:	b1b9      	cbz	r1, 8009298 <_reclaim_reent+0xb0>
 8009268:	4620      	mov	r0, r4
 800926a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800926e:	f7ff bfad 	b.w	80091cc <cleanup_glue>
 8009272:	5949      	ldr	r1, [r1, r5]
 8009274:	b941      	cbnz	r1, 8009288 <_reclaim_reent+0xa0>
 8009276:	3504      	adds	r5, #4
 8009278:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800927a:	2d80      	cmp	r5, #128	; 0x80
 800927c:	68d9      	ldr	r1, [r3, #12]
 800927e:	d1f8      	bne.n	8009272 <_reclaim_reent+0x8a>
 8009280:	4620      	mov	r0, r4
 8009282:	f002 ff19 	bl	800c0b8 <_free_r>
 8009286:	e7ba      	b.n	80091fe <_reclaim_reent+0x16>
 8009288:	680e      	ldr	r6, [r1, #0]
 800928a:	4620      	mov	r0, r4
 800928c:	f002 ff14 	bl	800c0b8 <_free_r>
 8009290:	4631      	mov	r1, r6
 8009292:	e7ef      	b.n	8009274 <_reclaim_reent+0x8c>
 8009294:	2500      	movs	r5, #0
 8009296:	e7ef      	b.n	8009278 <_reclaim_reent+0x90>
 8009298:	bd70      	pop	{r4, r5, r6, pc}
 800929a:	bf00      	nop
 800929c:	200001f8 	.word	0x200001f8

080092a0 <_sbrk_r>:
 80092a0:	b538      	push	{r3, r4, r5, lr}
 80092a2:	4d06      	ldr	r5, [pc, #24]	; (80092bc <_sbrk_r+0x1c>)
 80092a4:	2300      	movs	r3, #0
 80092a6:	4604      	mov	r4, r0
 80092a8:	4608      	mov	r0, r1
 80092aa:	602b      	str	r3, [r5, #0]
 80092ac:	f7f9 fe38 	bl	8002f20 <_sbrk>
 80092b0:	1c43      	adds	r3, r0, #1
 80092b2:	d102      	bne.n	80092ba <_sbrk_r+0x1a>
 80092b4:	682b      	ldr	r3, [r5, #0]
 80092b6:	b103      	cbz	r3, 80092ba <_sbrk_r+0x1a>
 80092b8:	6023      	str	r3, [r4, #0]
 80092ba:	bd38      	pop	{r3, r4, r5, pc}
 80092bc:	20004f74 	.word	0x20004f74

080092c0 <nanf>:
 80092c0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80092c8 <nanf+0x8>
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	7fc00000 	.word	0x7fc00000

080092cc <siprintf>:
 80092cc:	b40e      	push	{r1, r2, r3}
 80092ce:	b500      	push	{lr}
 80092d0:	b09c      	sub	sp, #112	; 0x70
 80092d2:	ab1d      	add	r3, sp, #116	; 0x74
 80092d4:	9002      	str	r0, [sp, #8]
 80092d6:	9006      	str	r0, [sp, #24]
 80092d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80092dc:	4809      	ldr	r0, [pc, #36]	; (8009304 <siprintf+0x38>)
 80092de:	9107      	str	r1, [sp, #28]
 80092e0:	9104      	str	r1, [sp, #16]
 80092e2:	4909      	ldr	r1, [pc, #36]	; (8009308 <siprintf+0x3c>)
 80092e4:	f853 2b04 	ldr.w	r2, [r3], #4
 80092e8:	9105      	str	r1, [sp, #20]
 80092ea:	6800      	ldr	r0, [r0, #0]
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	a902      	add	r1, sp, #8
 80092f0:	f002 ff8a 	bl	800c208 <_svfiprintf_r>
 80092f4:	9b02      	ldr	r3, [sp, #8]
 80092f6:	2200      	movs	r2, #0
 80092f8:	701a      	strb	r2, [r3, #0]
 80092fa:	b01c      	add	sp, #112	; 0x70
 80092fc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009300:	b003      	add	sp, #12
 8009302:	4770      	bx	lr
 8009304:	200001f8 	.word	0x200001f8
 8009308:	ffff0208 	.word	0xffff0208

0800930c <__sread>:
 800930c:	b510      	push	{r4, lr}
 800930e:	460c      	mov	r4, r1
 8009310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009314:	f003 f878 	bl	800c408 <_read_r>
 8009318:	2800      	cmp	r0, #0
 800931a:	bfab      	itete	ge
 800931c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800931e:	89a3      	ldrhlt	r3, [r4, #12]
 8009320:	181b      	addge	r3, r3, r0
 8009322:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009326:	bfac      	ite	ge
 8009328:	6563      	strge	r3, [r4, #84]	; 0x54
 800932a:	81a3      	strhlt	r3, [r4, #12]
 800932c:	bd10      	pop	{r4, pc}

0800932e <__swrite>:
 800932e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009332:	461f      	mov	r7, r3
 8009334:	898b      	ldrh	r3, [r1, #12]
 8009336:	05db      	lsls	r3, r3, #23
 8009338:	4605      	mov	r5, r0
 800933a:	460c      	mov	r4, r1
 800933c:	4616      	mov	r6, r2
 800933e:	d505      	bpl.n	800934c <__swrite+0x1e>
 8009340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009344:	2302      	movs	r3, #2
 8009346:	2200      	movs	r2, #0
 8009348:	f002 f9a6 	bl	800b698 <_lseek_r>
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009352:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	4632      	mov	r2, r6
 800935a:	463b      	mov	r3, r7
 800935c:	4628      	mov	r0, r5
 800935e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009362:	f000 bec5 	b.w	800a0f0 <_write_r>

08009366 <__sseek>:
 8009366:	b510      	push	{r4, lr}
 8009368:	460c      	mov	r4, r1
 800936a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800936e:	f002 f993 	bl	800b698 <_lseek_r>
 8009372:	1c43      	adds	r3, r0, #1
 8009374:	89a3      	ldrh	r3, [r4, #12]
 8009376:	bf15      	itete	ne
 8009378:	6560      	strne	r0, [r4, #84]	; 0x54
 800937a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800937e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009382:	81a3      	strheq	r3, [r4, #12]
 8009384:	bf18      	it	ne
 8009386:	81a3      	strhne	r3, [r4, #12]
 8009388:	bd10      	pop	{r4, pc}

0800938a <__sclose>:
 800938a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800938e:	f000 bec1 	b.w	800a114 <_close_r>

08009392 <sulp>:
 8009392:	b570      	push	{r4, r5, r6, lr}
 8009394:	4604      	mov	r4, r0
 8009396:	460d      	mov	r5, r1
 8009398:	ec45 4b10 	vmov	d0, r4, r5
 800939c:	4616      	mov	r6, r2
 800939e:	f002 fd25 	bl	800bdec <__ulp>
 80093a2:	ec51 0b10 	vmov	r0, r1, d0
 80093a6:	b17e      	cbz	r6, 80093c8 <sulp+0x36>
 80093a8:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80093ac:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	dd09      	ble.n	80093c8 <sulp+0x36>
 80093b4:	051b      	lsls	r3, r3, #20
 80093b6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80093ba:	2400      	movs	r4, #0
 80093bc:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80093c0:	4622      	mov	r2, r4
 80093c2:	462b      	mov	r3, r5
 80093c4:	f7f7 f928 	bl	8000618 <__aeabi_dmul>
 80093c8:	bd70      	pop	{r4, r5, r6, pc}
 80093ca:	0000      	movs	r0, r0
 80093cc:	0000      	movs	r0, r0
	...

080093d0 <_strtod_l>:
 80093d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d4:	ed2d 8b02 	vpush	{d8}
 80093d8:	b09d      	sub	sp, #116	; 0x74
 80093da:	461f      	mov	r7, r3
 80093dc:	2300      	movs	r3, #0
 80093de:	9318      	str	r3, [sp, #96]	; 0x60
 80093e0:	4ba2      	ldr	r3, [pc, #648]	; (800966c <_strtod_l+0x29c>)
 80093e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	9305      	str	r3, [sp, #20]
 80093e8:	4604      	mov	r4, r0
 80093ea:	4618      	mov	r0, r3
 80093ec:	4688      	mov	r8, r1
 80093ee:	f7f6 feff 	bl	80001f0 <strlen>
 80093f2:	f04f 0a00 	mov.w	sl, #0
 80093f6:	4605      	mov	r5, r0
 80093f8:	f04f 0b00 	mov.w	fp, #0
 80093fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009402:	781a      	ldrb	r2, [r3, #0]
 8009404:	2a2b      	cmp	r2, #43	; 0x2b
 8009406:	d04e      	beq.n	80094a6 <_strtod_l+0xd6>
 8009408:	d83b      	bhi.n	8009482 <_strtod_l+0xb2>
 800940a:	2a0d      	cmp	r2, #13
 800940c:	d834      	bhi.n	8009478 <_strtod_l+0xa8>
 800940e:	2a08      	cmp	r2, #8
 8009410:	d834      	bhi.n	800947c <_strtod_l+0xac>
 8009412:	2a00      	cmp	r2, #0
 8009414:	d03e      	beq.n	8009494 <_strtod_l+0xc4>
 8009416:	2300      	movs	r3, #0
 8009418:	930a      	str	r3, [sp, #40]	; 0x28
 800941a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800941c:	7833      	ldrb	r3, [r6, #0]
 800941e:	2b30      	cmp	r3, #48	; 0x30
 8009420:	f040 80b0 	bne.w	8009584 <_strtod_l+0x1b4>
 8009424:	7873      	ldrb	r3, [r6, #1]
 8009426:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800942a:	2b58      	cmp	r3, #88	; 0x58
 800942c:	d168      	bne.n	8009500 <_strtod_l+0x130>
 800942e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009430:	9301      	str	r3, [sp, #4]
 8009432:	ab18      	add	r3, sp, #96	; 0x60
 8009434:	9702      	str	r7, [sp, #8]
 8009436:	9300      	str	r3, [sp, #0]
 8009438:	4a8d      	ldr	r2, [pc, #564]	; (8009670 <_strtod_l+0x2a0>)
 800943a:	ab19      	add	r3, sp, #100	; 0x64
 800943c:	a917      	add	r1, sp, #92	; 0x5c
 800943e:	4620      	mov	r0, r4
 8009440:	f001 fe1e 	bl	800b080 <__gethex>
 8009444:	f010 0707 	ands.w	r7, r0, #7
 8009448:	4605      	mov	r5, r0
 800944a:	d005      	beq.n	8009458 <_strtod_l+0x88>
 800944c:	2f06      	cmp	r7, #6
 800944e:	d12c      	bne.n	80094aa <_strtod_l+0xda>
 8009450:	3601      	adds	r6, #1
 8009452:	2300      	movs	r3, #0
 8009454:	9617      	str	r6, [sp, #92]	; 0x5c
 8009456:	930a      	str	r3, [sp, #40]	; 0x28
 8009458:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800945a:	2b00      	cmp	r3, #0
 800945c:	f040 8590 	bne.w	8009f80 <_strtod_l+0xbb0>
 8009460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009462:	b1eb      	cbz	r3, 80094a0 <_strtod_l+0xd0>
 8009464:	4652      	mov	r2, sl
 8009466:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800946a:	ec43 2b10 	vmov	d0, r2, r3
 800946e:	b01d      	add	sp, #116	; 0x74
 8009470:	ecbd 8b02 	vpop	{d8}
 8009474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009478:	2a20      	cmp	r2, #32
 800947a:	d1cc      	bne.n	8009416 <_strtod_l+0x46>
 800947c:	3301      	adds	r3, #1
 800947e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009480:	e7be      	b.n	8009400 <_strtod_l+0x30>
 8009482:	2a2d      	cmp	r2, #45	; 0x2d
 8009484:	d1c7      	bne.n	8009416 <_strtod_l+0x46>
 8009486:	2201      	movs	r2, #1
 8009488:	920a      	str	r2, [sp, #40]	; 0x28
 800948a:	1c5a      	adds	r2, r3, #1
 800948c:	9217      	str	r2, [sp, #92]	; 0x5c
 800948e:	785b      	ldrb	r3, [r3, #1]
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1c2      	bne.n	800941a <_strtod_l+0x4a>
 8009494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009496:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800949a:	2b00      	cmp	r3, #0
 800949c:	f040 856e 	bne.w	8009f7c <_strtod_l+0xbac>
 80094a0:	4652      	mov	r2, sl
 80094a2:	465b      	mov	r3, fp
 80094a4:	e7e1      	b.n	800946a <_strtod_l+0x9a>
 80094a6:	2200      	movs	r2, #0
 80094a8:	e7ee      	b.n	8009488 <_strtod_l+0xb8>
 80094aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80094ac:	b13a      	cbz	r2, 80094be <_strtod_l+0xee>
 80094ae:	2135      	movs	r1, #53	; 0x35
 80094b0:	a81a      	add	r0, sp, #104	; 0x68
 80094b2:	f002 fda6 	bl	800c002 <__copybits>
 80094b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80094b8:	4620      	mov	r0, r4
 80094ba:	f002 f965 	bl	800b788 <_Bfree>
 80094be:	3f01      	subs	r7, #1
 80094c0:	2f04      	cmp	r7, #4
 80094c2:	d806      	bhi.n	80094d2 <_strtod_l+0x102>
 80094c4:	e8df f007 	tbb	[pc, r7]
 80094c8:	1714030a 	.word	0x1714030a
 80094cc:	0a          	.byte	0x0a
 80094cd:	00          	.byte	0x00
 80094ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80094d2:	0728      	lsls	r0, r5, #28
 80094d4:	d5c0      	bpl.n	8009458 <_strtod_l+0x88>
 80094d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80094da:	e7bd      	b.n	8009458 <_strtod_l+0x88>
 80094dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80094e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80094e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80094e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80094ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80094ee:	e7f0      	b.n	80094d2 <_strtod_l+0x102>
 80094f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009674 <_strtod_l+0x2a4>
 80094f4:	e7ed      	b.n	80094d2 <_strtod_l+0x102>
 80094f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80094fa:	f04f 3aff 	mov.w	sl, #4294967295
 80094fe:	e7e8      	b.n	80094d2 <_strtod_l+0x102>
 8009500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009502:	1c5a      	adds	r2, r3, #1
 8009504:	9217      	str	r2, [sp, #92]	; 0x5c
 8009506:	785b      	ldrb	r3, [r3, #1]
 8009508:	2b30      	cmp	r3, #48	; 0x30
 800950a:	d0f9      	beq.n	8009500 <_strtod_l+0x130>
 800950c:	2b00      	cmp	r3, #0
 800950e:	d0a3      	beq.n	8009458 <_strtod_l+0x88>
 8009510:	2301      	movs	r3, #1
 8009512:	f04f 0900 	mov.w	r9, #0
 8009516:	9304      	str	r3, [sp, #16]
 8009518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800951a:	9308      	str	r3, [sp, #32]
 800951c:	f8cd 901c 	str.w	r9, [sp, #28]
 8009520:	464f      	mov	r7, r9
 8009522:	220a      	movs	r2, #10
 8009524:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009526:	7806      	ldrb	r6, [r0, #0]
 8009528:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800952c:	b2d9      	uxtb	r1, r3
 800952e:	2909      	cmp	r1, #9
 8009530:	d92a      	bls.n	8009588 <_strtod_l+0x1b8>
 8009532:	9905      	ldr	r1, [sp, #20]
 8009534:	462a      	mov	r2, r5
 8009536:	f002 ff83 	bl	800c440 <strncmp>
 800953a:	b398      	cbz	r0, 80095a4 <_strtod_l+0x1d4>
 800953c:	2000      	movs	r0, #0
 800953e:	4632      	mov	r2, r6
 8009540:	463d      	mov	r5, r7
 8009542:	9005      	str	r0, [sp, #20]
 8009544:	4603      	mov	r3, r0
 8009546:	2a65      	cmp	r2, #101	; 0x65
 8009548:	d001      	beq.n	800954e <_strtod_l+0x17e>
 800954a:	2a45      	cmp	r2, #69	; 0x45
 800954c:	d118      	bne.n	8009580 <_strtod_l+0x1b0>
 800954e:	b91d      	cbnz	r5, 8009558 <_strtod_l+0x188>
 8009550:	9a04      	ldr	r2, [sp, #16]
 8009552:	4302      	orrs	r2, r0
 8009554:	d09e      	beq.n	8009494 <_strtod_l+0xc4>
 8009556:	2500      	movs	r5, #0
 8009558:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800955c:	f108 0201 	add.w	r2, r8, #1
 8009560:	9217      	str	r2, [sp, #92]	; 0x5c
 8009562:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009566:	2a2b      	cmp	r2, #43	; 0x2b
 8009568:	d075      	beq.n	8009656 <_strtod_l+0x286>
 800956a:	2a2d      	cmp	r2, #45	; 0x2d
 800956c:	d07b      	beq.n	8009666 <_strtod_l+0x296>
 800956e:	f04f 0c00 	mov.w	ip, #0
 8009572:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009576:	2909      	cmp	r1, #9
 8009578:	f240 8082 	bls.w	8009680 <_strtod_l+0x2b0>
 800957c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009580:	2600      	movs	r6, #0
 8009582:	e09d      	b.n	80096c0 <_strtod_l+0x2f0>
 8009584:	2300      	movs	r3, #0
 8009586:	e7c4      	b.n	8009512 <_strtod_l+0x142>
 8009588:	2f08      	cmp	r7, #8
 800958a:	bfd8      	it	le
 800958c:	9907      	ldrle	r1, [sp, #28]
 800958e:	f100 0001 	add.w	r0, r0, #1
 8009592:	bfda      	itte	le
 8009594:	fb02 3301 	mlale	r3, r2, r1, r3
 8009598:	9307      	strle	r3, [sp, #28]
 800959a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800959e:	3701      	adds	r7, #1
 80095a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80095a2:	e7bf      	b.n	8009524 <_strtod_l+0x154>
 80095a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095a6:	195a      	adds	r2, r3, r5
 80095a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80095aa:	5d5a      	ldrb	r2, [r3, r5]
 80095ac:	2f00      	cmp	r7, #0
 80095ae:	d037      	beq.n	8009620 <_strtod_l+0x250>
 80095b0:	9005      	str	r0, [sp, #20]
 80095b2:	463d      	mov	r5, r7
 80095b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80095b8:	2b09      	cmp	r3, #9
 80095ba:	d912      	bls.n	80095e2 <_strtod_l+0x212>
 80095bc:	2301      	movs	r3, #1
 80095be:	e7c2      	b.n	8009546 <_strtod_l+0x176>
 80095c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095c2:	1c5a      	adds	r2, r3, #1
 80095c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80095c6:	785a      	ldrb	r2, [r3, #1]
 80095c8:	3001      	adds	r0, #1
 80095ca:	2a30      	cmp	r2, #48	; 0x30
 80095cc:	d0f8      	beq.n	80095c0 <_strtod_l+0x1f0>
 80095ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80095d2:	2b08      	cmp	r3, #8
 80095d4:	f200 84d9 	bhi.w	8009f8a <_strtod_l+0xbba>
 80095d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095da:	9005      	str	r0, [sp, #20]
 80095dc:	2000      	movs	r0, #0
 80095de:	9308      	str	r3, [sp, #32]
 80095e0:	4605      	mov	r5, r0
 80095e2:	3a30      	subs	r2, #48	; 0x30
 80095e4:	f100 0301 	add.w	r3, r0, #1
 80095e8:	d014      	beq.n	8009614 <_strtod_l+0x244>
 80095ea:	9905      	ldr	r1, [sp, #20]
 80095ec:	4419      	add	r1, r3
 80095ee:	9105      	str	r1, [sp, #20]
 80095f0:	462b      	mov	r3, r5
 80095f2:	eb00 0e05 	add.w	lr, r0, r5
 80095f6:	210a      	movs	r1, #10
 80095f8:	4573      	cmp	r3, lr
 80095fa:	d113      	bne.n	8009624 <_strtod_l+0x254>
 80095fc:	182b      	adds	r3, r5, r0
 80095fe:	2b08      	cmp	r3, #8
 8009600:	f105 0501 	add.w	r5, r5, #1
 8009604:	4405      	add	r5, r0
 8009606:	dc1c      	bgt.n	8009642 <_strtod_l+0x272>
 8009608:	9907      	ldr	r1, [sp, #28]
 800960a:	230a      	movs	r3, #10
 800960c:	fb03 2301 	mla	r3, r3, r1, r2
 8009610:	9307      	str	r3, [sp, #28]
 8009612:	2300      	movs	r3, #0
 8009614:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009616:	1c51      	adds	r1, r2, #1
 8009618:	9117      	str	r1, [sp, #92]	; 0x5c
 800961a:	7852      	ldrb	r2, [r2, #1]
 800961c:	4618      	mov	r0, r3
 800961e:	e7c9      	b.n	80095b4 <_strtod_l+0x1e4>
 8009620:	4638      	mov	r0, r7
 8009622:	e7d2      	b.n	80095ca <_strtod_l+0x1fa>
 8009624:	2b08      	cmp	r3, #8
 8009626:	dc04      	bgt.n	8009632 <_strtod_l+0x262>
 8009628:	9e07      	ldr	r6, [sp, #28]
 800962a:	434e      	muls	r6, r1
 800962c:	9607      	str	r6, [sp, #28]
 800962e:	3301      	adds	r3, #1
 8009630:	e7e2      	b.n	80095f8 <_strtod_l+0x228>
 8009632:	f103 0c01 	add.w	ip, r3, #1
 8009636:	f1bc 0f10 	cmp.w	ip, #16
 800963a:	bfd8      	it	le
 800963c:	fb01 f909 	mulle.w	r9, r1, r9
 8009640:	e7f5      	b.n	800962e <_strtod_l+0x25e>
 8009642:	2d10      	cmp	r5, #16
 8009644:	bfdc      	itt	le
 8009646:	230a      	movle	r3, #10
 8009648:	fb03 2909 	mlale	r9, r3, r9, r2
 800964c:	e7e1      	b.n	8009612 <_strtod_l+0x242>
 800964e:	2300      	movs	r3, #0
 8009650:	9305      	str	r3, [sp, #20]
 8009652:	2301      	movs	r3, #1
 8009654:	e77c      	b.n	8009550 <_strtod_l+0x180>
 8009656:	f04f 0c00 	mov.w	ip, #0
 800965a:	f108 0202 	add.w	r2, r8, #2
 800965e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009660:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009664:	e785      	b.n	8009572 <_strtod_l+0x1a2>
 8009666:	f04f 0c01 	mov.w	ip, #1
 800966a:	e7f6      	b.n	800965a <_strtod_l+0x28a>
 800966c:	0800cff8 	.word	0x0800cff8
 8009670:	0800cdac 	.word	0x0800cdac
 8009674:	7ff00000 	.word	0x7ff00000
 8009678:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800967a:	1c51      	adds	r1, r2, #1
 800967c:	9117      	str	r1, [sp, #92]	; 0x5c
 800967e:	7852      	ldrb	r2, [r2, #1]
 8009680:	2a30      	cmp	r2, #48	; 0x30
 8009682:	d0f9      	beq.n	8009678 <_strtod_l+0x2a8>
 8009684:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009688:	2908      	cmp	r1, #8
 800968a:	f63f af79 	bhi.w	8009580 <_strtod_l+0x1b0>
 800968e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009692:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009694:	9206      	str	r2, [sp, #24]
 8009696:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009698:	1c51      	adds	r1, r2, #1
 800969a:	9117      	str	r1, [sp, #92]	; 0x5c
 800969c:	7852      	ldrb	r2, [r2, #1]
 800969e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80096a2:	2e09      	cmp	r6, #9
 80096a4:	d937      	bls.n	8009716 <_strtod_l+0x346>
 80096a6:	9e06      	ldr	r6, [sp, #24]
 80096a8:	1b89      	subs	r1, r1, r6
 80096aa:	2908      	cmp	r1, #8
 80096ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80096b0:	dc02      	bgt.n	80096b8 <_strtod_l+0x2e8>
 80096b2:	4576      	cmp	r6, lr
 80096b4:	bfa8      	it	ge
 80096b6:	4676      	movge	r6, lr
 80096b8:	f1bc 0f00 	cmp.w	ip, #0
 80096bc:	d000      	beq.n	80096c0 <_strtod_l+0x2f0>
 80096be:	4276      	negs	r6, r6
 80096c0:	2d00      	cmp	r5, #0
 80096c2:	d14d      	bne.n	8009760 <_strtod_l+0x390>
 80096c4:	9904      	ldr	r1, [sp, #16]
 80096c6:	4301      	orrs	r1, r0
 80096c8:	f47f aec6 	bne.w	8009458 <_strtod_l+0x88>
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	f47f aee1 	bne.w	8009494 <_strtod_l+0xc4>
 80096d2:	2a69      	cmp	r2, #105	; 0x69
 80096d4:	d027      	beq.n	8009726 <_strtod_l+0x356>
 80096d6:	dc24      	bgt.n	8009722 <_strtod_l+0x352>
 80096d8:	2a49      	cmp	r2, #73	; 0x49
 80096da:	d024      	beq.n	8009726 <_strtod_l+0x356>
 80096dc:	2a4e      	cmp	r2, #78	; 0x4e
 80096de:	f47f aed9 	bne.w	8009494 <_strtod_l+0xc4>
 80096e2:	499f      	ldr	r1, [pc, #636]	; (8009960 <_strtod_l+0x590>)
 80096e4:	a817      	add	r0, sp, #92	; 0x5c
 80096e6:	f001 ff23 	bl	800b530 <__match>
 80096ea:	2800      	cmp	r0, #0
 80096ec:	f43f aed2 	beq.w	8009494 <_strtod_l+0xc4>
 80096f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b28      	cmp	r3, #40	; 0x28
 80096f6:	d12d      	bne.n	8009754 <_strtod_l+0x384>
 80096f8:	499a      	ldr	r1, [pc, #616]	; (8009964 <_strtod_l+0x594>)
 80096fa:	aa1a      	add	r2, sp, #104	; 0x68
 80096fc:	a817      	add	r0, sp, #92	; 0x5c
 80096fe:	f001 ff2b 	bl	800b558 <__hexnan>
 8009702:	2805      	cmp	r0, #5
 8009704:	d126      	bne.n	8009754 <_strtod_l+0x384>
 8009706:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009708:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800970c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009710:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009714:	e6a0      	b.n	8009458 <_strtod_l+0x88>
 8009716:	210a      	movs	r1, #10
 8009718:	fb01 2e0e 	mla	lr, r1, lr, r2
 800971c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009720:	e7b9      	b.n	8009696 <_strtod_l+0x2c6>
 8009722:	2a6e      	cmp	r2, #110	; 0x6e
 8009724:	e7db      	b.n	80096de <_strtod_l+0x30e>
 8009726:	4990      	ldr	r1, [pc, #576]	; (8009968 <_strtod_l+0x598>)
 8009728:	a817      	add	r0, sp, #92	; 0x5c
 800972a:	f001 ff01 	bl	800b530 <__match>
 800972e:	2800      	cmp	r0, #0
 8009730:	f43f aeb0 	beq.w	8009494 <_strtod_l+0xc4>
 8009734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009736:	498d      	ldr	r1, [pc, #564]	; (800996c <_strtod_l+0x59c>)
 8009738:	3b01      	subs	r3, #1
 800973a:	a817      	add	r0, sp, #92	; 0x5c
 800973c:	9317      	str	r3, [sp, #92]	; 0x5c
 800973e:	f001 fef7 	bl	800b530 <__match>
 8009742:	b910      	cbnz	r0, 800974a <_strtod_l+0x37a>
 8009744:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009746:	3301      	adds	r3, #1
 8009748:	9317      	str	r3, [sp, #92]	; 0x5c
 800974a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800997c <_strtod_l+0x5ac>
 800974e:	f04f 0a00 	mov.w	sl, #0
 8009752:	e681      	b.n	8009458 <_strtod_l+0x88>
 8009754:	4886      	ldr	r0, [pc, #536]	; (8009970 <_strtod_l+0x5a0>)
 8009756:	f002 fe6b 	bl	800c430 <nan>
 800975a:	ec5b ab10 	vmov	sl, fp, d0
 800975e:	e67b      	b.n	8009458 <_strtod_l+0x88>
 8009760:	9b05      	ldr	r3, [sp, #20]
 8009762:	9807      	ldr	r0, [sp, #28]
 8009764:	1af3      	subs	r3, r6, r3
 8009766:	2f00      	cmp	r7, #0
 8009768:	bf08      	it	eq
 800976a:	462f      	moveq	r7, r5
 800976c:	2d10      	cmp	r5, #16
 800976e:	9306      	str	r3, [sp, #24]
 8009770:	46a8      	mov	r8, r5
 8009772:	bfa8      	it	ge
 8009774:	f04f 0810 	movge.w	r8, #16
 8009778:	f7f6 fed4 	bl	8000524 <__aeabi_ui2d>
 800977c:	2d09      	cmp	r5, #9
 800977e:	4682      	mov	sl, r0
 8009780:	468b      	mov	fp, r1
 8009782:	dd13      	ble.n	80097ac <_strtod_l+0x3dc>
 8009784:	4b7b      	ldr	r3, [pc, #492]	; (8009974 <_strtod_l+0x5a4>)
 8009786:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800978a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800978e:	f7f6 ff43 	bl	8000618 <__aeabi_dmul>
 8009792:	4682      	mov	sl, r0
 8009794:	4648      	mov	r0, r9
 8009796:	468b      	mov	fp, r1
 8009798:	f7f6 fec4 	bl	8000524 <__aeabi_ui2d>
 800979c:	4602      	mov	r2, r0
 800979e:	460b      	mov	r3, r1
 80097a0:	4650      	mov	r0, sl
 80097a2:	4659      	mov	r1, fp
 80097a4:	f7f6 fd82 	bl	80002ac <__adddf3>
 80097a8:	4682      	mov	sl, r0
 80097aa:	468b      	mov	fp, r1
 80097ac:	2d0f      	cmp	r5, #15
 80097ae:	dc38      	bgt.n	8009822 <_strtod_l+0x452>
 80097b0:	9b06      	ldr	r3, [sp, #24]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	f43f ae50 	beq.w	8009458 <_strtod_l+0x88>
 80097b8:	dd24      	ble.n	8009804 <_strtod_l+0x434>
 80097ba:	2b16      	cmp	r3, #22
 80097bc:	dc0b      	bgt.n	80097d6 <_strtod_l+0x406>
 80097be:	496d      	ldr	r1, [pc, #436]	; (8009974 <_strtod_l+0x5a4>)
 80097c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80097c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097c8:	4652      	mov	r2, sl
 80097ca:	465b      	mov	r3, fp
 80097cc:	f7f6 ff24 	bl	8000618 <__aeabi_dmul>
 80097d0:	4682      	mov	sl, r0
 80097d2:	468b      	mov	fp, r1
 80097d4:	e640      	b.n	8009458 <_strtod_l+0x88>
 80097d6:	9a06      	ldr	r2, [sp, #24]
 80097d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80097dc:	4293      	cmp	r3, r2
 80097de:	db20      	blt.n	8009822 <_strtod_l+0x452>
 80097e0:	4c64      	ldr	r4, [pc, #400]	; (8009974 <_strtod_l+0x5a4>)
 80097e2:	f1c5 050f 	rsb	r5, r5, #15
 80097e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80097ea:	4652      	mov	r2, sl
 80097ec:	465b      	mov	r3, fp
 80097ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80097f2:	f7f6 ff11 	bl	8000618 <__aeabi_dmul>
 80097f6:	9b06      	ldr	r3, [sp, #24]
 80097f8:	1b5d      	subs	r5, r3, r5
 80097fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80097fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009802:	e7e3      	b.n	80097cc <_strtod_l+0x3fc>
 8009804:	9b06      	ldr	r3, [sp, #24]
 8009806:	3316      	adds	r3, #22
 8009808:	db0b      	blt.n	8009822 <_strtod_l+0x452>
 800980a:	9b05      	ldr	r3, [sp, #20]
 800980c:	1b9e      	subs	r6, r3, r6
 800980e:	4b59      	ldr	r3, [pc, #356]	; (8009974 <_strtod_l+0x5a4>)
 8009810:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009814:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009818:	4650      	mov	r0, sl
 800981a:	4659      	mov	r1, fp
 800981c:	f7f7 f826 	bl	800086c <__aeabi_ddiv>
 8009820:	e7d6      	b.n	80097d0 <_strtod_l+0x400>
 8009822:	9b06      	ldr	r3, [sp, #24]
 8009824:	eba5 0808 	sub.w	r8, r5, r8
 8009828:	4498      	add	r8, r3
 800982a:	f1b8 0f00 	cmp.w	r8, #0
 800982e:	dd74      	ble.n	800991a <_strtod_l+0x54a>
 8009830:	f018 030f 	ands.w	r3, r8, #15
 8009834:	d00a      	beq.n	800984c <_strtod_l+0x47c>
 8009836:	494f      	ldr	r1, [pc, #316]	; (8009974 <_strtod_l+0x5a4>)
 8009838:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800983c:	4652      	mov	r2, sl
 800983e:	465b      	mov	r3, fp
 8009840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009844:	f7f6 fee8 	bl	8000618 <__aeabi_dmul>
 8009848:	4682      	mov	sl, r0
 800984a:	468b      	mov	fp, r1
 800984c:	f038 080f 	bics.w	r8, r8, #15
 8009850:	d04f      	beq.n	80098f2 <_strtod_l+0x522>
 8009852:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009856:	dd22      	ble.n	800989e <_strtod_l+0x4ce>
 8009858:	2500      	movs	r5, #0
 800985a:	462e      	mov	r6, r5
 800985c:	9507      	str	r5, [sp, #28]
 800985e:	9505      	str	r5, [sp, #20]
 8009860:	2322      	movs	r3, #34	; 0x22
 8009862:	f8df b118 	ldr.w	fp, [pc, #280]	; 800997c <_strtod_l+0x5ac>
 8009866:	6023      	str	r3, [r4, #0]
 8009868:	f04f 0a00 	mov.w	sl, #0
 800986c:	9b07      	ldr	r3, [sp, #28]
 800986e:	2b00      	cmp	r3, #0
 8009870:	f43f adf2 	beq.w	8009458 <_strtod_l+0x88>
 8009874:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009876:	4620      	mov	r0, r4
 8009878:	f001 ff86 	bl	800b788 <_Bfree>
 800987c:	9905      	ldr	r1, [sp, #20]
 800987e:	4620      	mov	r0, r4
 8009880:	f001 ff82 	bl	800b788 <_Bfree>
 8009884:	4631      	mov	r1, r6
 8009886:	4620      	mov	r0, r4
 8009888:	f001 ff7e 	bl	800b788 <_Bfree>
 800988c:	9907      	ldr	r1, [sp, #28]
 800988e:	4620      	mov	r0, r4
 8009890:	f001 ff7a 	bl	800b788 <_Bfree>
 8009894:	4629      	mov	r1, r5
 8009896:	4620      	mov	r0, r4
 8009898:	f001 ff76 	bl	800b788 <_Bfree>
 800989c:	e5dc      	b.n	8009458 <_strtod_l+0x88>
 800989e:	4b36      	ldr	r3, [pc, #216]	; (8009978 <_strtod_l+0x5a8>)
 80098a0:	9304      	str	r3, [sp, #16]
 80098a2:	2300      	movs	r3, #0
 80098a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80098a8:	4650      	mov	r0, sl
 80098aa:	4659      	mov	r1, fp
 80098ac:	4699      	mov	r9, r3
 80098ae:	f1b8 0f01 	cmp.w	r8, #1
 80098b2:	dc21      	bgt.n	80098f8 <_strtod_l+0x528>
 80098b4:	b10b      	cbz	r3, 80098ba <_strtod_l+0x4ea>
 80098b6:	4682      	mov	sl, r0
 80098b8:	468b      	mov	fp, r1
 80098ba:	4b2f      	ldr	r3, [pc, #188]	; (8009978 <_strtod_l+0x5a8>)
 80098bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80098c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80098c4:	4652      	mov	r2, sl
 80098c6:	465b      	mov	r3, fp
 80098c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80098cc:	f7f6 fea4 	bl	8000618 <__aeabi_dmul>
 80098d0:	4b2a      	ldr	r3, [pc, #168]	; (800997c <_strtod_l+0x5ac>)
 80098d2:	460a      	mov	r2, r1
 80098d4:	400b      	ands	r3, r1
 80098d6:	492a      	ldr	r1, [pc, #168]	; (8009980 <_strtod_l+0x5b0>)
 80098d8:	428b      	cmp	r3, r1
 80098da:	4682      	mov	sl, r0
 80098dc:	d8bc      	bhi.n	8009858 <_strtod_l+0x488>
 80098de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80098e2:	428b      	cmp	r3, r1
 80098e4:	bf86      	itte	hi
 80098e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009984 <_strtod_l+0x5b4>
 80098ea:	f04f 3aff 	movhi.w	sl, #4294967295
 80098ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80098f2:	2300      	movs	r3, #0
 80098f4:	9304      	str	r3, [sp, #16]
 80098f6:	e084      	b.n	8009a02 <_strtod_l+0x632>
 80098f8:	f018 0f01 	tst.w	r8, #1
 80098fc:	d005      	beq.n	800990a <_strtod_l+0x53a>
 80098fe:	9b04      	ldr	r3, [sp, #16]
 8009900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009904:	f7f6 fe88 	bl	8000618 <__aeabi_dmul>
 8009908:	2301      	movs	r3, #1
 800990a:	9a04      	ldr	r2, [sp, #16]
 800990c:	3208      	adds	r2, #8
 800990e:	f109 0901 	add.w	r9, r9, #1
 8009912:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009916:	9204      	str	r2, [sp, #16]
 8009918:	e7c9      	b.n	80098ae <_strtod_l+0x4de>
 800991a:	d0ea      	beq.n	80098f2 <_strtod_l+0x522>
 800991c:	f1c8 0800 	rsb	r8, r8, #0
 8009920:	f018 020f 	ands.w	r2, r8, #15
 8009924:	d00a      	beq.n	800993c <_strtod_l+0x56c>
 8009926:	4b13      	ldr	r3, [pc, #76]	; (8009974 <_strtod_l+0x5a4>)
 8009928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800992c:	4650      	mov	r0, sl
 800992e:	4659      	mov	r1, fp
 8009930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009934:	f7f6 ff9a 	bl	800086c <__aeabi_ddiv>
 8009938:	4682      	mov	sl, r0
 800993a:	468b      	mov	fp, r1
 800993c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009940:	d0d7      	beq.n	80098f2 <_strtod_l+0x522>
 8009942:	f1b8 0f1f 	cmp.w	r8, #31
 8009946:	dd1f      	ble.n	8009988 <_strtod_l+0x5b8>
 8009948:	2500      	movs	r5, #0
 800994a:	462e      	mov	r6, r5
 800994c:	9507      	str	r5, [sp, #28]
 800994e:	9505      	str	r5, [sp, #20]
 8009950:	2322      	movs	r3, #34	; 0x22
 8009952:	f04f 0a00 	mov.w	sl, #0
 8009956:	f04f 0b00 	mov.w	fp, #0
 800995a:	6023      	str	r3, [r4, #0]
 800995c:	e786      	b.n	800986c <_strtod_l+0x49c>
 800995e:	bf00      	nop
 8009960:	0800cd7d 	.word	0x0800cd7d
 8009964:	0800cdc0 	.word	0x0800cdc0
 8009968:	0800cd75 	.word	0x0800cd75
 800996c:	0800cf04 	.word	0x0800cf04
 8009970:	0800d1b0 	.word	0x0800d1b0
 8009974:	0800d090 	.word	0x0800d090
 8009978:	0800d068 	.word	0x0800d068
 800997c:	7ff00000 	.word	0x7ff00000
 8009980:	7ca00000 	.word	0x7ca00000
 8009984:	7fefffff 	.word	0x7fefffff
 8009988:	f018 0310 	ands.w	r3, r8, #16
 800998c:	bf18      	it	ne
 800998e:	236a      	movne	r3, #106	; 0x6a
 8009990:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009d40 <_strtod_l+0x970>
 8009994:	9304      	str	r3, [sp, #16]
 8009996:	4650      	mov	r0, sl
 8009998:	4659      	mov	r1, fp
 800999a:	2300      	movs	r3, #0
 800999c:	f018 0f01 	tst.w	r8, #1
 80099a0:	d004      	beq.n	80099ac <_strtod_l+0x5dc>
 80099a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80099a6:	f7f6 fe37 	bl	8000618 <__aeabi_dmul>
 80099aa:	2301      	movs	r3, #1
 80099ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80099b0:	f109 0908 	add.w	r9, r9, #8
 80099b4:	d1f2      	bne.n	800999c <_strtod_l+0x5cc>
 80099b6:	b10b      	cbz	r3, 80099bc <_strtod_l+0x5ec>
 80099b8:	4682      	mov	sl, r0
 80099ba:	468b      	mov	fp, r1
 80099bc:	9b04      	ldr	r3, [sp, #16]
 80099be:	b1c3      	cbz	r3, 80099f2 <_strtod_l+0x622>
 80099c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80099c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	4659      	mov	r1, fp
 80099cc:	dd11      	ble.n	80099f2 <_strtod_l+0x622>
 80099ce:	2b1f      	cmp	r3, #31
 80099d0:	f340 8124 	ble.w	8009c1c <_strtod_l+0x84c>
 80099d4:	2b34      	cmp	r3, #52	; 0x34
 80099d6:	bfde      	ittt	le
 80099d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80099dc:	f04f 33ff 	movle.w	r3, #4294967295
 80099e0:	fa03 f202 	lslle.w	r2, r3, r2
 80099e4:	f04f 0a00 	mov.w	sl, #0
 80099e8:	bfcc      	ite	gt
 80099ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80099ee:	ea02 0b01 	andle.w	fp, r2, r1
 80099f2:	2200      	movs	r2, #0
 80099f4:	2300      	movs	r3, #0
 80099f6:	4650      	mov	r0, sl
 80099f8:	4659      	mov	r1, fp
 80099fa:	f7f7 f875 	bl	8000ae8 <__aeabi_dcmpeq>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	d1a2      	bne.n	8009948 <_strtod_l+0x578>
 8009a02:	9b07      	ldr	r3, [sp, #28]
 8009a04:	9300      	str	r3, [sp, #0]
 8009a06:	9908      	ldr	r1, [sp, #32]
 8009a08:	462b      	mov	r3, r5
 8009a0a:	463a      	mov	r2, r7
 8009a0c:	4620      	mov	r0, r4
 8009a0e:	f001 ff23 	bl	800b858 <__s2b>
 8009a12:	9007      	str	r0, [sp, #28]
 8009a14:	2800      	cmp	r0, #0
 8009a16:	f43f af1f 	beq.w	8009858 <_strtod_l+0x488>
 8009a1a:	9b05      	ldr	r3, [sp, #20]
 8009a1c:	1b9e      	subs	r6, r3, r6
 8009a1e:	9b06      	ldr	r3, [sp, #24]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	bfb4      	ite	lt
 8009a24:	4633      	movlt	r3, r6
 8009a26:	2300      	movge	r3, #0
 8009a28:	930c      	str	r3, [sp, #48]	; 0x30
 8009a2a:	9b06      	ldr	r3, [sp, #24]
 8009a2c:	2500      	movs	r5, #0
 8009a2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009a32:	9312      	str	r3, [sp, #72]	; 0x48
 8009a34:	462e      	mov	r6, r5
 8009a36:	9b07      	ldr	r3, [sp, #28]
 8009a38:	4620      	mov	r0, r4
 8009a3a:	6859      	ldr	r1, [r3, #4]
 8009a3c:	f001 fe64 	bl	800b708 <_Balloc>
 8009a40:	9005      	str	r0, [sp, #20]
 8009a42:	2800      	cmp	r0, #0
 8009a44:	f43f af0c 	beq.w	8009860 <_strtod_l+0x490>
 8009a48:	9b07      	ldr	r3, [sp, #28]
 8009a4a:	691a      	ldr	r2, [r3, #16]
 8009a4c:	3202      	adds	r2, #2
 8009a4e:	f103 010c 	add.w	r1, r3, #12
 8009a52:	0092      	lsls	r2, r2, #2
 8009a54:	300c      	adds	r0, #12
 8009a56:	f7fe fc94 	bl	8008382 <memcpy>
 8009a5a:	ec4b ab10 	vmov	d0, sl, fp
 8009a5e:	aa1a      	add	r2, sp, #104	; 0x68
 8009a60:	a919      	add	r1, sp, #100	; 0x64
 8009a62:	4620      	mov	r0, r4
 8009a64:	f002 fa3e 	bl	800bee4 <__d2b>
 8009a68:	ec4b ab18 	vmov	d8, sl, fp
 8009a6c:	9018      	str	r0, [sp, #96]	; 0x60
 8009a6e:	2800      	cmp	r0, #0
 8009a70:	f43f aef6 	beq.w	8009860 <_strtod_l+0x490>
 8009a74:	2101      	movs	r1, #1
 8009a76:	4620      	mov	r0, r4
 8009a78:	f001 ff88 	bl	800b98c <__i2b>
 8009a7c:	4606      	mov	r6, r0
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	f43f aeee 	beq.w	8009860 <_strtod_l+0x490>
 8009a84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a86:	9904      	ldr	r1, [sp, #16]
 8009a88:	2b00      	cmp	r3, #0
 8009a8a:	bfab      	itete	ge
 8009a8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009a8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009a90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009a92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009a96:	bfac      	ite	ge
 8009a98:	eb03 0902 	addge.w	r9, r3, r2
 8009a9c:	1ad7      	sublt	r7, r2, r3
 8009a9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009aa0:	eba3 0801 	sub.w	r8, r3, r1
 8009aa4:	4490      	add	r8, r2
 8009aa6:	4ba1      	ldr	r3, [pc, #644]	; (8009d2c <_strtod_l+0x95c>)
 8009aa8:	f108 38ff 	add.w	r8, r8, #4294967295
 8009aac:	4598      	cmp	r8, r3
 8009aae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009ab2:	f280 80c7 	bge.w	8009c44 <_strtod_l+0x874>
 8009ab6:	eba3 0308 	sub.w	r3, r3, r8
 8009aba:	2b1f      	cmp	r3, #31
 8009abc:	eba2 0203 	sub.w	r2, r2, r3
 8009ac0:	f04f 0101 	mov.w	r1, #1
 8009ac4:	f300 80b1 	bgt.w	8009c2a <_strtod_l+0x85a>
 8009ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8009acc:	930d      	str	r3, [sp, #52]	; 0x34
 8009ace:	2300      	movs	r3, #0
 8009ad0:	9308      	str	r3, [sp, #32]
 8009ad2:	eb09 0802 	add.w	r8, r9, r2
 8009ad6:	9b04      	ldr	r3, [sp, #16]
 8009ad8:	45c1      	cmp	r9, r8
 8009ada:	4417      	add	r7, r2
 8009adc:	441f      	add	r7, r3
 8009ade:	464b      	mov	r3, r9
 8009ae0:	bfa8      	it	ge
 8009ae2:	4643      	movge	r3, r8
 8009ae4:	42bb      	cmp	r3, r7
 8009ae6:	bfa8      	it	ge
 8009ae8:	463b      	movge	r3, r7
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	bfc2      	ittt	gt
 8009aee:	eba8 0803 	subgt.w	r8, r8, r3
 8009af2:	1aff      	subgt	r7, r7, r3
 8009af4:	eba9 0903 	subgt.w	r9, r9, r3
 8009af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	dd17      	ble.n	8009b2e <_strtod_l+0x75e>
 8009afe:	4631      	mov	r1, r6
 8009b00:	461a      	mov	r2, r3
 8009b02:	4620      	mov	r0, r4
 8009b04:	f002 f802 	bl	800bb0c <__pow5mult>
 8009b08:	4606      	mov	r6, r0
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	f43f aea8 	beq.w	8009860 <_strtod_l+0x490>
 8009b10:	4601      	mov	r1, r0
 8009b12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009b14:	4620      	mov	r0, r4
 8009b16:	f001 ff4f 	bl	800b9b8 <__multiply>
 8009b1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009b1c:	2800      	cmp	r0, #0
 8009b1e:	f43f ae9f 	beq.w	8009860 <_strtod_l+0x490>
 8009b22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b24:	4620      	mov	r0, r4
 8009b26:	f001 fe2f 	bl	800b788 <_Bfree>
 8009b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b2c:	9318      	str	r3, [sp, #96]	; 0x60
 8009b2e:	f1b8 0f00 	cmp.w	r8, #0
 8009b32:	f300 808c 	bgt.w	8009c4e <_strtod_l+0x87e>
 8009b36:	9b06      	ldr	r3, [sp, #24]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	dd08      	ble.n	8009b4e <_strtod_l+0x77e>
 8009b3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009b3e:	9905      	ldr	r1, [sp, #20]
 8009b40:	4620      	mov	r0, r4
 8009b42:	f001 ffe3 	bl	800bb0c <__pow5mult>
 8009b46:	9005      	str	r0, [sp, #20]
 8009b48:	2800      	cmp	r0, #0
 8009b4a:	f43f ae89 	beq.w	8009860 <_strtod_l+0x490>
 8009b4e:	2f00      	cmp	r7, #0
 8009b50:	dd08      	ble.n	8009b64 <_strtod_l+0x794>
 8009b52:	9905      	ldr	r1, [sp, #20]
 8009b54:	463a      	mov	r2, r7
 8009b56:	4620      	mov	r0, r4
 8009b58:	f002 f832 	bl	800bbc0 <__lshift>
 8009b5c:	9005      	str	r0, [sp, #20]
 8009b5e:	2800      	cmp	r0, #0
 8009b60:	f43f ae7e 	beq.w	8009860 <_strtod_l+0x490>
 8009b64:	f1b9 0f00 	cmp.w	r9, #0
 8009b68:	dd08      	ble.n	8009b7c <_strtod_l+0x7ac>
 8009b6a:	4631      	mov	r1, r6
 8009b6c:	464a      	mov	r2, r9
 8009b6e:	4620      	mov	r0, r4
 8009b70:	f002 f826 	bl	800bbc0 <__lshift>
 8009b74:	4606      	mov	r6, r0
 8009b76:	2800      	cmp	r0, #0
 8009b78:	f43f ae72 	beq.w	8009860 <_strtod_l+0x490>
 8009b7c:	9a05      	ldr	r2, [sp, #20]
 8009b7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009b80:	4620      	mov	r0, r4
 8009b82:	f002 f8a9 	bl	800bcd8 <__mdiff>
 8009b86:	4605      	mov	r5, r0
 8009b88:	2800      	cmp	r0, #0
 8009b8a:	f43f ae69 	beq.w	8009860 <_strtod_l+0x490>
 8009b8e:	68c3      	ldr	r3, [r0, #12]
 8009b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8009b92:	2300      	movs	r3, #0
 8009b94:	60c3      	str	r3, [r0, #12]
 8009b96:	4631      	mov	r1, r6
 8009b98:	f002 f882 	bl	800bca0 <__mcmp>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	da60      	bge.n	8009c62 <_strtod_l+0x892>
 8009ba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ba2:	ea53 030a 	orrs.w	r3, r3, sl
 8009ba6:	f040 8082 	bne.w	8009cae <_strtod_l+0x8de>
 8009baa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d17d      	bne.n	8009cae <_strtod_l+0x8de>
 8009bb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009bb6:	0d1b      	lsrs	r3, r3, #20
 8009bb8:	051b      	lsls	r3, r3, #20
 8009bba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009bbe:	d976      	bls.n	8009cae <_strtod_l+0x8de>
 8009bc0:	696b      	ldr	r3, [r5, #20]
 8009bc2:	b913      	cbnz	r3, 8009bca <_strtod_l+0x7fa>
 8009bc4:	692b      	ldr	r3, [r5, #16]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	dd71      	ble.n	8009cae <_strtod_l+0x8de>
 8009bca:	4629      	mov	r1, r5
 8009bcc:	2201      	movs	r2, #1
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f001 fff6 	bl	800bbc0 <__lshift>
 8009bd4:	4631      	mov	r1, r6
 8009bd6:	4605      	mov	r5, r0
 8009bd8:	f002 f862 	bl	800bca0 <__mcmp>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	dd66      	ble.n	8009cae <_strtod_l+0x8de>
 8009be0:	9904      	ldr	r1, [sp, #16]
 8009be2:	4a53      	ldr	r2, [pc, #332]	; (8009d30 <_strtod_l+0x960>)
 8009be4:	465b      	mov	r3, fp
 8009be6:	2900      	cmp	r1, #0
 8009be8:	f000 8081 	beq.w	8009cee <_strtod_l+0x91e>
 8009bec:	ea02 010b 	and.w	r1, r2, fp
 8009bf0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009bf4:	dc7b      	bgt.n	8009cee <_strtod_l+0x91e>
 8009bf6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009bfa:	f77f aea9 	ble.w	8009950 <_strtod_l+0x580>
 8009bfe:	4b4d      	ldr	r3, [pc, #308]	; (8009d34 <_strtod_l+0x964>)
 8009c00:	4650      	mov	r0, sl
 8009c02:	4659      	mov	r1, fp
 8009c04:	2200      	movs	r2, #0
 8009c06:	f7f6 fd07 	bl	8000618 <__aeabi_dmul>
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	4303      	orrs	r3, r0
 8009c0e:	bf08      	it	eq
 8009c10:	2322      	moveq	r3, #34	; 0x22
 8009c12:	4682      	mov	sl, r0
 8009c14:	468b      	mov	fp, r1
 8009c16:	bf08      	it	eq
 8009c18:	6023      	streq	r3, [r4, #0]
 8009c1a:	e62b      	b.n	8009874 <_strtod_l+0x4a4>
 8009c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8009c20:	fa02 f303 	lsl.w	r3, r2, r3
 8009c24:	ea03 0a0a 	and.w	sl, r3, sl
 8009c28:	e6e3      	b.n	80099f2 <_strtod_l+0x622>
 8009c2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009c2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009c32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009c36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009c3a:	fa01 f308 	lsl.w	r3, r1, r8
 8009c3e:	9308      	str	r3, [sp, #32]
 8009c40:	910d      	str	r1, [sp, #52]	; 0x34
 8009c42:	e746      	b.n	8009ad2 <_strtod_l+0x702>
 8009c44:	2300      	movs	r3, #0
 8009c46:	9308      	str	r3, [sp, #32]
 8009c48:	2301      	movs	r3, #1
 8009c4a:	930d      	str	r3, [sp, #52]	; 0x34
 8009c4c:	e741      	b.n	8009ad2 <_strtod_l+0x702>
 8009c4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c50:	4642      	mov	r2, r8
 8009c52:	4620      	mov	r0, r4
 8009c54:	f001 ffb4 	bl	800bbc0 <__lshift>
 8009c58:	9018      	str	r0, [sp, #96]	; 0x60
 8009c5a:	2800      	cmp	r0, #0
 8009c5c:	f47f af6b 	bne.w	8009b36 <_strtod_l+0x766>
 8009c60:	e5fe      	b.n	8009860 <_strtod_l+0x490>
 8009c62:	465f      	mov	r7, fp
 8009c64:	d16e      	bne.n	8009d44 <_strtod_l+0x974>
 8009c66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c6c:	b342      	cbz	r2, 8009cc0 <_strtod_l+0x8f0>
 8009c6e:	4a32      	ldr	r2, [pc, #200]	; (8009d38 <_strtod_l+0x968>)
 8009c70:	4293      	cmp	r3, r2
 8009c72:	d128      	bne.n	8009cc6 <_strtod_l+0x8f6>
 8009c74:	9b04      	ldr	r3, [sp, #16]
 8009c76:	4651      	mov	r1, sl
 8009c78:	b1eb      	cbz	r3, 8009cb6 <_strtod_l+0x8e6>
 8009c7a:	4b2d      	ldr	r3, [pc, #180]	; (8009d30 <_strtod_l+0x960>)
 8009c7c:	403b      	ands	r3, r7
 8009c7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009c82:	f04f 32ff 	mov.w	r2, #4294967295
 8009c86:	d819      	bhi.n	8009cbc <_strtod_l+0x8ec>
 8009c88:	0d1b      	lsrs	r3, r3, #20
 8009c8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c92:	4299      	cmp	r1, r3
 8009c94:	d117      	bne.n	8009cc6 <_strtod_l+0x8f6>
 8009c96:	4b29      	ldr	r3, [pc, #164]	; (8009d3c <_strtod_l+0x96c>)
 8009c98:	429f      	cmp	r7, r3
 8009c9a:	d102      	bne.n	8009ca2 <_strtod_l+0x8d2>
 8009c9c:	3101      	adds	r1, #1
 8009c9e:	f43f addf 	beq.w	8009860 <_strtod_l+0x490>
 8009ca2:	4b23      	ldr	r3, [pc, #140]	; (8009d30 <_strtod_l+0x960>)
 8009ca4:	403b      	ands	r3, r7
 8009ca6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009caa:	f04f 0a00 	mov.w	sl, #0
 8009cae:	9b04      	ldr	r3, [sp, #16]
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d1a4      	bne.n	8009bfe <_strtod_l+0x82e>
 8009cb4:	e5de      	b.n	8009874 <_strtod_l+0x4a4>
 8009cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8009cba:	e7ea      	b.n	8009c92 <_strtod_l+0x8c2>
 8009cbc:	4613      	mov	r3, r2
 8009cbe:	e7e8      	b.n	8009c92 <_strtod_l+0x8c2>
 8009cc0:	ea53 030a 	orrs.w	r3, r3, sl
 8009cc4:	d08c      	beq.n	8009be0 <_strtod_l+0x810>
 8009cc6:	9b08      	ldr	r3, [sp, #32]
 8009cc8:	b1db      	cbz	r3, 8009d02 <_strtod_l+0x932>
 8009cca:	423b      	tst	r3, r7
 8009ccc:	d0ef      	beq.n	8009cae <_strtod_l+0x8de>
 8009cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cd0:	9a04      	ldr	r2, [sp, #16]
 8009cd2:	4650      	mov	r0, sl
 8009cd4:	4659      	mov	r1, fp
 8009cd6:	b1c3      	cbz	r3, 8009d0a <_strtod_l+0x93a>
 8009cd8:	f7ff fb5b 	bl	8009392 <sulp>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	ec51 0b18 	vmov	r0, r1, d8
 8009ce4:	f7f6 fae2 	bl	80002ac <__adddf3>
 8009ce8:	4682      	mov	sl, r0
 8009cea:	468b      	mov	fp, r1
 8009cec:	e7df      	b.n	8009cae <_strtod_l+0x8de>
 8009cee:	4013      	ands	r3, r2
 8009cf0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009cf4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009cf8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009cfc:	f04f 3aff 	mov.w	sl, #4294967295
 8009d00:	e7d5      	b.n	8009cae <_strtod_l+0x8de>
 8009d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009d04:	ea13 0f0a 	tst.w	r3, sl
 8009d08:	e7e0      	b.n	8009ccc <_strtod_l+0x8fc>
 8009d0a:	f7ff fb42 	bl	8009392 <sulp>
 8009d0e:	4602      	mov	r2, r0
 8009d10:	460b      	mov	r3, r1
 8009d12:	ec51 0b18 	vmov	r0, r1, d8
 8009d16:	f7f6 fac7 	bl	80002a8 <__aeabi_dsub>
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	4682      	mov	sl, r0
 8009d20:	468b      	mov	fp, r1
 8009d22:	f7f6 fee1 	bl	8000ae8 <__aeabi_dcmpeq>
 8009d26:	2800      	cmp	r0, #0
 8009d28:	d0c1      	beq.n	8009cae <_strtod_l+0x8de>
 8009d2a:	e611      	b.n	8009950 <_strtod_l+0x580>
 8009d2c:	fffffc02 	.word	0xfffffc02
 8009d30:	7ff00000 	.word	0x7ff00000
 8009d34:	39500000 	.word	0x39500000
 8009d38:	000fffff 	.word	0x000fffff
 8009d3c:	7fefffff 	.word	0x7fefffff
 8009d40:	0800cdd8 	.word	0x0800cdd8
 8009d44:	4631      	mov	r1, r6
 8009d46:	4628      	mov	r0, r5
 8009d48:	f002 f928 	bl	800bf9c <__ratio>
 8009d4c:	ec59 8b10 	vmov	r8, r9, d0
 8009d50:	ee10 0a10 	vmov	r0, s0
 8009d54:	2200      	movs	r2, #0
 8009d56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d5a:	4649      	mov	r1, r9
 8009d5c:	f7f6 fed8 	bl	8000b10 <__aeabi_dcmple>
 8009d60:	2800      	cmp	r0, #0
 8009d62:	d07a      	beq.n	8009e5a <_strtod_l+0xa8a>
 8009d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d04a      	beq.n	8009e00 <_strtod_l+0xa30>
 8009d6a:	4b95      	ldr	r3, [pc, #596]	; (8009fc0 <_strtod_l+0xbf0>)
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009d72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009fc0 <_strtod_l+0xbf0>
 8009d76:	f04f 0800 	mov.w	r8, #0
 8009d7a:	4b92      	ldr	r3, [pc, #584]	; (8009fc4 <_strtod_l+0xbf4>)
 8009d7c:	403b      	ands	r3, r7
 8009d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8009d80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009d82:	4b91      	ldr	r3, [pc, #580]	; (8009fc8 <_strtod_l+0xbf8>)
 8009d84:	429a      	cmp	r2, r3
 8009d86:	f040 80b0 	bne.w	8009eea <_strtod_l+0xb1a>
 8009d8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009d8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009d92:	ec4b ab10 	vmov	d0, sl, fp
 8009d96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009d9a:	f002 f827 	bl	800bdec <__ulp>
 8009d9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009da2:	ec53 2b10 	vmov	r2, r3, d0
 8009da6:	f7f6 fc37 	bl	8000618 <__aeabi_dmul>
 8009daa:	4652      	mov	r2, sl
 8009dac:	465b      	mov	r3, fp
 8009dae:	f7f6 fa7d 	bl	80002ac <__adddf3>
 8009db2:	460b      	mov	r3, r1
 8009db4:	4983      	ldr	r1, [pc, #524]	; (8009fc4 <_strtod_l+0xbf4>)
 8009db6:	4a85      	ldr	r2, [pc, #532]	; (8009fcc <_strtod_l+0xbfc>)
 8009db8:	4019      	ands	r1, r3
 8009dba:	4291      	cmp	r1, r2
 8009dbc:	4682      	mov	sl, r0
 8009dbe:	d960      	bls.n	8009e82 <_strtod_l+0xab2>
 8009dc0:	ee18 3a90 	vmov	r3, s17
 8009dc4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009dc8:	4293      	cmp	r3, r2
 8009dca:	d104      	bne.n	8009dd6 <_strtod_l+0xa06>
 8009dcc:	ee18 3a10 	vmov	r3, s16
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f43f ad45 	beq.w	8009860 <_strtod_l+0x490>
 8009dd6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009fd8 <_strtod_l+0xc08>
 8009dda:	f04f 3aff 	mov.w	sl, #4294967295
 8009dde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009de0:	4620      	mov	r0, r4
 8009de2:	f001 fcd1 	bl	800b788 <_Bfree>
 8009de6:	9905      	ldr	r1, [sp, #20]
 8009de8:	4620      	mov	r0, r4
 8009dea:	f001 fccd 	bl	800b788 <_Bfree>
 8009dee:	4631      	mov	r1, r6
 8009df0:	4620      	mov	r0, r4
 8009df2:	f001 fcc9 	bl	800b788 <_Bfree>
 8009df6:	4629      	mov	r1, r5
 8009df8:	4620      	mov	r0, r4
 8009dfa:	f001 fcc5 	bl	800b788 <_Bfree>
 8009dfe:	e61a      	b.n	8009a36 <_strtod_l+0x666>
 8009e00:	f1ba 0f00 	cmp.w	sl, #0
 8009e04:	d11b      	bne.n	8009e3e <_strtod_l+0xa6e>
 8009e06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009e0a:	b9f3      	cbnz	r3, 8009e4a <_strtod_l+0xa7a>
 8009e0c:	4b6c      	ldr	r3, [pc, #432]	; (8009fc0 <_strtod_l+0xbf0>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	4640      	mov	r0, r8
 8009e12:	4649      	mov	r1, r9
 8009e14:	f7f6 fe72 	bl	8000afc <__aeabi_dcmplt>
 8009e18:	b9d0      	cbnz	r0, 8009e50 <_strtod_l+0xa80>
 8009e1a:	4640      	mov	r0, r8
 8009e1c:	4649      	mov	r1, r9
 8009e1e:	4b6c      	ldr	r3, [pc, #432]	; (8009fd0 <_strtod_l+0xc00>)
 8009e20:	2200      	movs	r2, #0
 8009e22:	f7f6 fbf9 	bl	8000618 <__aeabi_dmul>
 8009e26:	4680      	mov	r8, r0
 8009e28:	4689      	mov	r9, r1
 8009e2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009e2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009e32:	9315      	str	r3, [sp, #84]	; 0x54
 8009e34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009e38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e3c:	e79d      	b.n	8009d7a <_strtod_l+0x9aa>
 8009e3e:	f1ba 0f01 	cmp.w	sl, #1
 8009e42:	d102      	bne.n	8009e4a <_strtod_l+0xa7a>
 8009e44:	2f00      	cmp	r7, #0
 8009e46:	f43f ad83 	beq.w	8009950 <_strtod_l+0x580>
 8009e4a:	4b62      	ldr	r3, [pc, #392]	; (8009fd4 <_strtod_l+0xc04>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	e78e      	b.n	8009d6e <_strtod_l+0x99e>
 8009e50:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009fd0 <_strtod_l+0xc00>
 8009e54:	f04f 0800 	mov.w	r8, #0
 8009e58:	e7e7      	b.n	8009e2a <_strtod_l+0xa5a>
 8009e5a:	4b5d      	ldr	r3, [pc, #372]	; (8009fd0 <_strtod_l+0xc00>)
 8009e5c:	4640      	mov	r0, r8
 8009e5e:	4649      	mov	r1, r9
 8009e60:	2200      	movs	r2, #0
 8009e62:	f7f6 fbd9 	bl	8000618 <__aeabi_dmul>
 8009e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e68:	4680      	mov	r8, r0
 8009e6a:	4689      	mov	r9, r1
 8009e6c:	b933      	cbnz	r3, 8009e7c <_strtod_l+0xaac>
 8009e6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009e72:	900e      	str	r0, [sp, #56]	; 0x38
 8009e74:	930f      	str	r3, [sp, #60]	; 0x3c
 8009e76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009e7a:	e7dd      	b.n	8009e38 <_strtod_l+0xa68>
 8009e7c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009e80:	e7f9      	b.n	8009e76 <_strtod_l+0xaa6>
 8009e82:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009e86:	9b04      	ldr	r3, [sp, #16]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d1a8      	bne.n	8009dde <_strtod_l+0xa0e>
 8009e8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009e90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e92:	0d1b      	lsrs	r3, r3, #20
 8009e94:	051b      	lsls	r3, r3, #20
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d1a1      	bne.n	8009dde <_strtod_l+0xa0e>
 8009e9a:	4640      	mov	r0, r8
 8009e9c:	4649      	mov	r1, r9
 8009e9e:	f7f6 ff1b 	bl	8000cd8 <__aeabi_d2lz>
 8009ea2:	f7f6 fb8b 	bl	80005bc <__aeabi_l2d>
 8009ea6:	4602      	mov	r2, r0
 8009ea8:	460b      	mov	r3, r1
 8009eaa:	4640      	mov	r0, r8
 8009eac:	4649      	mov	r1, r9
 8009eae:	f7f6 f9fb 	bl	80002a8 <__aeabi_dsub>
 8009eb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009eb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009eb8:	ea43 030a 	orr.w	r3, r3, sl
 8009ebc:	4313      	orrs	r3, r2
 8009ebe:	4680      	mov	r8, r0
 8009ec0:	4689      	mov	r9, r1
 8009ec2:	d055      	beq.n	8009f70 <_strtod_l+0xba0>
 8009ec4:	a336      	add	r3, pc, #216	; (adr r3, 8009fa0 <_strtod_l+0xbd0>)
 8009ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eca:	f7f6 fe17 	bl	8000afc <__aeabi_dcmplt>
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f47f acd0 	bne.w	8009874 <_strtod_l+0x4a4>
 8009ed4:	a334      	add	r3, pc, #208	; (adr r3, 8009fa8 <_strtod_l+0xbd8>)
 8009ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eda:	4640      	mov	r0, r8
 8009edc:	4649      	mov	r1, r9
 8009ede:	f7f6 fe2b 	bl	8000b38 <__aeabi_dcmpgt>
 8009ee2:	2800      	cmp	r0, #0
 8009ee4:	f43f af7b 	beq.w	8009dde <_strtod_l+0xa0e>
 8009ee8:	e4c4      	b.n	8009874 <_strtod_l+0x4a4>
 8009eea:	9b04      	ldr	r3, [sp, #16]
 8009eec:	b333      	cbz	r3, 8009f3c <_strtod_l+0xb6c>
 8009eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ef0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009ef4:	d822      	bhi.n	8009f3c <_strtod_l+0xb6c>
 8009ef6:	a32e      	add	r3, pc, #184	; (adr r3, 8009fb0 <_strtod_l+0xbe0>)
 8009ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009efc:	4640      	mov	r0, r8
 8009efe:	4649      	mov	r1, r9
 8009f00:	f7f6 fe06 	bl	8000b10 <__aeabi_dcmple>
 8009f04:	b1a0      	cbz	r0, 8009f30 <_strtod_l+0xb60>
 8009f06:	4649      	mov	r1, r9
 8009f08:	4640      	mov	r0, r8
 8009f0a:	f7f6 fe5d 	bl	8000bc8 <__aeabi_d2uiz>
 8009f0e:	2801      	cmp	r0, #1
 8009f10:	bf38      	it	cc
 8009f12:	2001      	movcc	r0, #1
 8009f14:	f7f6 fb06 	bl	8000524 <__aeabi_ui2d>
 8009f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f1a:	4680      	mov	r8, r0
 8009f1c:	4689      	mov	r9, r1
 8009f1e:	bb23      	cbnz	r3, 8009f6a <_strtod_l+0xb9a>
 8009f20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f24:	9010      	str	r0, [sp, #64]	; 0x40
 8009f26:	9311      	str	r3, [sp, #68]	; 0x44
 8009f28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009f2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f34:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009f38:	1a9b      	subs	r3, r3, r2
 8009f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f40:	eeb0 0a48 	vmov.f32	s0, s16
 8009f44:	eef0 0a68 	vmov.f32	s1, s17
 8009f48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009f4c:	f001 ff4e 	bl	800bdec <__ulp>
 8009f50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009f54:	ec53 2b10 	vmov	r2, r3, d0
 8009f58:	f7f6 fb5e 	bl	8000618 <__aeabi_dmul>
 8009f5c:	ec53 2b18 	vmov	r2, r3, d8
 8009f60:	f7f6 f9a4 	bl	80002ac <__adddf3>
 8009f64:	4682      	mov	sl, r0
 8009f66:	468b      	mov	fp, r1
 8009f68:	e78d      	b.n	8009e86 <_strtod_l+0xab6>
 8009f6a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8009f6e:	e7db      	b.n	8009f28 <_strtod_l+0xb58>
 8009f70:	a311      	add	r3, pc, #68	; (adr r3, 8009fb8 <_strtod_l+0xbe8>)
 8009f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f76:	f7f6 fdc1 	bl	8000afc <__aeabi_dcmplt>
 8009f7a:	e7b2      	b.n	8009ee2 <_strtod_l+0xb12>
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8009f80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009f82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009f84:	6013      	str	r3, [r2, #0]
 8009f86:	f7ff ba6b 	b.w	8009460 <_strtod_l+0x90>
 8009f8a:	2a65      	cmp	r2, #101	; 0x65
 8009f8c:	f43f ab5f 	beq.w	800964e <_strtod_l+0x27e>
 8009f90:	2a45      	cmp	r2, #69	; 0x45
 8009f92:	f43f ab5c 	beq.w	800964e <_strtod_l+0x27e>
 8009f96:	2301      	movs	r3, #1
 8009f98:	f7ff bb94 	b.w	80096c4 <_strtod_l+0x2f4>
 8009f9c:	f3af 8000 	nop.w
 8009fa0:	94a03595 	.word	0x94a03595
 8009fa4:	3fdfffff 	.word	0x3fdfffff
 8009fa8:	35afe535 	.word	0x35afe535
 8009fac:	3fe00000 	.word	0x3fe00000
 8009fb0:	ffc00000 	.word	0xffc00000
 8009fb4:	41dfffff 	.word	0x41dfffff
 8009fb8:	94a03595 	.word	0x94a03595
 8009fbc:	3fcfffff 	.word	0x3fcfffff
 8009fc0:	3ff00000 	.word	0x3ff00000
 8009fc4:	7ff00000 	.word	0x7ff00000
 8009fc8:	7fe00000 	.word	0x7fe00000
 8009fcc:	7c9fffff 	.word	0x7c9fffff
 8009fd0:	3fe00000 	.word	0x3fe00000
 8009fd4:	bff00000 	.word	0xbff00000
 8009fd8:	7fefffff 	.word	0x7fefffff

08009fdc <_strtod_r>:
 8009fdc:	4b01      	ldr	r3, [pc, #4]	; (8009fe4 <_strtod_r+0x8>)
 8009fde:	f7ff b9f7 	b.w	80093d0 <_strtod_l>
 8009fe2:	bf00      	nop
 8009fe4:	20000260 	.word	0x20000260

08009fe8 <_strtol_l.constprop.0>:
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fee:	d001      	beq.n	8009ff4 <_strtol_l.constprop.0+0xc>
 8009ff0:	2b24      	cmp	r3, #36	; 0x24
 8009ff2:	d906      	bls.n	800a002 <_strtol_l.constprop.0+0x1a>
 8009ff4:	f7fe f8a2 	bl	800813c <__errno>
 8009ff8:	2316      	movs	r3, #22
 8009ffa:	6003      	str	r3, [r0, #0]
 8009ffc:	2000      	movs	r0, #0
 8009ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a002:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a0e8 <_strtol_l.constprop.0+0x100>
 800a006:	460d      	mov	r5, r1
 800a008:	462e      	mov	r6, r5
 800a00a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a00e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a012:	f017 0708 	ands.w	r7, r7, #8
 800a016:	d1f7      	bne.n	800a008 <_strtol_l.constprop.0+0x20>
 800a018:	2c2d      	cmp	r4, #45	; 0x2d
 800a01a:	d132      	bne.n	800a082 <_strtol_l.constprop.0+0x9a>
 800a01c:	782c      	ldrb	r4, [r5, #0]
 800a01e:	2701      	movs	r7, #1
 800a020:	1cb5      	adds	r5, r6, #2
 800a022:	2b00      	cmp	r3, #0
 800a024:	d05b      	beq.n	800a0de <_strtol_l.constprop.0+0xf6>
 800a026:	2b10      	cmp	r3, #16
 800a028:	d109      	bne.n	800a03e <_strtol_l.constprop.0+0x56>
 800a02a:	2c30      	cmp	r4, #48	; 0x30
 800a02c:	d107      	bne.n	800a03e <_strtol_l.constprop.0+0x56>
 800a02e:	782c      	ldrb	r4, [r5, #0]
 800a030:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a034:	2c58      	cmp	r4, #88	; 0x58
 800a036:	d14d      	bne.n	800a0d4 <_strtol_l.constprop.0+0xec>
 800a038:	786c      	ldrb	r4, [r5, #1]
 800a03a:	2310      	movs	r3, #16
 800a03c:	3502      	adds	r5, #2
 800a03e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a042:	f108 38ff 	add.w	r8, r8, #4294967295
 800a046:	f04f 0c00 	mov.w	ip, #0
 800a04a:	fbb8 f9f3 	udiv	r9, r8, r3
 800a04e:	4666      	mov	r6, ip
 800a050:	fb03 8a19 	mls	sl, r3, r9, r8
 800a054:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a058:	f1be 0f09 	cmp.w	lr, #9
 800a05c:	d816      	bhi.n	800a08c <_strtol_l.constprop.0+0xa4>
 800a05e:	4674      	mov	r4, lr
 800a060:	42a3      	cmp	r3, r4
 800a062:	dd24      	ble.n	800a0ae <_strtol_l.constprop.0+0xc6>
 800a064:	f1bc 0f00 	cmp.w	ip, #0
 800a068:	db1e      	blt.n	800a0a8 <_strtol_l.constprop.0+0xc0>
 800a06a:	45b1      	cmp	r9, r6
 800a06c:	d31c      	bcc.n	800a0a8 <_strtol_l.constprop.0+0xc0>
 800a06e:	d101      	bne.n	800a074 <_strtol_l.constprop.0+0x8c>
 800a070:	45a2      	cmp	sl, r4
 800a072:	db19      	blt.n	800a0a8 <_strtol_l.constprop.0+0xc0>
 800a074:	fb06 4603 	mla	r6, r6, r3, r4
 800a078:	f04f 0c01 	mov.w	ip, #1
 800a07c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a080:	e7e8      	b.n	800a054 <_strtol_l.constprop.0+0x6c>
 800a082:	2c2b      	cmp	r4, #43	; 0x2b
 800a084:	bf04      	itt	eq
 800a086:	782c      	ldrbeq	r4, [r5, #0]
 800a088:	1cb5      	addeq	r5, r6, #2
 800a08a:	e7ca      	b.n	800a022 <_strtol_l.constprop.0+0x3a>
 800a08c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a090:	f1be 0f19 	cmp.w	lr, #25
 800a094:	d801      	bhi.n	800a09a <_strtol_l.constprop.0+0xb2>
 800a096:	3c37      	subs	r4, #55	; 0x37
 800a098:	e7e2      	b.n	800a060 <_strtol_l.constprop.0+0x78>
 800a09a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a09e:	f1be 0f19 	cmp.w	lr, #25
 800a0a2:	d804      	bhi.n	800a0ae <_strtol_l.constprop.0+0xc6>
 800a0a4:	3c57      	subs	r4, #87	; 0x57
 800a0a6:	e7db      	b.n	800a060 <_strtol_l.constprop.0+0x78>
 800a0a8:	f04f 3cff 	mov.w	ip, #4294967295
 800a0ac:	e7e6      	b.n	800a07c <_strtol_l.constprop.0+0x94>
 800a0ae:	f1bc 0f00 	cmp.w	ip, #0
 800a0b2:	da05      	bge.n	800a0c0 <_strtol_l.constprop.0+0xd8>
 800a0b4:	2322      	movs	r3, #34	; 0x22
 800a0b6:	6003      	str	r3, [r0, #0]
 800a0b8:	4646      	mov	r6, r8
 800a0ba:	b942      	cbnz	r2, 800a0ce <_strtol_l.constprop.0+0xe6>
 800a0bc:	4630      	mov	r0, r6
 800a0be:	e79e      	b.n	8009ffe <_strtol_l.constprop.0+0x16>
 800a0c0:	b107      	cbz	r7, 800a0c4 <_strtol_l.constprop.0+0xdc>
 800a0c2:	4276      	negs	r6, r6
 800a0c4:	2a00      	cmp	r2, #0
 800a0c6:	d0f9      	beq.n	800a0bc <_strtol_l.constprop.0+0xd4>
 800a0c8:	f1bc 0f00 	cmp.w	ip, #0
 800a0cc:	d000      	beq.n	800a0d0 <_strtol_l.constprop.0+0xe8>
 800a0ce:	1e69      	subs	r1, r5, #1
 800a0d0:	6011      	str	r1, [r2, #0]
 800a0d2:	e7f3      	b.n	800a0bc <_strtol_l.constprop.0+0xd4>
 800a0d4:	2430      	movs	r4, #48	; 0x30
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d1b1      	bne.n	800a03e <_strtol_l.constprop.0+0x56>
 800a0da:	2308      	movs	r3, #8
 800a0dc:	e7af      	b.n	800a03e <_strtol_l.constprop.0+0x56>
 800a0de:	2c30      	cmp	r4, #48	; 0x30
 800a0e0:	d0a5      	beq.n	800a02e <_strtol_l.constprop.0+0x46>
 800a0e2:	230a      	movs	r3, #10
 800a0e4:	e7ab      	b.n	800a03e <_strtol_l.constprop.0+0x56>
 800a0e6:	bf00      	nop
 800a0e8:	0800ce01 	.word	0x0800ce01

0800a0ec <_strtol_r>:
 800a0ec:	f7ff bf7c 	b.w	8009fe8 <_strtol_l.constprop.0>

0800a0f0 <_write_r>:
 800a0f0:	b538      	push	{r3, r4, r5, lr}
 800a0f2:	4d07      	ldr	r5, [pc, #28]	; (800a110 <_write_r+0x20>)
 800a0f4:	4604      	mov	r4, r0
 800a0f6:	4608      	mov	r0, r1
 800a0f8:	4611      	mov	r1, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	602a      	str	r2, [r5, #0]
 800a0fe:	461a      	mov	r2, r3
 800a100:	f7f8 febd 	bl	8002e7e <_write>
 800a104:	1c43      	adds	r3, r0, #1
 800a106:	d102      	bne.n	800a10e <_write_r+0x1e>
 800a108:	682b      	ldr	r3, [r5, #0]
 800a10a:	b103      	cbz	r3, 800a10e <_write_r+0x1e>
 800a10c:	6023      	str	r3, [r4, #0]
 800a10e:	bd38      	pop	{r3, r4, r5, pc}
 800a110:	20004f74 	.word	0x20004f74

0800a114 <_close_r>:
 800a114:	b538      	push	{r3, r4, r5, lr}
 800a116:	4d06      	ldr	r5, [pc, #24]	; (800a130 <_close_r+0x1c>)
 800a118:	2300      	movs	r3, #0
 800a11a:	4604      	mov	r4, r0
 800a11c:	4608      	mov	r0, r1
 800a11e:	602b      	str	r3, [r5, #0]
 800a120:	f7f8 fec9 	bl	8002eb6 <_close>
 800a124:	1c43      	adds	r3, r0, #1
 800a126:	d102      	bne.n	800a12e <_close_r+0x1a>
 800a128:	682b      	ldr	r3, [r5, #0]
 800a12a:	b103      	cbz	r3, 800a12e <_close_r+0x1a>
 800a12c:	6023      	str	r3, [r4, #0]
 800a12e:	bd38      	pop	{r3, r4, r5, pc}
 800a130:	20004f74 	.word	0x20004f74

0800a134 <quorem>:
 800a134:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a138:	6903      	ldr	r3, [r0, #16]
 800a13a:	690c      	ldr	r4, [r1, #16]
 800a13c:	42a3      	cmp	r3, r4
 800a13e:	4607      	mov	r7, r0
 800a140:	f2c0 8081 	blt.w	800a246 <quorem+0x112>
 800a144:	3c01      	subs	r4, #1
 800a146:	f101 0814 	add.w	r8, r1, #20
 800a14a:	f100 0514 	add.w	r5, r0, #20
 800a14e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a152:	9301      	str	r3, [sp, #4]
 800a154:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a158:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a15c:	3301      	adds	r3, #1
 800a15e:	429a      	cmp	r2, r3
 800a160:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a164:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a168:	fbb2 f6f3 	udiv	r6, r2, r3
 800a16c:	d331      	bcc.n	800a1d2 <quorem+0x9e>
 800a16e:	f04f 0e00 	mov.w	lr, #0
 800a172:	4640      	mov	r0, r8
 800a174:	46ac      	mov	ip, r5
 800a176:	46f2      	mov	sl, lr
 800a178:	f850 2b04 	ldr.w	r2, [r0], #4
 800a17c:	b293      	uxth	r3, r2
 800a17e:	fb06 e303 	mla	r3, r6, r3, lr
 800a182:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a186:	b29b      	uxth	r3, r3
 800a188:	ebaa 0303 	sub.w	r3, sl, r3
 800a18c:	f8dc a000 	ldr.w	sl, [ip]
 800a190:	0c12      	lsrs	r2, r2, #16
 800a192:	fa13 f38a 	uxtah	r3, r3, sl
 800a196:	fb06 e202 	mla	r2, r6, r2, lr
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	9b00      	ldr	r3, [sp, #0]
 800a19e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a1a2:	b292      	uxth	r2, r2
 800a1a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a1a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a1ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800a1b0:	4581      	cmp	r9, r0
 800a1b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a1b6:	f84c 3b04 	str.w	r3, [ip], #4
 800a1ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a1be:	d2db      	bcs.n	800a178 <quorem+0x44>
 800a1c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a1c4:	b92b      	cbnz	r3, 800a1d2 <quorem+0x9e>
 800a1c6:	9b01      	ldr	r3, [sp, #4]
 800a1c8:	3b04      	subs	r3, #4
 800a1ca:	429d      	cmp	r5, r3
 800a1cc:	461a      	mov	r2, r3
 800a1ce:	d32e      	bcc.n	800a22e <quorem+0xfa>
 800a1d0:	613c      	str	r4, [r7, #16]
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	f001 fd64 	bl	800bca0 <__mcmp>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	db24      	blt.n	800a226 <quorem+0xf2>
 800a1dc:	3601      	adds	r6, #1
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f04f 0c00 	mov.w	ip, #0
 800a1e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a1e8:	f8d0 e000 	ldr.w	lr, [r0]
 800a1ec:	b293      	uxth	r3, r2
 800a1ee:	ebac 0303 	sub.w	r3, ip, r3
 800a1f2:	0c12      	lsrs	r2, r2, #16
 800a1f4:	fa13 f38e 	uxtah	r3, r3, lr
 800a1f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a1fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a200:	b29b      	uxth	r3, r3
 800a202:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a206:	45c1      	cmp	r9, r8
 800a208:	f840 3b04 	str.w	r3, [r0], #4
 800a20c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a210:	d2e8      	bcs.n	800a1e4 <quorem+0xb0>
 800a212:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a216:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a21a:	b922      	cbnz	r2, 800a226 <quorem+0xf2>
 800a21c:	3b04      	subs	r3, #4
 800a21e:	429d      	cmp	r5, r3
 800a220:	461a      	mov	r2, r3
 800a222:	d30a      	bcc.n	800a23a <quorem+0x106>
 800a224:	613c      	str	r4, [r7, #16]
 800a226:	4630      	mov	r0, r6
 800a228:	b003      	add	sp, #12
 800a22a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a22e:	6812      	ldr	r2, [r2, #0]
 800a230:	3b04      	subs	r3, #4
 800a232:	2a00      	cmp	r2, #0
 800a234:	d1cc      	bne.n	800a1d0 <quorem+0x9c>
 800a236:	3c01      	subs	r4, #1
 800a238:	e7c7      	b.n	800a1ca <quorem+0x96>
 800a23a:	6812      	ldr	r2, [r2, #0]
 800a23c:	3b04      	subs	r3, #4
 800a23e:	2a00      	cmp	r2, #0
 800a240:	d1f0      	bne.n	800a224 <quorem+0xf0>
 800a242:	3c01      	subs	r4, #1
 800a244:	e7eb      	b.n	800a21e <quorem+0xea>
 800a246:	2000      	movs	r0, #0
 800a248:	e7ee      	b.n	800a228 <quorem+0xf4>
 800a24a:	0000      	movs	r0, r0
 800a24c:	0000      	movs	r0, r0
	...

0800a250 <_dtoa_r>:
 800a250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a254:	ed2d 8b04 	vpush	{d8-d9}
 800a258:	ec57 6b10 	vmov	r6, r7, d0
 800a25c:	b093      	sub	sp, #76	; 0x4c
 800a25e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a260:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a264:	9106      	str	r1, [sp, #24]
 800a266:	ee10 aa10 	vmov	sl, s0
 800a26a:	4604      	mov	r4, r0
 800a26c:	9209      	str	r2, [sp, #36]	; 0x24
 800a26e:	930c      	str	r3, [sp, #48]	; 0x30
 800a270:	46bb      	mov	fp, r7
 800a272:	b975      	cbnz	r5, 800a292 <_dtoa_r+0x42>
 800a274:	2010      	movs	r0, #16
 800a276:	f001 fa21 	bl	800b6bc <malloc>
 800a27a:	4602      	mov	r2, r0
 800a27c:	6260      	str	r0, [r4, #36]	; 0x24
 800a27e:	b920      	cbnz	r0, 800a28a <_dtoa_r+0x3a>
 800a280:	4ba7      	ldr	r3, [pc, #668]	; (800a520 <_dtoa_r+0x2d0>)
 800a282:	21ea      	movs	r1, #234	; 0xea
 800a284:	48a7      	ldr	r0, [pc, #668]	; (800a524 <_dtoa_r+0x2d4>)
 800a286:	f002 f8fd 	bl	800c484 <__assert_func>
 800a28a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a28e:	6005      	str	r5, [r0, #0]
 800a290:	60c5      	str	r5, [r0, #12]
 800a292:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a294:	6819      	ldr	r1, [r3, #0]
 800a296:	b151      	cbz	r1, 800a2ae <_dtoa_r+0x5e>
 800a298:	685a      	ldr	r2, [r3, #4]
 800a29a:	604a      	str	r2, [r1, #4]
 800a29c:	2301      	movs	r3, #1
 800a29e:	4093      	lsls	r3, r2
 800a2a0:	608b      	str	r3, [r1, #8]
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f001 fa70 	bl	800b788 <_Bfree>
 800a2a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a2aa:	2200      	movs	r2, #0
 800a2ac:	601a      	str	r2, [r3, #0]
 800a2ae:	1e3b      	subs	r3, r7, #0
 800a2b0:	bfaa      	itet	ge
 800a2b2:	2300      	movge	r3, #0
 800a2b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a2b8:	f8c8 3000 	strge.w	r3, [r8]
 800a2bc:	4b9a      	ldr	r3, [pc, #616]	; (800a528 <_dtoa_r+0x2d8>)
 800a2be:	bfbc      	itt	lt
 800a2c0:	2201      	movlt	r2, #1
 800a2c2:	f8c8 2000 	strlt.w	r2, [r8]
 800a2c6:	ea33 030b 	bics.w	r3, r3, fp
 800a2ca:	d11b      	bne.n	800a304 <_dtoa_r+0xb4>
 800a2cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a2ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800a2d2:	6013      	str	r3, [r2, #0]
 800a2d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2d8:	4333      	orrs	r3, r6
 800a2da:	f000 8592 	beq.w	800ae02 <_dtoa_r+0xbb2>
 800a2de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a2e0:	b963      	cbnz	r3, 800a2fc <_dtoa_r+0xac>
 800a2e2:	4b92      	ldr	r3, [pc, #584]	; (800a52c <_dtoa_r+0x2dc>)
 800a2e4:	e022      	b.n	800a32c <_dtoa_r+0xdc>
 800a2e6:	4b92      	ldr	r3, [pc, #584]	; (800a530 <_dtoa_r+0x2e0>)
 800a2e8:	9301      	str	r3, [sp, #4]
 800a2ea:	3308      	adds	r3, #8
 800a2ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a2ee:	6013      	str	r3, [r2, #0]
 800a2f0:	9801      	ldr	r0, [sp, #4]
 800a2f2:	b013      	add	sp, #76	; 0x4c
 800a2f4:	ecbd 8b04 	vpop	{d8-d9}
 800a2f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2fc:	4b8b      	ldr	r3, [pc, #556]	; (800a52c <_dtoa_r+0x2dc>)
 800a2fe:	9301      	str	r3, [sp, #4]
 800a300:	3303      	adds	r3, #3
 800a302:	e7f3      	b.n	800a2ec <_dtoa_r+0x9c>
 800a304:	2200      	movs	r2, #0
 800a306:	2300      	movs	r3, #0
 800a308:	4650      	mov	r0, sl
 800a30a:	4659      	mov	r1, fp
 800a30c:	f7f6 fbec 	bl	8000ae8 <__aeabi_dcmpeq>
 800a310:	ec4b ab19 	vmov	d9, sl, fp
 800a314:	4680      	mov	r8, r0
 800a316:	b158      	cbz	r0, 800a330 <_dtoa_r+0xe0>
 800a318:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a31a:	2301      	movs	r3, #1
 800a31c:	6013      	str	r3, [r2, #0]
 800a31e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a320:	2b00      	cmp	r3, #0
 800a322:	f000 856b 	beq.w	800adfc <_dtoa_r+0xbac>
 800a326:	4883      	ldr	r0, [pc, #524]	; (800a534 <_dtoa_r+0x2e4>)
 800a328:	6018      	str	r0, [r3, #0]
 800a32a:	1e43      	subs	r3, r0, #1
 800a32c:	9301      	str	r3, [sp, #4]
 800a32e:	e7df      	b.n	800a2f0 <_dtoa_r+0xa0>
 800a330:	ec4b ab10 	vmov	d0, sl, fp
 800a334:	aa10      	add	r2, sp, #64	; 0x40
 800a336:	a911      	add	r1, sp, #68	; 0x44
 800a338:	4620      	mov	r0, r4
 800a33a:	f001 fdd3 	bl	800bee4 <__d2b>
 800a33e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a342:	ee08 0a10 	vmov	s16, r0
 800a346:	2d00      	cmp	r5, #0
 800a348:	f000 8084 	beq.w	800a454 <_dtoa_r+0x204>
 800a34c:	ee19 3a90 	vmov	r3, s19
 800a350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a354:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a358:	4656      	mov	r6, sl
 800a35a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a35e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a362:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a366:	4b74      	ldr	r3, [pc, #464]	; (800a538 <_dtoa_r+0x2e8>)
 800a368:	2200      	movs	r2, #0
 800a36a:	4630      	mov	r0, r6
 800a36c:	4639      	mov	r1, r7
 800a36e:	f7f5 ff9b 	bl	80002a8 <__aeabi_dsub>
 800a372:	a365      	add	r3, pc, #404	; (adr r3, 800a508 <_dtoa_r+0x2b8>)
 800a374:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a378:	f7f6 f94e 	bl	8000618 <__aeabi_dmul>
 800a37c:	a364      	add	r3, pc, #400	; (adr r3, 800a510 <_dtoa_r+0x2c0>)
 800a37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a382:	f7f5 ff93 	bl	80002ac <__adddf3>
 800a386:	4606      	mov	r6, r0
 800a388:	4628      	mov	r0, r5
 800a38a:	460f      	mov	r7, r1
 800a38c:	f7f6 f8da 	bl	8000544 <__aeabi_i2d>
 800a390:	a361      	add	r3, pc, #388	; (adr r3, 800a518 <_dtoa_r+0x2c8>)
 800a392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a396:	f7f6 f93f 	bl	8000618 <__aeabi_dmul>
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	4630      	mov	r0, r6
 800a3a0:	4639      	mov	r1, r7
 800a3a2:	f7f5 ff83 	bl	80002ac <__adddf3>
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	460f      	mov	r7, r1
 800a3aa:	f7f6 fbe5 	bl	8000b78 <__aeabi_d2iz>
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	9000      	str	r0, [sp, #0]
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	4639      	mov	r1, r7
 800a3b8:	f7f6 fba0 	bl	8000afc <__aeabi_dcmplt>
 800a3bc:	b150      	cbz	r0, 800a3d4 <_dtoa_r+0x184>
 800a3be:	9800      	ldr	r0, [sp, #0]
 800a3c0:	f7f6 f8c0 	bl	8000544 <__aeabi_i2d>
 800a3c4:	4632      	mov	r2, r6
 800a3c6:	463b      	mov	r3, r7
 800a3c8:	f7f6 fb8e 	bl	8000ae8 <__aeabi_dcmpeq>
 800a3cc:	b910      	cbnz	r0, 800a3d4 <_dtoa_r+0x184>
 800a3ce:	9b00      	ldr	r3, [sp, #0]
 800a3d0:	3b01      	subs	r3, #1
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	9b00      	ldr	r3, [sp, #0]
 800a3d6:	2b16      	cmp	r3, #22
 800a3d8:	d85a      	bhi.n	800a490 <_dtoa_r+0x240>
 800a3da:	9a00      	ldr	r2, [sp, #0]
 800a3dc:	4b57      	ldr	r3, [pc, #348]	; (800a53c <_dtoa_r+0x2ec>)
 800a3de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3e6:	ec51 0b19 	vmov	r0, r1, d9
 800a3ea:	f7f6 fb87 	bl	8000afc <__aeabi_dcmplt>
 800a3ee:	2800      	cmp	r0, #0
 800a3f0:	d050      	beq.n	800a494 <_dtoa_r+0x244>
 800a3f2:	9b00      	ldr	r3, [sp, #0]
 800a3f4:	3b01      	subs	r3, #1
 800a3f6:	9300      	str	r3, [sp, #0]
 800a3f8:	2300      	movs	r3, #0
 800a3fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a3fe:	1b5d      	subs	r5, r3, r5
 800a400:	1e6b      	subs	r3, r5, #1
 800a402:	9305      	str	r3, [sp, #20]
 800a404:	bf45      	ittet	mi
 800a406:	f1c5 0301 	rsbmi	r3, r5, #1
 800a40a:	9304      	strmi	r3, [sp, #16]
 800a40c:	2300      	movpl	r3, #0
 800a40e:	2300      	movmi	r3, #0
 800a410:	bf4c      	ite	mi
 800a412:	9305      	strmi	r3, [sp, #20]
 800a414:	9304      	strpl	r3, [sp, #16]
 800a416:	9b00      	ldr	r3, [sp, #0]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	db3d      	blt.n	800a498 <_dtoa_r+0x248>
 800a41c:	9b05      	ldr	r3, [sp, #20]
 800a41e:	9a00      	ldr	r2, [sp, #0]
 800a420:	920a      	str	r2, [sp, #40]	; 0x28
 800a422:	4413      	add	r3, r2
 800a424:	9305      	str	r3, [sp, #20]
 800a426:	2300      	movs	r3, #0
 800a428:	9307      	str	r3, [sp, #28]
 800a42a:	9b06      	ldr	r3, [sp, #24]
 800a42c:	2b09      	cmp	r3, #9
 800a42e:	f200 8089 	bhi.w	800a544 <_dtoa_r+0x2f4>
 800a432:	2b05      	cmp	r3, #5
 800a434:	bfc4      	itt	gt
 800a436:	3b04      	subgt	r3, #4
 800a438:	9306      	strgt	r3, [sp, #24]
 800a43a:	9b06      	ldr	r3, [sp, #24]
 800a43c:	f1a3 0302 	sub.w	r3, r3, #2
 800a440:	bfcc      	ite	gt
 800a442:	2500      	movgt	r5, #0
 800a444:	2501      	movle	r5, #1
 800a446:	2b03      	cmp	r3, #3
 800a448:	f200 8087 	bhi.w	800a55a <_dtoa_r+0x30a>
 800a44c:	e8df f003 	tbb	[pc, r3]
 800a450:	59383a2d 	.word	0x59383a2d
 800a454:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a458:	441d      	add	r5, r3
 800a45a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a45e:	2b20      	cmp	r3, #32
 800a460:	bfc1      	itttt	gt
 800a462:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a466:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a46a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a46e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a472:	bfda      	itte	le
 800a474:	f1c3 0320 	rsble	r3, r3, #32
 800a478:	fa06 f003 	lslle.w	r0, r6, r3
 800a47c:	4318      	orrgt	r0, r3
 800a47e:	f7f6 f851 	bl	8000524 <__aeabi_ui2d>
 800a482:	2301      	movs	r3, #1
 800a484:	4606      	mov	r6, r0
 800a486:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a48a:	3d01      	subs	r5, #1
 800a48c:	930e      	str	r3, [sp, #56]	; 0x38
 800a48e:	e76a      	b.n	800a366 <_dtoa_r+0x116>
 800a490:	2301      	movs	r3, #1
 800a492:	e7b2      	b.n	800a3fa <_dtoa_r+0x1aa>
 800a494:	900b      	str	r0, [sp, #44]	; 0x2c
 800a496:	e7b1      	b.n	800a3fc <_dtoa_r+0x1ac>
 800a498:	9b04      	ldr	r3, [sp, #16]
 800a49a:	9a00      	ldr	r2, [sp, #0]
 800a49c:	1a9b      	subs	r3, r3, r2
 800a49e:	9304      	str	r3, [sp, #16]
 800a4a0:	4253      	negs	r3, r2
 800a4a2:	9307      	str	r3, [sp, #28]
 800a4a4:	2300      	movs	r3, #0
 800a4a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a4a8:	e7bf      	b.n	800a42a <_dtoa_r+0x1da>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	9308      	str	r3, [sp, #32]
 800a4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	dc55      	bgt.n	800a560 <_dtoa_r+0x310>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a4ba:	461a      	mov	r2, r3
 800a4bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a4be:	e00c      	b.n	800a4da <_dtoa_r+0x28a>
 800a4c0:	2301      	movs	r3, #1
 800a4c2:	e7f3      	b.n	800a4ac <_dtoa_r+0x25c>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a4c8:	9308      	str	r3, [sp, #32]
 800a4ca:	9b00      	ldr	r3, [sp, #0]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	9302      	str	r3, [sp, #8]
 800a4d0:	3301      	adds	r3, #1
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	9303      	str	r3, [sp, #12]
 800a4d6:	bfb8      	it	lt
 800a4d8:	2301      	movlt	r3, #1
 800a4da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a4dc:	2200      	movs	r2, #0
 800a4de:	6042      	str	r2, [r0, #4]
 800a4e0:	2204      	movs	r2, #4
 800a4e2:	f102 0614 	add.w	r6, r2, #20
 800a4e6:	429e      	cmp	r6, r3
 800a4e8:	6841      	ldr	r1, [r0, #4]
 800a4ea:	d93d      	bls.n	800a568 <_dtoa_r+0x318>
 800a4ec:	4620      	mov	r0, r4
 800a4ee:	f001 f90b 	bl	800b708 <_Balloc>
 800a4f2:	9001      	str	r0, [sp, #4]
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d13b      	bne.n	800a570 <_dtoa_r+0x320>
 800a4f8:	4b11      	ldr	r3, [pc, #68]	; (800a540 <_dtoa_r+0x2f0>)
 800a4fa:	4602      	mov	r2, r0
 800a4fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a500:	e6c0      	b.n	800a284 <_dtoa_r+0x34>
 800a502:	2301      	movs	r3, #1
 800a504:	e7df      	b.n	800a4c6 <_dtoa_r+0x276>
 800a506:	bf00      	nop
 800a508:	636f4361 	.word	0x636f4361
 800a50c:	3fd287a7 	.word	0x3fd287a7
 800a510:	8b60c8b3 	.word	0x8b60c8b3
 800a514:	3fc68a28 	.word	0x3fc68a28
 800a518:	509f79fb 	.word	0x509f79fb
 800a51c:	3fd34413 	.word	0x3fd34413
 800a520:	0800cf0e 	.word	0x0800cf0e
 800a524:	0800cf25 	.word	0x0800cf25
 800a528:	7ff00000 	.word	0x7ff00000
 800a52c:	0800cf0a 	.word	0x0800cf0a
 800a530:	0800cf01 	.word	0x0800cf01
 800a534:	0800cd81 	.word	0x0800cd81
 800a538:	3ff80000 	.word	0x3ff80000
 800a53c:	0800d090 	.word	0x0800d090
 800a540:	0800cf80 	.word	0x0800cf80
 800a544:	2501      	movs	r5, #1
 800a546:	2300      	movs	r3, #0
 800a548:	9306      	str	r3, [sp, #24]
 800a54a:	9508      	str	r5, [sp, #32]
 800a54c:	f04f 33ff 	mov.w	r3, #4294967295
 800a550:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a554:	2200      	movs	r2, #0
 800a556:	2312      	movs	r3, #18
 800a558:	e7b0      	b.n	800a4bc <_dtoa_r+0x26c>
 800a55a:	2301      	movs	r3, #1
 800a55c:	9308      	str	r3, [sp, #32]
 800a55e:	e7f5      	b.n	800a54c <_dtoa_r+0x2fc>
 800a560:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a562:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a566:	e7b8      	b.n	800a4da <_dtoa_r+0x28a>
 800a568:	3101      	adds	r1, #1
 800a56a:	6041      	str	r1, [r0, #4]
 800a56c:	0052      	lsls	r2, r2, #1
 800a56e:	e7b8      	b.n	800a4e2 <_dtoa_r+0x292>
 800a570:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a572:	9a01      	ldr	r2, [sp, #4]
 800a574:	601a      	str	r2, [r3, #0]
 800a576:	9b03      	ldr	r3, [sp, #12]
 800a578:	2b0e      	cmp	r3, #14
 800a57a:	f200 809d 	bhi.w	800a6b8 <_dtoa_r+0x468>
 800a57e:	2d00      	cmp	r5, #0
 800a580:	f000 809a 	beq.w	800a6b8 <_dtoa_r+0x468>
 800a584:	9b00      	ldr	r3, [sp, #0]
 800a586:	2b00      	cmp	r3, #0
 800a588:	dd32      	ble.n	800a5f0 <_dtoa_r+0x3a0>
 800a58a:	4ab7      	ldr	r2, [pc, #732]	; (800a868 <_dtoa_r+0x618>)
 800a58c:	f003 030f 	and.w	r3, r3, #15
 800a590:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a594:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a598:	9b00      	ldr	r3, [sp, #0]
 800a59a:	05d8      	lsls	r0, r3, #23
 800a59c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a5a0:	d516      	bpl.n	800a5d0 <_dtoa_r+0x380>
 800a5a2:	4bb2      	ldr	r3, [pc, #712]	; (800a86c <_dtoa_r+0x61c>)
 800a5a4:	ec51 0b19 	vmov	r0, r1, d9
 800a5a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a5ac:	f7f6 f95e 	bl	800086c <__aeabi_ddiv>
 800a5b0:	f007 070f 	and.w	r7, r7, #15
 800a5b4:	4682      	mov	sl, r0
 800a5b6:	468b      	mov	fp, r1
 800a5b8:	2503      	movs	r5, #3
 800a5ba:	4eac      	ldr	r6, [pc, #688]	; (800a86c <_dtoa_r+0x61c>)
 800a5bc:	b957      	cbnz	r7, 800a5d4 <_dtoa_r+0x384>
 800a5be:	4642      	mov	r2, r8
 800a5c0:	464b      	mov	r3, r9
 800a5c2:	4650      	mov	r0, sl
 800a5c4:	4659      	mov	r1, fp
 800a5c6:	f7f6 f951 	bl	800086c <__aeabi_ddiv>
 800a5ca:	4682      	mov	sl, r0
 800a5cc:	468b      	mov	fp, r1
 800a5ce:	e028      	b.n	800a622 <_dtoa_r+0x3d2>
 800a5d0:	2502      	movs	r5, #2
 800a5d2:	e7f2      	b.n	800a5ba <_dtoa_r+0x36a>
 800a5d4:	07f9      	lsls	r1, r7, #31
 800a5d6:	d508      	bpl.n	800a5ea <_dtoa_r+0x39a>
 800a5d8:	4640      	mov	r0, r8
 800a5da:	4649      	mov	r1, r9
 800a5dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5e0:	f7f6 f81a 	bl	8000618 <__aeabi_dmul>
 800a5e4:	3501      	adds	r5, #1
 800a5e6:	4680      	mov	r8, r0
 800a5e8:	4689      	mov	r9, r1
 800a5ea:	107f      	asrs	r7, r7, #1
 800a5ec:	3608      	adds	r6, #8
 800a5ee:	e7e5      	b.n	800a5bc <_dtoa_r+0x36c>
 800a5f0:	f000 809b 	beq.w	800a72a <_dtoa_r+0x4da>
 800a5f4:	9b00      	ldr	r3, [sp, #0]
 800a5f6:	4f9d      	ldr	r7, [pc, #628]	; (800a86c <_dtoa_r+0x61c>)
 800a5f8:	425e      	negs	r6, r3
 800a5fa:	4b9b      	ldr	r3, [pc, #620]	; (800a868 <_dtoa_r+0x618>)
 800a5fc:	f006 020f 	and.w	r2, r6, #15
 800a600:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a608:	ec51 0b19 	vmov	r0, r1, d9
 800a60c:	f7f6 f804 	bl	8000618 <__aeabi_dmul>
 800a610:	1136      	asrs	r6, r6, #4
 800a612:	4682      	mov	sl, r0
 800a614:	468b      	mov	fp, r1
 800a616:	2300      	movs	r3, #0
 800a618:	2502      	movs	r5, #2
 800a61a:	2e00      	cmp	r6, #0
 800a61c:	d17a      	bne.n	800a714 <_dtoa_r+0x4c4>
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d1d3      	bne.n	800a5ca <_dtoa_r+0x37a>
 800a622:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a624:	2b00      	cmp	r3, #0
 800a626:	f000 8082 	beq.w	800a72e <_dtoa_r+0x4de>
 800a62a:	4b91      	ldr	r3, [pc, #580]	; (800a870 <_dtoa_r+0x620>)
 800a62c:	2200      	movs	r2, #0
 800a62e:	4650      	mov	r0, sl
 800a630:	4659      	mov	r1, fp
 800a632:	f7f6 fa63 	bl	8000afc <__aeabi_dcmplt>
 800a636:	2800      	cmp	r0, #0
 800a638:	d079      	beq.n	800a72e <_dtoa_r+0x4de>
 800a63a:	9b03      	ldr	r3, [sp, #12]
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d076      	beq.n	800a72e <_dtoa_r+0x4de>
 800a640:	9b02      	ldr	r3, [sp, #8]
 800a642:	2b00      	cmp	r3, #0
 800a644:	dd36      	ble.n	800a6b4 <_dtoa_r+0x464>
 800a646:	9b00      	ldr	r3, [sp, #0]
 800a648:	4650      	mov	r0, sl
 800a64a:	4659      	mov	r1, fp
 800a64c:	1e5f      	subs	r7, r3, #1
 800a64e:	2200      	movs	r2, #0
 800a650:	4b88      	ldr	r3, [pc, #544]	; (800a874 <_dtoa_r+0x624>)
 800a652:	f7f5 ffe1 	bl	8000618 <__aeabi_dmul>
 800a656:	9e02      	ldr	r6, [sp, #8]
 800a658:	4682      	mov	sl, r0
 800a65a:	468b      	mov	fp, r1
 800a65c:	3501      	adds	r5, #1
 800a65e:	4628      	mov	r0, r5
 800a660:	f7f5 ff70 	bl	8000544 <__aeabi_i2d>
 800a664:	4652      	mov	r2, sl
 800a666:	465b      	mov	r3, fp
 800a668:	f7f5 ffd6 	bl	8000618 <__aeabi_dmul>
 800a66c:	4b82      	ldr	r3, [pc, #520]	; (800a878 <_dtoa_r+0x628>)
 800a66e:	2200      	movs	r2, #0
 800a670:	f7f5 fe1c 	bl	80002ac <__adddf3>
 800a674:	46d0      	mov	r8, sl
 800a676:	46d9      	mov	r9, fp
 800a678:	4682      	mov	sl, r0
 800a67a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a67e:	2e00      	cmp	r6, #0
 800a680:	d158      	bne.n	800a734 <_dtoa_r+0x4e4>
 800a682:	4b7e      	ldr	r3, [pc, #504]	; (800a87c <_dtoa_r+0x62c>)
 800a684:	2200      	movs	r2, #0
 800a686:	4640      	mov	r0, r8
 800a688:	4649      	mov	r1, r9
 800a68a:	f7f5 fe0d 	bl	80002a8 <__aeabi_dsub>
 800a68e:	4652      	mov	r2, sl
 800a690:	465b      	mov	r3, fp
 800a692:	4680      	mov	r8, r0
 800a694:	4689      	mov	r9, r1
 800a696:	f7f6 fa4f 	bl	8000b38 <__aeabi_dcmpgt>
 800a69a:	2800      	cmp	r0, #0
 800a69c:	f040 8295 	bne.w	800abca <_dtoa_r+0x97a>
 800a6a0:	4652      	mov	r2, sl
 800a6a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a6a6:	4640      	mov	r0, r8
 800a6a8:	4649      	mov	r1, r9
 800a6aa:	f7f6 fa27 	bl	8000afc <__aeabi_dcmplt>
 800a6ae:	2800      	cmp	r0, #0
 800a6b0:	f040 8289 	bne.w	800abc6 <_dtoa_r+0x976>
 800a6b4:	ec5b ab19 	vmov	sl, fp, d9
 800a6b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f2c0 8148 	blt.w	800a950 <_dtoa_r+0x700>
 800a6c0:	9a00      	ldr	r2, [sp, #0]
 800a6c2:	2a0e      	cmp	r2, #14
 800a6c4:	f300 8144 	bgt.w	800a950 <_dtoa_r+0x700>
 800a6c8:	4b67      	ldr	r3, [pc, #412]	; (800a868 <_dtoa_r+0x618>)
 800a6ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	f280 80d5 	bge.w	800a884 <_dtoa_r+0x634>
 800a6da:	9b03      	ldr	r3, [sp, #12]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	f300 80d1 	bgt.w	800a884 <_dtoa_r+0x634>
 800a6e2:	f040 826f 	bne.w	800abc4 <_dtoa_r+0x974>
 800a6e6:	4b65      	ldr	r3, [pc, #404]	; (800a87c <_dtoa_r+0x62c>)
 800a6e8:	2200      	movs	r2, #0
 800a6ea:	4640      	mov	r0, r8
 800a6ec:	4649      	mov	r1, r9
 800a6ee:	f7f5 ff93 	bl	8000618 <__aeabi_dmul>
 800a6f2:	4652      	mov	r2, sl
 800a6f4:	465b      	mov	r3, fp
 800a6f6:	f7f6 fa15 	bl	8000b24 <__aeabi_dcmpge>
 800a6fa:	9e03      	ldr	r6, [sp, #12]
 800a6fc:	4637      	mov	r7, r6
 800a6fe:	2800      	cmp	r0, #0
 800a700:	f040 8245 	bne.w	800ab8e <_dtoa_r+0x93e>
 800a704:	9d01      	ldr	r5, [sp, #4]
 800a706:	2331      	movs	r3, #49	; 0x31
 800a708:	f805 3b01 	strb.w	r3, [r5], #1
 800a70c:	9b00      	ldr	r3, [sp, #0]
 800a70e:	3301      	adds	r3, #1
 800a710:	9300      	str	r3, [sp, #0]
 800a712:	e240      	b.n	800ab96 <_dtoa_r+0x946>
 800a714:	07f2      	lsls	r2, r6, #31
 800a716:	d505      	bpl.n	800a724 <_dtoa_r+0x4d4>
 800a718:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a71c:	f7f5 ff7c 	bl	8000618 <__aeabi_dmul>
 800a720:	3501      	adds	r5, #1
 800a722:	2301      	movs	r3, #1
 800a724:	1076      	asrs	r6, r6, #1
 800a726:	3708      	adds	r7, #8
 800a728:	e777      	b.n	800a61a <_dtoa_r+0x3ca>
 800a72a:	2502      	movs	r5, #2
 800a72c:	e779      	b.n	800a622 <_dtoa_r+0x3d2>
 800a72e:	9f00      	ldr	r7, [sp, #0]
 800a730:	9e03      	ldr	r6, [sp, #12]
 800a732:	e794      	b.n	800a65e <_dtoa_r+0x40e>
 800a734:	9901      	ldr	r1, [sp, #4]
 800a736:	4b4c      	ldr	r3, [pc, #304]	; (800a868 <_dtoa_r+0x618>)
 800a738:	4431      	add	r1, r6
 800a73a:	910d      	str	r1, [sp, #52]	; 0x34
 800a73c:	9908      	ldr	r1, [sp, #32]
 800a73e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a742:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a746:	2900      	cmp	r1, #0
 800a748:	d043      	beq.n	800a7d2 <_dtoa_r+0x582>
 800a74a:	494d      	ldr	r1, [pc, #308]	; (800a880 <_dtoa_r+0x630>)
 800a74c:	2000      	movs	r0, #0
 800a74e:	f7f6 f88d 	bl	800086c <__aeabi_ddiv>
 800a752:	4652      	mov	r2, sl
 800a754:	465b      	mov	r3, fp
 800a756:	f7f5 fda7 	bl	80002a8 <__aeabi_dsub>
 800a75a:	9d01      	ldr	r5, [sp, #4]
 800a75c:	4682      	mov	sl, r0
 800a75e:	468b      	mov	fp, r1
 800a760:	4649      	mov	r1, r9
 800a762:	4640      	mov	r0, r8
 800a764:	f7f6 fa08 	bl	8000b78 <__aeabi_d2iz>
 800a768:	4606      	mov	r6, r0
 800a76a:	f7f5 feeb 	bl	8000544 <__aeabi_i2d>
 800a76e:	4602      	mov	r2, r0
 800a770:	460b      	mov	r3, r1
 800a772:	4640      	mov	r0, r8
 800a774:	4649      	mov	r1, r9
 800a776:	f7f5 fd97 	bl	80002a8 <__aeabi_dsub>
 800a77a:	3630      	adds	r6, #48	; 0x30
 800a77c:	f805 6b01 	strb.w	r6, [r5], #1
 800a780:	4652      	mov	r2, sl
 800a782:	465b      	mov	r3, fp
 800a784:	4680      	mov	r8, r0
 800a786:	4689      	mov	r9, r1
 800a788:	f7f6 f9b8 	bl	8000afc <__aeabi_dcmplt>
 800a78c:	2800      	cmp	r0, #0
 800a78e:	d163      	bne.n	800a858 <_dtoa_r+0x608>
 800a790:	4642      	mov	r2, r8
 800a792:	464b      	mov	r3, r9
 800a794:	4936      	ldr	r1, [pc, #216]	; (800a870 <_dtoa_r+0x620>)
 800a796:	2000      	movs	r0, #0
 800a798:	f7f5 fd86 	bl	80002a8 <__aeabi_dsub>
 800a79c:	4652      	mov	r2, sl
 800a79e:	465b      	mov	r3, fp
 800a7a0:	f7f6 f9ac 	bl	8000afc <__aeabi_dcmplt>
 800a7a4:	2800      	cmp	r0, #0
 800a7a6:	f040 80b5 	bne.w	800a914 <_dtoa_r+0x6c4>
 800a7aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7ac:	429d      	cmp	r5, r3
 800a7ae:	d081      	beq.n	800a6b4 <_dtoa_r+0x464>
 800a7b0:	4b30      	ldr	r3, [pc, #192]	; (800a874 <_dtoa_r+0x624>)
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	4650      	mov	r0, sl
 800a7b6:	4659      	mov	r1, fp
 800a7b8:	f7f5 ff2e 	bl	8000618 <__aeabi_dmul>
 800a7bc:	4b2d      	ldr	r3, [pc, #180]	; (800a874 <_dtoa_r+0x624>)
 800a7be:	4682      	mov	sl, r0
 800a7c0:	468b      	mov	fp, r1
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	4649      	mov	r1, r9
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	f7f5 ff26 	bl	8000618 <__aeabi_dmul>
 800a7cc:	4680      	mov	r8, r0
 800a7ce:	4689      	mov	r9, r1
 800a7d0:	e7c6      	b.n	800a760 <_dtoa_r+0x510>
 800a7d2:	4650      	mov	r0, sl
 800a7d4:	4659      	mov	r1, fp
 800a7d6:	f7f5 ff1f 	bl	8000618 <__aeabi_dmul>
 800a7da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7dc:	9d01      	ldr	r5, [sp, #4]
 800a7de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a7e0:	4682      	mov	sl, r0
 800a7e2:	468b      	mov	fp, r1
 800a7e4:	4649      	mov	r1, r9
 800a7e6:	4640      	mov	r0, r8
 800a7e8:	f7f6 f9c6 	bl	8000b78 <__aeabi_d2iz>
 800a7ec:	4606      	mov	r6, r0
 800a7ee:	f7f5 fea9 	bl	8000544 <__aeabi_i2d>
 800a7f2:	3630      	adds	r6, #48	; 0x30
 800a7f4:	4602      	mov	r2, r0
 800a7f6:	460b      	mov	r3, r1
 800a7f8:	4640      	mov	r0, r8
 800a7fa:	4649      	mov	r1, r9
 800a7fc:	f7f5 fd54 	bl	80002a8 <__aeabi_dsub>
 800a800:	f805 6b01 	strb.w	r6, [r5], #1
 800a804:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a806:	429d      	cmp	r5, r3
 800a808:	4680      	mov	r8, r0
 800a80a:	4689      	mov	r9, r1
 800a80c:	f04f 0200 	mov.w	r2, #0
 800a810:	d124      	bne.n	800a85c <_dtoa_r+0x60c>
 800a812:	4b1b      	ldr	r3, [pc, #108]	; (800a880 <_dtoa_r+0x630>)
 800a814:	4650      	mov	r0, sl
 800a816:	4659      	mov	r1, fp
 800a818:	f7f5 fd48 	bl	80002ac <__adddf3>
 800a81c:	4602      	mov	r2, r0
 800a81e:	460b      	mov	r3, r1
 800a820:	4640      	mov	r0, r8
 800a822:	4649      	mov	r1, r9
 800a824:	f7f6 f988 	bl	8000b38 <__aeabi_dcmpgt>
 800a828:	2800      	cmp	r0, #0
 800a82a:	d173      	bne.n	800a914 <_dtoa_r+0x6c4>
 800a82c:	4652      	mov	r2, sl
 800a82e:	465b      	mov	r3, fp
 800a830:	4913      	ldr	r1, [pc, #76]	; (800a880 <_dtoa_r+0x630>)
 800a832:	2000      	movs	r0, #0
 800a834:	f7f5 fd38 	bl	80002a8 <__aeabi_dsub>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	4640      	mov	r0, r8
 800a83e:	4649      	mov	r1, r9
 800a840:	f7f6 f95c 	bl	8000afc <__aeabi_dcmplt>
 800a844:	2800      	cmp	r0, #0
 800a846:	f43f af35 	beq.w	800a6b4 <_dtoa_r+0x464>
 800a84a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a84c:	1e6b      	subs	r3, r5, #1
 800a84e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a850:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a854:	2b30      	cmp	r3, #48	; 0x30
 800a856:	d0f8      	beq.n	800a84a <_dtoa_r+0x5fa>
 800a858:	9700      	str	r7, [sp, #0]
 800a85a:	e049      	b.n	800a8f0 <_dtoa_r+0x6a0>
 800a85c:	4b05      	ldr	r3, [pc, #20]	; (800a874 <_dtoa_r+0x624>)
 800a85e:	f7f5 fedb 	bl	8000618 <__aeabi_dmul>
 800a862:	4680      	mov	r8, r0
 800a864:	4689      	mov	r9, r1
 800a866:	e7bd      	b.n	800a7e4 <_dtoa_r+0x594>
 800a868:	0800d090 	.word	0x0800d090
 800a86c:	0800d068 	.word	0x0800d068
 800a870:	3ff00000 	.word	0x3ff00000
 800a874:	40240000 	.word	0x40240000
 800a878:	401c0000 	.word	0x401c0000
 800a87c:	40140000 	.word	0x40140000
 800a880:	3fe00000 	.word	0x3fe00000
 800a884:	9d01      	ldr	r5, [sp, #4]
 800a886:	4656      	mov	r6, sl
 800a888:	465f      	mov	r7, fp
 800a88a:	4642      	mov	r2, r8
 800a88c:	464b      	mov	r3, r9
 800a88e:	4630      	mov	r0, r6
 800a890:	4639      	mov	r1, r7
 800a892:	f7f5 ffeb 	bl	800086c <__aeabi_ddiv>
 800a896:	f7f6 f96f 	bl	8000b78 <__aeabi_d2iz>
 800a89a:	4682      	mov	sl, r0
 800a89c:	f7f5 fe52 	bl	8000544 <__aeabi_i2d>
 800a8a0:	4642      	mov	r2, r8
 800a8a2:	464b      	mov	r3, r9
 800a8a4:	f7f5 feb8 	bl	8000618 <__aeabi_dmul>
 800a8a8:	4602      	mov	r2, r0
 800a8aa:	460b      	mov	r3, r1
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	4639      	mov	r1, r7
 800a8b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a8b4:	f7f5 fcf8 	bl	80002a8 <__aeabi_dsub>
 800a8b8:	f805 6b01 	strb.w	r6, [r5], #1
 800a8bc:	9e01      	ldr	r6, [sp, #4]
 800a8be:	9f03      	ldr	r7, [sp, #12]
 800a8c0:	1bae      	subs	r6, r5, r6
 800a8c2:	42b7      	cmp	r7, r6
 800a8c4:	4602      	mov	r2, r0
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	d135      	bne.n	800a936 <_dtoa_r+0x6e6>
 800a8ca:	f7f5 fcef 	bl	80002ac <__adddf3>
 800a8ce:	4642      	mov	r2, r8
 800a8d0:	464b      	mov	r3, r9
 800a8d2:	4606      	mov	r6, r0
 800a8d4:	460f      	mov	r7, r1
 800a8d6:	f7f6 f92f 	bl	8000b38 <__aeabi_dcmpgt>
 800a8da:	b9d0      	cbnz	r0, 800a912 <_dtoa_r+0x6c2>
 800a8dc:	4642      	mov	r2, r8
 800a8de:	464b      	mov	r3, r9
 800a8e0:	4630      	mov	r0, r6
 800a8e2:	4639      	mov	r1, r7
 800a8e4:	f7f6 f900 	bl	8000ae8 <__aeabi_dcmpeq>
 800a8e8:	b110      	cbz	r0, 800a8f0 <_dtoa_r+0x6a0>
 800a8ea:	f01a 0f01 	tst.w	sl, #1
 800a8ee:	d110      	bne.n	800a912 <_dtoa_r+0x6c2>
 800a8f0:	4620      	mov	r0, r4
 800a8f2:	ee18 1a10 	vmov	r1, s16
 800a8f6:	f000 ff47 	bl	800b788 <_Bfree>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	9800      	ldr	r0, [sp, #0]
 800a8fe:	702b      	strb	r3, [r5, #0]
 800a900:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a902:	3001      	adds	r0, #1
 800a904:	6018      	str	r0, [r3, #0]
 800a906:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a908:	2b00      	cmp	r3, #0
 800a90a:	f43f acf1 	beq.w	800a2f0 <_dtoa_r+0xa0>
 800a90e:	601d      	str	r5, [r3, #0]
 800a910:	e4ee      	b.n	800a2f0 <_dtoa_r+0xa0>
 800a912:	9f00      	ldr	r7, [sp, #0]
 800a914:	462b      	mov	r3, r5
 800a916:	461d      	mov	r5, r3
 800a918:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a91c:	2a39      	cmp	r2, #57	; 0x39
 800a91e:	d106      	bne.n	800a92e <_dtoa_r+0x6de>
 800a920:	9a01      	ldr	r2, [sp, #4]
 800a922:	429a      	cmp	r2, r3
 800a924:	d1f7      	bne.n	800a916 <_dtoa_r+0x6c6>
 800a926:	9901      	ldr	r1, [sp, #4]
 800a928:	2230      	movs	r2, #48	; 0x30
 800a92a:	3701      	adds	r7, #1
 800a92c:	700a      	strb	r2, [r1, #0]
 800a92e:	781a      	ldrb	r2, [r3, #0]
 800a930:	3201      	adds	r2, #1
 800a932:	701a      	strb	r2, [r3, #0]
 800a934:	e790      	b.n	800a858 <_dtoa_r+0x608>
 800a936:	4ba6      	ldr	r3, [pc, #664]	; (800abd0 <_dtoa_r+0x980>)
 800a938:	2200      	movs	r2, #0
 800a93a:	f7f5 fe6d 	bl	8000618 <__aeabi_dmul>
 800a93e:	2200      	movs	r2, #0
 800a940:	2300      	movs	r3, #0
 800a942:	4606      	mov	r6, r0
 800a944:	460f      	mov	r7, r1
 800a946:	f7f6 f8cf 	bl	8000ae8 <__aeabi_dcmpeq>
 800a94a:	2800      	cmp	r0, #0
 800a94c:	d09d      	beq.n	800a88a <_dtoa_r+0x63a>
 800a94e:	e7cf      	b.n	800a8f0 <_dtoa_r+0x6a0>
 800a950:	9a08      	ldr	r2, [sp, #32]
 800a952:	2a00      	cmp	r2, #0
 800a954:	f000 80d7 	beq.w	800ab06 <_dtoa_r+0x8b6>
 800a958:	9a06      	ldr	r2, [sp, #24]
 800a95a:	2a01      	cmp	r2, #1
 800a95c:	f300 80ba 	bgt.w	800aad4 <_dtoa_r+0x884>
 800a960:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a962:	2a00      	cmp	r2, #0
 800a964:	f000 80b2 	beq.w	800aacc <_dtoa_r+0x87c>
 800a968:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a96c:	9e07      	ldr	r6, [sp, #28]
 800a96e:	9d04      	ldr	r5, [sp, #16]
 800a970:	9a04      	ldr	r2, [sp, #16]
 800a972:	441a      	add	r2, r3
 800a974:	9204      	str	r2, [sp, #16]
 800a976:	9a05      	ldr	r2, [sp, #20]
 800a978:	2101      	movs	r1, #1
 800a97a:	441a      	add	r2, r3
 800a97c:	4620      	mov	r0, r4
 800a97e:	9205      	str	r2, [sp, #20]
 800a980:	f001 f804 	bl	800b98c <__i2b>
 800a984:	4607      	mov	r7, r0
 800a986:	2d00      	cmp	r5, #0
 800a988:	dd0c      	ble.n	800a9a4 <_dtoa_r+0x754>
 800a98a:	9b05      	ldr	r3, [sp, #20]
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	dd09      	ble.n	800a9a4 <_dtoa_r+0x754>
 800a990:	42ab      	cmp	r3, r5
 800a992:	9a04      	ldr	r2, [sp, #16]
 800a994:	bfa8      	it	ge
 800a996:	462b      	movge	r3, r5
 800a998:	1ad2      	subs	r2, r2, r3
 800a99a:	9204      	str	r2, [sp, #16]
 800a99c:	9a05      	ldr	r2, [sp, #20]
 800a99e:	1aed      	subs	r5, r5, r3
 800a9a0:	1ad3      	subs	r3, r2, r3
 800a9a2:	9305      	str	r3, [sp, #20]
 800a9a4:	9b07      	ldr	r3, [sp, #28]
 800a9a6:	b31b      	cbz	r3, 800a9f0 <_dtoa_r+0x7a0>
 800a9a8:	9b08      	ldr	r3, [sp, #32]
 800a9aa:	2b00      	cmp	r3, #0
 800a9ac:	f000 80af 	beq.w	800ab0e <_dtoa_r+0x8be>
 800a9b0:	2e00      	cmp	r6, #0
 800a9b2:	dd13      	ble.n	800a9dc <_dtoa_r+0x78c>
 800a9b4:	4639      	mov	r1, r7
 800a9b6:	4632      	mov	r2, r6
 800a9b8:	4620      	mov	r0, r4
 800a9ba:	f001 f8a7 	bl	800bb0c <__pow5mult>
 800a9be:	ee18 2a10 	vmov	r2, s16
 800a9c2:	4601      	mov	r1, r0
 800a9c4:	4607      	mov	r7, r0
 800a9c6:	4620      	mov	r0, r4
 800a9c8:	f000 fff6 	bl	800b9b8 <__multiply>
 800a9cc:	ee18 1a10 	vmov	r1, s16
 800a9d0:	4680      	mov	r8, r0
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 fed8 	bl	800b788 <_Bfree>
 800a9d8:	ee08 8a10 	vmov	s16, r8
 800a9dc:	9b07      	ldr	r3, [sp, #28]
 800a9de:	1b9a      	subs	r2, r3, r6
 800a9e0:	d006      	beq.n	800a9f0 <_dtoa_r+0x7a0>
 800a9e2:	ee18 1a10 	vmov	r1, s16
 800a9e6:	4620      	mov	r0, r4
 800a9e8:	f001 f890 	bl	800bb0c <__pow5mult>
 800a9ec:	ee08 0a10 	vmov	s16, r0
 800a9f0:	2101      	movs	r1, #1
 800a9f2:	4620      	mov	r0, r4
 800a9f4:	f000 ffca 	bl	800b98c <__i2b>
 800a9f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	4606      	mov	r6, r0
 800a9fe:	f340 8088 	ble.w	800ab12 <_dtoa_r+0x8c2>
 800aa02:	461a      	mov	r2, r3
 800aa04:	4601      	mov	r1, r0
 800aa06:	4620      	mov	r0, r4
 800aa08:	f001 f880 	bl	800bb0c <__pow5mult>
 800aa0c:	9b06      	ldr	r3, [sp, #24]
 800aa0e:	2b01      	cmp	r3, #1
 800aa10:	4606      	mov	r6, r0
 800aa12:	f340 8081 	ble.w	800ab18 <_dtoa_r+0x8c8>
 800aa16:	f04f 0800 	mov.w	r8, #0
 800aa1a:	6933      	ldr	r3, [r6, #16]
 800aa1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aa20:	6918      	ldr	r0, [r3, #16]
 800aa22:	f000 ff63 	bl	800b8ec <__hi0bits>
 800aa26:	f1c0 0020 	rsb	r0, r0, #32
 800aa2a:	9b05      	ldr	r3, [sp, #20]
 800aa2c:	4418      	add	r0, r3
 800aa2e:	f010 001f 	ands.w	r0, r0, #31
 800aa32:	f000 8092 	beq.w	800ab5a <_dtoa_r+0x90a>
 800aa36:	f1c0 0320 	rsb	r3, r0, #32
 800aa3a:	2b04      	cmp	r3, #4
 800aa3c:	f340 808a 	ble.w	800ab54 <_dtoa_r+0x904>
 800aa40:	f1c0 001c 	rsb	r0, r0, #28
 800aa44:	9b04      	ldr	r3, [sp, #16]
 800aa46:	4403      	add	r3, r0
 800aa48:	9304      	str	r3, [sp, #16]
 800aa4a:	9b05      	ldr	r3, [sp, #20]
 800aa4c:	4403      	add	r3, r0
 800aa4e:	4405      	add	r5, r0
 800aa50:	9305      	str	r3, [sp, #20]
 800aa52:	9b04      	ldr	r3, [sp, #16]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	dd07      	ble.n	800aa68 <_dtoa_r+0x818>
 800aa58:	ee18 1a10 	vmov	r1, s16
 800aa5c:	461a      	mov	r2, r3
 800aa5e:	4620      	mov	r0, r4
 800aa60:	f001 f8ae 	bl	800bbc0 <__lshift>
 800aa64:	ee08 0a10 	vmov	s16, r0
 800aa68:	9b05      	ldr	r3, [sp, #20]
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	dd05      	ble.n	800aa7a <_dtoa_r+0x82a>
 800aa6e:	4631      	mov	r1, r6
 800aa70:	461a      	mov	r2, r3
 800aa72:	4620      	mov	r0, r4
 800aa74:	f001 f8a4 	bl	800bbc0 <__lshift>
 800aa78:	4606      	mov	r6, r0
 800aa7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d06e      	beq.n	800ab5e <_dtoa_r+0x90e>
 800aa80:	ee18 0a10 	vmov	r0, s16
 800aa84:	4631      	mov	r1, r6
 800aa86:	f001 f90b 	bl	800bca0 <__mcmp>
 800aa8a:	2800      	cmp	r0, #0
 800aa8c:	da67      	bge.n	800ab5e <_dtoa_r+0x90e>
 800aa8e:	9b00      	ldr	r3, [sp, #0]
 800aa90:	3b01      	subs	r3, #1
 800aa92:	ee18 1a10 	vmov	r1, s16
 800aa96:	9300      	str	r3, [sp, #0]
 800aa98:	220a      	movs	r2, #10
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	f000 fe95 	bl	800b7cc <__multadd>
 800aaa2:	9b08      	ldr	r3, [sp, #32]
 800aaa4:	ee08 0a10 	vmov	s16, r0
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	f000 81b1 	beq.w	800ae10 <_dtoa_r+0xbc0>
 800aaae:	2300      	movs	r3, #0
 800aab0:	4639      	mov	r1, r7
 800aab2:	220a      	movs	r2, #10
 800aab4:	4620      	mov	r0, r4
 800aab6:	f000 fe89 	bl	800b7cc <__multadd>
 800aaba:	9b02      	ldr	r3, [sp, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	4607      	mov	r7, r0
 800aac0:	f300 808e 	bgt.w	800abe0 <_dtoa_r+0x990>
 800aac4:	9b06      	ldr	r3, [sp, #24]
 800aac6:	2b02      	cmp	r3, #2
 800aac8:	dc51      	bgt.n	800ab6e <_dtoa_r+0x91e>
 800aaca:	e089      	b.n	800abe0 <_dtoa_r+0x990>
 800aacc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aace:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800aad2:	e74b      	b.n	800a96c <_dtoa_r+0x71c>
 800aad4:	9b03      	ldr	r3, [sp, #12]
 800aad6:	1e5e      	subs	r6, r3, #1
 800aad8:	9b07      	ldr	r3, [sp, #28]
 800aada:	42b3      	cmp	r3, r6
 800aadc:	bfbf      	itttt	lt
 800aade:	9b07      	ldrlt	r3, [sp, #28]
 800aae0:	9607      	strlt	r6, [sp, #28]
 800aae2:	1af2      	sublt	r2, r6, r3
 800aae4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800aae6:	bfb6      	itet	lt
 800aae8:	189b      	addlt	r3, r3, r2
 800aaea:	1b9e      	subge	r6, r3, r6
 800aaec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800aaee:	9b03      	ldr	r3, [sp, #12]
 800aaf0:	bfb8      	it	lt
 800aaf2:	2600      	movlt	r6, #0
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bfb7      	itett	lt
 800aaf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800aafc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ab00:	1a9d      	sublt	r5, r3, r2
 800ab02:	2300      	movlt	r3, #0
 800ab04:	e734      	b.n	800a970 <_dtoa_r+0x720>
 800ab06:	9e07      	ldr	r6, [sp, #28]
 800ab08:	9d04      	ldr	r5, [sp, #16]
 800ab0a:	9f08      	ldr	r7, [sp, #32]
 800ab0c:	e73b      	b.n	800a986 <_dtoa_r+0x736>
 800ab0e:	9a07      	ldr	r2, [sp, #28]
 800ab10:	e767      	b.n	800a9e2 <_dtoa_r+0x792>
 800ab12:	9b06      	ldr	r3, [sp, #24]
 800ab14:	2b01      	cmp	r3, #1
 800ab16:	dc18      	bgt.n	800ab4a <_dtoa_r+0x8fa>
 800ab18:	f1ba 0f00 	cmp.w	sl, #0
 800ab1c:	d115      	bne.n	800ab4a <_dtoa_r+0x8fa>
 800ab1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab22:	b993      	cbnz	r3, 800ab4a <_dtoa_r+0x8fa>
 800ab24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab28:	0d1b      	lsrs	r3, r3, #20
 800ab2a:	051b      	lsls	r3, r3, #20
 800ab2c:	b183      	cbz	r3, 800ab50 <_dtoa_r+0x900>
 800ab2e:	9b04      	ldr	r3, [sp, #16]
 800ab30:	3301      	adds	r3, #1
 800ab32:	9304      	str	r3, [sp, #16]
 800ab34:	9b05      	ldr	r3, [sp, #20]
 800ab36:	3301      	adds	r3, #1
 800ab38:	9305      	str	r3, [sp, #20]
 800ab3a:	f04f 0801 	mov.w	r8, #1
 800ab3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	f47f af6a 	bne.w	800aa1a <_dtoa_r+0x7ca>
 800ab46:	2001      	movs	r0, #1
 800ab48:	e76f      	b.n	800aa2a <_dtoa_r+0x7da>
 800ab4a:	f04f 0800 	mov.w	r8, #0
 800ab4e:	e7f6      	b.n	800ab3e <_dtoa_r+0x8ee>
 800ab50:	4698      	mov	r8, r3
 800ab52:	e7f4      	b.n	800ab3e <_dtoa_r+0x8ee>
 800ab54:	f43f af7d 	beq.w	800aa52 <_dtoa_r+0x802>
 800ab58:	4618      	mov	r0, r3
 800ab5a:	301c      	adds	r0, #28
 800ab5c:	e772      	b.n	800aa44 <_dtoa_r+0x7f4>
 800ab5e:	9b03      	ldr	r3, [sp, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	dc37      	bgt.n	800abd4 <_dtoa_r+0x984>
 800ab64:	9b06      	ldr	r3, [sp, #24]
 800ab66:	2b02      	cmp	r3, #2
 800ab68:	dd34      	ble.n	800abd4 <_dtoa_r+0x984>
 800ab6a:	9b03      	ldr	r3, [sp, #12]
 800ab6c:	9302      	str	r3, [sp, #8]
 800ab6e:	9b02      	ldr	r3, [sp, #8]
 800ab70:	b96b      	cbnz	r3, 800ab8e <_dtoa_r+0x93e>
 800ab72:	4631      	mov	r1, r6
 800ab74:	2205      	movs	r2, #5
 800ab76:	4620      	mov	r0, r4
 800ab78:	f000 fe28 	bl	800b7cc <__multadd>
 800ab7c:	4601      	mov	r1, r0
 800ab7e:	4606      	mov	r6, r0
 800ab80:	ee18 0a10 	vmov	r0, s16
 800ab84:	f001 f88c 	bl	800bca0 <__mcmp>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	f73f adbb 	bgt.w	800a704 <_dtoa_r+0x4b4>
 800ab8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab90:	9d01      	ldr	r5, [sp, #4]
 800ab92:	43db      	mvns	r3, r3
 800ab94:	9300      	str	r3, [sp, #0]
 800ab96:	f04f 0800 	mov.w	r8, #0
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 fdf3 	bl	800b788 <_Bfree>
 800aba2:	2f00      	cmp	r7, #0
 800aba4:	f43f aea4 	beq.w	800a8f0 <_dtoa_r+0x6a0>
 800aba8:	f1b8 0f00 	cmp.w	r8, #0
 800abac:	d005      	beq.n	800abba <_dtoa_r+0x96a>
 800abae:	45b8      	cmp	r8, r7
 800abb0:	d003      	beq.n	800abba <_dtoa_r+0x96a>
 800abb2:	4641      	mov	r1, r8
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fde7 	bl	800b788 <_Bfree>
 800abba:	4639      	mov	r1, r7
 800abbc:	4620      	mov	r0, r4
 800abbe:	f000 fde3 	bl	800b788 <_Bfree>
 800abc2:	e695      	b.n	800a8f0 <_dtoa_r+0x6a0>
 800abc4:	2600      	movs	r6, #0
 800abc6:	4637      	mov	r7, r6
 800abc8:	e7e1      	b.n	800ab8e <_dtoa_r+0x93e>
 800abca:	9700      	str	r7, [sp, #0]
 800abcc:	4637      	mov	r7, r6
 800abce:	e599      	b.n	800a704 <_dtoa_r+0x4b4>
 800abd0:	40240000 	.word	0x40240000
 800abd4:	9b08      	ldr	r3, [sp, #32]
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	f000 80ca 	beq.w	800ad70 <_dtoa_r+0xb20>
 800abdc:	9b03      	ldr	r3, [sp, #12]
 800abde:	9302      	str	r3, [sp, #8]
 800abe0:	2d00      	cmp	r5, #0
 800abe2:	dd05      	ble.n	800abf0 <_dtoa_r+0x9a0>
 800abe4:	4639      	mov	r1, r7
 800abe6:	462a      	mov	r2, r5
 800abe8:	4620      	mov	r0, r4
 800abea:	f000 ffe9 	bl	800bbc0 <__lshift>
 800abee:	4607      	mov	r7, r0
 800abf0:	f1b8 0f00 	cmp.w	r8, #0
 800abf4:	d05b      	beq.n	800acae <_dtoa_r+0xa5e>
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	4620      	mov	r0, r4
 800abfa:	f000 fd85 	bl	800b708 <_Balloc>
 800abfe:	4605      	mov	r5, r0
 800ac00:	b928      	cbnz	r0, 800ac0e <_dtoa_r+0x9be>
 800ac02:	4b87      	ldr	r3, [pc, #540]	; (800ae20 <_dtoa_r+0xbd0>)
 800ac04:	4602      	mov	r2, r0
 800ac06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac0a:	f7ff bb3b 	b.w	800a284 <_dtoa_r+0x34>
 800ac0e:	693a      	ldr	r2, [r7, #16]
 800ac10:	3202      	adds	r2, #2
 800ac12:	0092      	lsls	r2, r2, #2
 800ac14:	f107 010c 	add.w	r1, r7, #12
 800ac18:	300c      	adds	r0, #12
 800ac1a:	f7fd fbb2 	bl	8008382 <memcpy>
 800ac1e:	2201      	movs	r2, #1
 800ac20:	4629      	mov	r1, r5
 800ac22:	4620      	mov	r0, r4
 800ac24:	f000 ffcc 	bl	800bbc0 <__lshift>
 800ac28:	9b01      	ldr	r3, [sp, #4]
 800ac2a:	f103 0901 	add.w	r9, r3, #1
 800ac2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ac32:	4413      	add	r3, r2
 800ac34:	9305      	str	r3, [sp, #20]
 800ac36:	f00a 0301 	and.w	r3, sl, #1
 800ac3a:	46b8      	mov	r8, r7
 800ac3c:	9304      	str	r3, [sp, #16]
 800ac3e:	4607      	mov	r7, r0
 800ac40:	4631      	mov	r1, r6
 800ac42:	ee18 0a10 	vmov	r0, s16
 800ac46:	f7ff fa75 	bl	800a134 <quorem>
 800ac4a:	4641      	mov	r1, r8
 800ac4c:	9002      	str	r0, [sp, #8]
 800ac4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ac52:	ee18 0a10 	vmov	r0, s16
 800ac56:	f001 f823 	bl	800bca0 <__mcmp>
 800ac5a:	463a      	mov	r2, r7
 800ac5c:	9003      	str	r0, [sp, #12]
 800ac5e:	4631      	mov	r1, r6
 800ac60:	4620      	mov	r0, r4
 800ac62:	f001 f839 	bl	800bcd8 <__mdiff>
 800ac66:	68c2      	ldr	r2, [r0, #12]
 800ac68:	f109 3bff 	add.w	fp, r9, #4294967295
 800ac6c:	4605      	mov	r5, r0
 800ac6e:	bb02      	cbnz	r2, 800acb2 <_dtoa_r+0xa62>
 800ac70:	4601      	mov	r1, r0
 800ac72:	ee18 0a10 	vmov	r0, s16
 800ac76:	f001 f813 	bl	800bca0 <__mcmp>
 800ac7a:	4602      	mov	r2, r0
 800ac7c:	4629      	mov	r1, r5
 800ac7e:	4620      	mov	r0, r4
 800ac80:	9207      	str	r2, [sp, #28]
 800ac82:	f000 fd81 	bl	800b788 <_Bfree>
 800ac86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ac8a:	ea43 0102 	orr.w	r1, r3, r2
 800ac8e:	9b04      	ldr	r3, [sp, #16]
 800ac90:	430b      	orrs	r3, r1
 800ac92:	464d      	mov	r5, r9
 800ac94:	d10f      	bne.n	800acb6 <_dtoa_r+0xa66>
 800ac96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ac9a:	d02a      	beq.n	800acf2 <_dtoa_r+0xaa2>
 800ac9c:	9b03      	ldr	r3, [sp, #12]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	dd02      	ble.n	800aca8 <_dtoa_r+0xa58>
 800aca2:	9b02      	ldr	r3, [sp, #8]
 800aca4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800aca8:	f88b a000 	strb.w	sl, [fp]
 800acac:	e775      	b.n	800ab9a <_dtoa_r+0x94a>
 800acae:	4638      	mov	r0, r7
 800acb0:	e7ba      	b.n	800ac28 <_dtoa_r+0x9d8>
 800acb2:	2201      	movs	r2, #1
 800acb4:	e7e2      	b.n	800ac7c <_dtoa_r+0xa2c>
 800acb6:	9b03      	ldr	r3, [sp, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	db04      	blt.n	800acc6 <_dtoa_r+0xa76>
 800acbc:	9906      	ldr	r1, [sp, #24]
 800acbe:	430b      	orrs	r3, r1
 800acc0:	9904      	ldr	r1, [sp, #16]
 800acc2:	430b      	orrs	r3, r1
 800acc4:	d122      	bne.n	800ad0c <_dtoa_r+0xabc>
 800acc6:	2a00      	cmp	r2, #0
 800acc8:	ddee      	ble.n	800aca8 <_dtoa_r+0xa58>
 800acca:	ee18 1a10 	vmov	r1, s16
 800acce:	2201      	movs	r2, #1
 800acd0:	4620      	mov	r0, r4
 800acd2:	f000 ff75 	bl	800bbc0 <__lshift>
 800acd6:	4631      	mov	r1, r6
 800acd8:	ee08 0a10 	vmov	s16, r0
 800acdc:	f000 ffe0 	bl	800bca0 <__mcmp>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	dc03      	bgt.n	800acec <_dtoa_r+0xa9c>
 800ace4:	d1e0      	bne.n	800aca8 <_dtoa_r+0xa58>
 800ace6:	f01a 0f01 	tst.w	sl, #1
 800acea:	d0dd      	beq.n	800aca8 <_dtoa_r+0xa58>
 800acec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800acf0:	d1d7      	bne.n	800aca2 <_dtoa_r+0xa52>
 800acf2:	2339      	movs	r3, #57	; 0x39
 800acf4:	f88b 3000 	strb.w	r3, [fp]
 800acf8:	462b      	mov	r3, r5
 800acfa:	461d      	mov	r5, r3
 800acfc:	3b01      	subs	r3, #1
 800acfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad02:	2a39      	cmp	r2, #57	; 0x39
 800ad04:	d071      	beq.n	800adea <_dtoa_r+0xb9a>
 800ad06:	3201      	adds	r2, #1
 800ad08:	701a      	strb	r2, [r3, #0]
 800ad0a:	e746      	b.n	800ab9a <_dtoa_r+0x94a>
 800ad0c:	2a00      	cmp	r2, #0
 800ad0e:	dd07      	ble.n	800ad20 <_dtoa_r+0xad0>
 800ad10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad14:	d0ed      	beq.n	800acf2 <_dtoa_r+0xaa2>
 800ad16:	f10a 0301 	add.w	r3, sl, #1
 800ad1a:	f88b 3000 	strb.w	r3, [fp]
 800ad1e:	e73c      	b.n	800ab9a <_dtoa_r+0x94a>
 800ad20:	9b05      	ldr	r3, [sp, #20]
 800ad22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ad26:	4599      	cmp	r9, r3
 800ad28:	d047      	beq.n	800adba <_dtoa_r+0xb6a>
 800ad2a:	ee18 1a10 	vmov	r1, s16
 800ad2e:	2300      	movs	r3, #0
 800ad30:	220a      	movs	r2, #10
 800ad32:	4620      	mov	r0, r4
 800ad34:	f000 fd4a 	bl	800b7cc <__multadd>
 800ad38:	45b8      	cmp	r8, r7
 800ad3a:	ee08 0a10 	vmov	s16, r0
 800ad3e:	f04f 0300 	mov.w	r3, #0
 800ad42:	f04f 020a 	mov.w	r2, #10
 800ad46:	4641      	mov	r1, r8
 800ad48:	4620      	mov	r0, r4
 800ad4a:	d106      	bne.n	800ad5a <_dtoa_r+0xb0a>
 800ad4c:	f000 fd3e 	bl	800b7cc <__multadd>
 800ad50:	4680      	mov	r8, r0
 800ad52:	4607      	mov	r7, r0
 800ad54:	f109 0901 	add.w	r9, r9, #1
 800ad58:	e772      	b.n	800ac40 <_dtoa_r+0x9f0>
 800ad5a:	f000 fd37 	bl	800b7cc <__multadd>
 800ad5e:	4639      	mov	r1, r7
 800ad60:	4680      	mov	r8, r0
 800ad62:	2300      	movs	r3, #0
 800ad64:	220a      	movs	r2, #10
 800ad66:	4620      	mov	r0, r4
 800ad68:	f000 fd30 	bl	800b7cc <__multadd>
 800ad6c:	4607      	mov	r7, r0
 800ad6e:	e7f1      	b.n	800ad54 <_dtoa_r+0xb04>
 800ad70:	9b03      	ldr	r3, [sp, #12]
 800ad72:	9302      	str	r3, [sp, #8]
 800ad74:	9d01      	ldr	r5, [sp, #4]
 800ad76:	ee18 0a10 	vmov	r0, s16
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	f7ff f9da 	bl	800a134 <quorem>
 800ad80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad84:	9b01      	ldr	r3, [sp, #4]
 800ad86:	f805 ab01 	strb.w	sl, [r5], #1
 800ad8a:	1aea      	subs	r2, r5, r3
 800ad8c:	9b02      	ldr	r3, [sp, #8]
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	dd09      	ble.n	800ada6 <_dtoa_r+0xb56>
 800ad92:	ee18 1a10 	vmov	r1, s16
 800ad96:	2300      	movs	r3, #0
 800ad98:	220a      	movs	r2, #10
 800ad9a:	4620      	mov	r0, r4
 800ad9c:	f000 fd16 	bl	800b7cc <__multadd>
 800ada0:	ee08 0a10 	vmov	s16, r0
 800ada4:	e7e7      	b.n	800ad76 <_dtoa_r+0xb26>
 800ada6:	9b02      	ldr	r3, [sp, #8]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	bfc8      	it	gt
 800adac:	461d      	movgt	r5, r3
 800adae:	9b01      	ldr	r3, [sp, #4]
 800adb0:	bfd8      	it	le
 800adb2:	2501      	movle	r5, #1
 800adb4:	441d      	add	r5, r3
 800adb6:	f04f 0800 	mov.w	r8, #0
 800adba:	ee18 1a10 	vmov	r1, s16
 800adbe:	2201      	movs	r2, #1
 800adc0:	4620      	mov	r0, r4
 800adc2:	f000 fefd 	bl	800bbc0 <__lshift>
 800adc6:	4631      	mov	r1, r6
 800adc8:	ee08 0a10 	vmov	s16, r0
 800adcc:	f000 ff68 	bl	800bca0 <__mcmp>
 800add0:	2800      	cmp	r0, #0
 800add2:	dc91      	bgt.n	800acf8 <_dtoa_r+0xaa8>
 800add4:	d102      	bne.n	800addc <_dtoa_r+0xb8c>
 800add6:	f01a 0f01 	tst.w	sl, #1
 800adda:	d18d      	bne.n	800acf8 <_dtoa_r+0xaa8>
 800addc:	462b      	mov	r3, r5
 800adde:	461d      	mov	r5, r3
 800ade0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ade4:	2a30      	cmp	r2, #48	; 0x30
 800ade6:	d0fa      	beq.n	800adde <_dtoa_r+0xb8e>
 800ade8:	e6d7      	b.n	800ab9a <_dtoa_r+0x94a>
 800adea:	9a01      	ldr	r2, [sp, #4]
 800adec:	429a      	cmp	r2, r3
 800adee:	d184      	bne.n	800acfa <_dtoa_r+0xaaa>
 800adf0:	9b00      	ldr	r3, [sp, #0]
 800adf2:	3301      	adds	r3, #1
 800adf4:	9300      	str	r3, [sp, #0]
 800adf6:	2331      	movs	r3, #49	; 0x31
 800adf8:	7013      	strb	r3, [r2, #0]
 800adfa:	e6ce      	b.n	800ab9a <_dtoa_r+0x94a>
 800adfc:	4b09      	ldr	r3, [pc, #36]	; (800ae24 <_dtoa_r+0xbd4>)
 800adfe:	f7ff ba95 	b.w	800a32c <_dtoa_r+0xdc>
 800ae02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	f47f aa6e 	bne.w	800a2e6 <_dtoa_r+0x96>
 800ae0a:	4b07      	ldr	r3, [pc, #28]	; (800ae28 <_dtoa_r+0xbd8>)
 800ae0c:	f7ff ba8e 	b.w	800a32c <_dtoa_r+0xdc>
 800ae10:	9b02      	ldr	r3, [sp, #8]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	dcae      	bgt.n	800ad74 <_dtoa_r+0xb24>
 800ae16:	9b06      	ldr	r3, [sp, #24]
 800ae18:	2b02      	cmp	r3, #2
 800ae1a:	f73f aea8 	bgt.w	800ab6e <_dtoa_r+0x91e>
 800ae1e:	e7a9      	b.n	800ad74 <_dtoa_r+0xb24>
 800ae20:	0800cf80 	.word	0x0800cf80
 800ae24:	0800cd80 	.word	0x0800cd80
 800ae28:	0800cf01 	.word	0x0800cf01

0800ae2c <__sflush_r>:
 800ae2c:	898a      	ldrh	r2, [r1, #12]
 800ae2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae32:	4605      	mov	r5, r0
 800ae34:	0710      	lsls	r0, r2, #28
 800ae36:	460c      	mov	r4, r1
 800ae38:	d458      	bmi.n	800aeec <__sflush_r+0xc0>
 800ae3a:	684b      	ldr	r3, [r1, #4]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	dc05      	bgt.n	800ae4c <__sflush_r+0x20>
 800ae40:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	dc02      	bgt.n	800ae4c <__sflush_r+0x20>
 800ae46:	2000      	movs	r0, #0
 800ae48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae4c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae4e:	2e00      	cmp	r6, #0
 800ae50:	d0f9      	beq.n	800ae46 <__sflush_r+0x1a>
 800ae52:	2300      	movs	r3, #0
 800ae54:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ae58:	682f      	ldr	r7, [r5, #0]
 800ae5a:	602b      	str	r3, [r5, #0]
 800ae5c:	d032      	beq.n	800aec4 <__sflush_r+0x98>
 800ae5e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	075a      	lsls	r2, r3, #29
 800ae64:	d505      	bpl.n	800ae72 <__sflush_r+0x46>
 800ae66:	6863      	ldr	r3, [r4, #4]
 800ae68:	1ac0      	subs	r0, r0, r3
 800ae6a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ae6c:	b10b      	cbz	r3, 800ae72 <__sflush_r+0x46>
 800ae6e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ae70:	1ac0      	subs	r0, r0, r3
 800ae72:	2300      	movs	r3, #0
 800ae74:	4602      	mov	r2, r0
 800ae76:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ae78:	6a21      	ldr	r1, [r4, #32]
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	47b0      	blx	r6
 800ae7e:	1c43      	adds	r3, r0, #1
 800ae80:	89a3      	ldrh	r3, [r4, #12]
 800ae82:	d106      	bne.n	800ae92 <__sflush_r+0x66>
 800ae84:	6829      	ldr	r1, [r5, #0]
 800ae86:	291d      	cmp	r1, #29
 800ae88:	d82c      	bhi.n	800aee4 <__sflush_r+0xb8>
 800ae8a:	4a2a      	ldr	r2, [pc, #168]	; (800af34 <__sflush_r+0x108>)
 800ae8c:	40ca      	lsrs	r2, r1
 800ae8e:	07d6      	lsls	r6, r2, #31
 800ae90:	d528      	bpl.n	800aee4 <__sflush_r+0xb8>
 800ae92:	2200      	movs	r2, #0
 800ae94:	6062      	str	r2, [r4, #4]
 800ae96:	04d9      	lsls	r1, r3, #19
 800ae98:	6922      	ldr	r2, [r4, #16]
 800ae9a:	6022      	str	r2, [r4, #0]
 800ae9c:	d504      	bpl.n	800aea8 <__sflush_r+0x7c>
 800ae9e:	1c42      	adds	r2, r0, #1
 800aea0:	d101      	bne.n	800aea6 <__sflush_r+0x7a>
 800aea2:	682b      	ldr	r3, [r5, #0]
 800aea4:	b903      	cbnz	r3, 800aea8 <__sflush_r+0x7c>
 800aea6:	6560      	str	r0, [r4, #84]	; 0x54
 800aea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aeaa:	602f      	str	r7, [r5, #0]
 800aeac:	2900      	cmp	r1, #0
 800aeae:	d0ca      	beq.n	800ae46 <__sflush_r+0x1a>
 800aeb0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aeb4:	4299      	cmp	r1, r3
 800aeb6:	d002      	beq.n	800aebe <__sflush_r+0x92>
 800aeb8:	4628      	mov	r0, r5
 800aeba:	f001 f8fd 	bl	800c0b8 <_free_r>
 800aebe:	2000      	movs	r0, #0
 800aec0:	6360      	str	r0, [r4, #52]	; 0x34
 800aec2:	e7c1      	b.n	800ae48 <__sflush_r+0x1c>
 800aec4:	6a21      	ldr	r1, [r4, #32]
 800aec6:	2301      	movs	r3, #1
 800aec8:	4628      	mov	r0, r5
 800aeca:	47b0      	blx	r6
 800aecc:	1c41      	adds	r1, r0, #1
 800aece:	d1c7      	bne.n	800ae60 <__sflush_r+0x34>
 800aed0:	682b      	ldr	r3, [r5, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d0c4      	beq.n	800ae60 <__sflush_r+0x34>
 800aed6:	2b1d      	cmp	r3, #29
 800aed8:	d001      	beq.n	800aede <__sflush_r+0xb2>
 800aeda:	2b16      	cmp	r3, #22
 800aedc:	d101      	bne.n	800aee2 <__sflush_r+0xb6>
 800aede:	602f      	str	r7, [r5, #0]
 800aee0:	e7b1      	b.n	800ae46 <__sflush_r+0x1a>
 800aee2:	89a3      	ldrh	r3, [r4, #12]
 800aee4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aee8:	81a3      	strh	r3, [r4, #12]
 800aeea:	e7ad      	b.n	800ae48 <__sflush_r+0x1c>
 800aeec:	690f      	ldr	r7, [r1, #16]
 800aeee:	2f00      	cmp	r7, #0
 800aef0:	d0a9      	beq.n	800ae46 <__sflush_r+0x1a>
 800aef2:	0793      	lsls	r3, r2, #30
 800aef4:	680e      	ldr	r6, [r1, #0]
 800aef6:	bf08      	it	eq
 800aef8:	694b      	ldreq	r3, [r1, #20]
 800aefa:	600f      	str	r7, [r1, #0]
 800aefc:	bf18      	it	ne
 800aefe:	2300      	movne	r3, #0
 800af00:	eba6 0807 	sub.w	r8, r6, r7
 800af04:	608b      	str	r3, [r1, #8]
 800af06:	f1b8 0f00 	cmp.w	r8, #0
 800af0a:	dd9c      	ble.n	800ae46 <__sflush_r+0x1a>
 800af0c:	6a21      	ldr	r1, [r4, #32]
 800af0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800af10:	4643      	mov	r3, r8
 800af12:	463a      	mov	r2, r7
 800af14:	4628      	mov	r0, r5
 800af16:	47b0      	blx	r6
 800af18:	2800      	cmp	r0, #0
 800af1a:	dc06      	bgt.n	800af2a <__sflush_r+0xfe>
 800af1c:	89a3      	ldrh	r3, [r4, #12]
 800af1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800af22:	81a3      	strh	r3, [r4, #12]
 800af24:	f04f 30ff 	mov.w	r0, #4294967295
 800af28:	e78e      	b.n	800ae48 <__sflush_r+0x1c>
 800af2a:	4407      	add	r7, r0
 800af2c:	eba8 0800 	sub.w	r8, r8, r0
 800af30:	e7e9      	b.n	800af06 <__sflush_r+0xda>
 800af32:	bf00      	nop
 800af34:	20400001 	.word	0x20400001

0800af38 <_fflush_r>:
 800af38:	b538      	push	{r3, r4, r5, lr}
 800af3a:	690b      	ldr	r3, [r1, #16]
 800af3c:	4605      	mov	r5, r0
 800af3e:	460c      	mov	r4, r1
 800af40:	b913      	cbnz	r3, 800af48 <_fflush_r+0x10>
 800af42:	2500      	movs	r5, #0
 800af44:	4628      	mov	r0, r5
 800af46:	bd38      	pop	{r3, r4, r5, pc}
 800af48:	b118      	cbz	r0, 800af52 <_fflush_r+0x1a>
 800af4a:	6983      	ldr	r3, [r0, #24]
 800af4c:	b90b      	cbnz	r3, 800af52 <_fflush_r+0x1a>
 800af4e:	f7fd f953 	bl	80081f8 <__sinit>
 800af52:	4b14      	ldr	r3, [pc, #80]	; (800afa4 <_fflush_r+0x6c>)
 800af54:	429c      	cmp	r4, r3
 800af56:	d11b      	bne.n	800af90 <_fflush_r+0x58>
 800af58:	686c      	ldr	r4, [r5, #4]
 800af5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d0ef      	beq.n	800af42 <_fflush_r+0xa>
 800af62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800af64:	07d0      	lsls	r0, r2, #31
 800af66:	d404      	bmi.n	800af72 <_fflush_r+0x3a>
 800af68:	0599      	lsls	r1, r3, #22
 800af6a:	d402      	bmi.n	800af72 <_fflush_r+0x3a>
 800af6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af6e:	f7fd fa06 	bl	800837e <__retarget_lock_acquire_recursive>
 800af72:	4628      	mov	r0, r5
 800af74:	4621      	mov	r1, r4
 800af76:	f7ff ff59 	bl	800ae2c <__sflush_r>
 800af7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800af7c:	07da      	lsls	r2, r3, #31
 800af7e:	4605      	mov	r5, r0
 800af80:	d4e0      	bmi.n	800af44 <_fflush_r+0xc>
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	059b      	lsls	r3, r3, #22
 800af86:	d4dd      	bmi.n	800af44 <_fflush_r+0xc>
 800af88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800af8a:	f7fd f9f9 	bl	8008380 <__retarget_lock_release_recursive>
 800af8e:	e7d9      	b.n	800af44 <_fflush_r+0xc>
 800af90:	4b05      	ldr	r3, [pc, #20]	; (800afa8 <_fflush_r+0x70>)
 800af92:	429c      	cmp	r4, r3
 800af94:	d101      	bne.n	800af9a <_fflush_r+0x62>
 800af96:	68ac      	ldr	r4, [r5, #8]
 800af98:	e7df      	b.n	800af5a <_fflush_r+0x22>
 800af9a:	4b04      	ldr	r3, [pc, #16]	; (800afac <_fflush_r+0x74>)
 800af9c:	429c      	cmp	r4, r3
 800af9e:	bf08      	it	eq
 800afa0:	68ec      	ldreq	r4, [r5, #12]
 800afa2:	e7da      	b.n	800af5a <_fflush_r+0x22>
 800afa4:	0800cd2c 	.word	0x0800cd2c
 800afa8:	0800cd4c 	.word	0x0800cd4c
 800afac:	0800cd0c 	.word	0x0800cd0c

0800afb0 <rshift>:
 800afb0:	6903      	ldr	r3, [r0, #16]
 800afb2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800afb6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800afba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800afbe:	f100 0414 	add.w	r4, r0, #20
 800afc2:	dd45      	ble.n	800b050 <rshift+0xa0>
 800afc4:	f011 011f 	ands.w	r1, r1, #31
 800afc8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800afcc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800afd0:	d10c      	bne.n	800afec <rshift+0x3c>
 800afd2:	f100 0710 	add.w	r7, r0, #16
 800afd6:	4629      	mov	r1, r5
 800afd8:	42b1      	cmp	r1, r6
 800afda:	d334      	bcc.n	800b046 <rshift+0x96>
 800afdc:	1a9b      	subs	r3, r3, r2
 800afde:	009b      	lsls	r3, r3, #2
 800afe0:	1eea      	subs	r2, r5, #3
 800afe2:	4296      	cmp	r6, r2
 800afe4:	bf38      	it	cc
 800afe6:	2300      	movcc	r3, #0
 800afe8:	4423      	add	r3, r4
 800afea:	e015      	b.n	800b018 <rshift+0x68>
 800afec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aff0:	f1c1 0820 	rsb	r8, r1, #32
 800aff4:	40cf      	lsrs	r7, r1
 800aff6:	f105 0e04 	add.w	lr, r5, #4
 800affa:	46a1      	mov	r9, r4
 800affc:	4576      	cmp	r6, lr
 800affe:	46f4      	mov	ip, lr
 800b000:	d815      	bhi.n	800b02e <rshift+0x7e>
 800b002:	1a9a      	subs	r2, r3, r2
 800b004:	0092      	lsls	r2, r2, #2
 800b006:	3a04      	subs	r2, #4
 800b008:	3501      	adds	r5, #1
 800b00a:	42ae      	cmp	r6, r5
 800b00c:	bf38      	it	cc
 800b00e:	2200      	movcc	r2, #0
 800b010:	18a3      	adds	r3, r4, r2
 800b012:	50a7      	str	r7, [r4, r2]
 800b014:	b107      	cbz	r7, 800b018 <rshift+0x68>
 800b016:	3304      	adds	r3, #4
 800b018:	1b1a      	subs	r2, r3, r4
 800b01a:	42a3      	cmp	r3, r4
 800b01c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b020:	bf08      	it	eq
 800b022:	2300      	moveq	r3, #0
 800b024:	6102      	str	r2, [r0, #16]
 800b026:	bf08      	it	eq
 800b028:	6143      	streq	r3, [r0, #20]
 800b02a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b02e:	f8dc c000 	ldr.w	ip, [ip]
 800b032:	fa0c fc08 	lsl.w	ip, ip, r8
 800b036:	ea4c 0707 	orr.w	r7, ip, r7
 800b03a:	f849 7b04 	str.w	r7, [r9], #4
 800b03e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b042:	40cf      	lsrs	r7, r1
 800b044:	e7da      	b.n	800affc <rshift+0x4c>
 800b046:	f851 cb04 	ldr.w	ip, [r1], #4
 800b04a:	f847 cf04 	str.w	ip, [r7, #4]!
 800b04e:	e7c3      	b.n	800afd8 <rshift+0x28>
 800b050:	4623      	mov	r3, r4
 800b052:	e7e1      	b.n	800b018 <rshift+0x68>

0800b054 <__hexdig_fun>:
 800b054:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b058:	2b09      	cmp	r3, #9
 800b05a:	d802      	bhi.n	800b062 <__hexdig_fun+0xe>
 800b05c:	3820      	subs	r0, #32
 800b05e:	b2c0      	uxtb	r0, r0
 800b060:	4770      	bx	lr
 800b062:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b066:	2b05      	cmp	r3, #5
 800b068:	d801      	bhi.n	800b06e <__hexdig_fun+0x1a>
 800b06a:	3847      	subs	r0, #71	; 0x47
 800b06c:	e7f7      	b.n	800b05e <__hexdig_fun+0xa>
 800b06e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b072:	2b05      	cmp	r3, #5
 800b074:	d801      	bhi.n	800b07a <__hexdig_fun+0x26>
 800b076:	3827      	subs	r0, #39	; 0x27
 800b078:	e7f1      	b.n	800b05e <__hexdig_fun+0xa>
 800b07a:	2000      	movs	r0, #0
 800b07c:	4770      	bx	lr
	...

0800b080 <__gethex>:
 800b080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b084:	ed2d 8b02 	vpush	{d8}
 800b088:	b089      	sub	sp, #36	; 0x24
 800b08a:	ee08 0a10 	vmov	s16, r0
 800b08e:	9304      	str	r3, [sp, #16]
 800b090:	4bb4      	ldr	r3, [pc, #720]	; (800b364 <__gethex+0x2e4>)
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	9301      	str	r3, [sp, #4]
 800b096:	4618      	mov	r0, r3
 800b098:	468b      	mov	fp, r1
 800b09a:	4690      	mov	r8, r2
 800b09c:	f7f5 f8a8 	bl	80001f0 <strlen>
 800b0a0:	9b01      	ldr	r3, [sp, #4]
 800b0a2:	f8db 2000 	ldr.w	r2, [fp]
 800b0a6:	4403      	add	r3, r0
 800b0a8:	4682      	mov	sl, r0
 800b0aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b0ae:	9305      	str	r3, [sp, #20]
 800b0b0:	1c93      	adds	r3, r2, #2
 800b0b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b0b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b0ba:	32fe      	adds	r2, #254	; 0xfe
 800b0bc:	18d1      	adds	r1, r2, r3
 800b0be:	461f      	mov	r7, r3
 800b0c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b0c4:	9100      	str	r1, [sp, #0]
 800b0c6:	2830      	cmp	r0, #48	; 0x30
 800b0c8:	d0f8      	beq.n	800b0bc <__gethex+0x3c>
 800b0ca:	f7ff ffc3 	bl	800b054 <__hexdig_fun>
 800b0ce:	4604      	mov	r4, r0
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	d13a      	bne.n	800b14a <__gethex+0xca>
 800b0d4:	9901      	ldr	r1, [sp, #4]
 800b0d6:	4652      	mov	r2, sl
 800b0d8:	4638      	mov	r0, r7
 800b0da:	f001 f9b1 	bl	800c440 <strncmp>
 800b0de:	4605      	mov	r5, r0
 800b0e0:	2800      	cmp	r0, #0
 800b0e2:	d168      	bne.n	800b1b6 <__gethex+0x136>
 800b0e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b0e8:	eb07 060a 	add.w	r6, r7, sl
 800b0ec:	f7ff ffb2 	bl	800b054 <__hexdig_fun>
 800b0f0:	2800      	cmp	r0, #0
 800b0f2:	d062      	beq.n	800b1ba <__gethex+0x13a>
 800b0f4:	4633      	mov	r3, r6
 800b0f6:	7818      	ldrb	r0, [r3, #0]
 800b0f8:	2830      	cmp	r0, #48	; 0x30
 800b0fa:	461f      	mov	r7, r3
 800b0fc:	f103 0301 	add.w	r3, r3, #1
 800b100:	d0f9      	beq.n	800b0f6 <__gethex+0x76>
 800b102:	f7ff ffa7 	bl	800b054 <__hexdig_fun>
 800b106:	2301      	movs	r3, #1
 800b108:	fab0 f480 	clz	r4, r0
 800b10c:	0964      	lsrs	r4, r4, #5
 800b10e:	4635      	mov	r5, r6
 800b110:	9300      	str	r3, [sp, #0]
 800b112:	463a      	mov	r2, r7
 800b114:	4616      	mov	r6, r2
 800b116:	3201      	adds	r2, #1
 800b118:	7830      	ldrb	r0, [r6, #0]
 800b11a:	f7ff ff9b 	bl	800b054 <__hexdig_fun>
 800b11e:	2800      	cmp	r0, #0
 800b120:	d1f8      	bne.n	800b114 <__gethex+0x94>
 800b122:	9901      	ldr	r1, [sp, #4]
 800b124:	4652      	mov	r2, sl
 800b126:	4630      	mov	r0, r6
 800b128:	f001 f98a 	bl	800c440 <strncmp>
 800b12c:	b980      	cbnz	r0, 800b150 <__gethex+0xd0>
 800b12e:	b94d      	cbnz	r5, 800b144 <__gethex+0xc4>
 800b130:	eb06 050a 	add.w	r5, r6, sl
 800b134:	462a      	mov	r2, r5
 800b136:	4616      	mov	r6, r2
 800b138:	3201      	adds	r2, #1
 800b13a:	7830      	ldrb	r0, [r6, #0]
 800b13c:	f7ff ff8a 	bl	800b054 <__hexdig_fun>
 800b140:	2800      	cmp	r0, #0
 800b142:	d1f8      	bne.n	800b136 <__gethex+0xb6>
 800b144:	1bad      	subs	r5, r5, r6
 800b146:	00ad      	lsls	r5, r5, #2
 800b148:	e004      	b.n	800b154 <__gethex+0xd4>
 800b14a:	2400      	movs	r4, #0
 800b14c:	4625      	mov	r5, r4
 800b14e:	e7e0      	b.n	800b112 <__gethex+0x92>
 800b150:	2d00      	cmp	r5, #0
 800b152:	d1f7      	bne.n	800b144 <__gethex+0xc4>
 800b154:	7833      	ldrb	r3, [r6, #0]
 800b156:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b15a:	2b50      	cmp	r3, #80	; 0x50
 800b15c:	d13b      	bne.n	800b1d6 <__gethex+0x156>
 800b15e:	7873      	ldrb	r3, [r6, #1]
 800b160:	2b2b      	cmp	r3, #43	; 0x2b
 800b162:	d02c      	beq.n	800b1be <__gethex+0x13e>
 800b164:	2b2d      	cmp	r3, #45	; 0x2d
 800b166:	d02e      	beq.n	800b1c6 <__gethex+0x146>
 800b168:	1c71      	adds	r1, r6, #1
 800b16a:	f04f 0900 	mov.w	r9, #0
 800b16e:	7808      	ldrb	r0, [r1, #0]
 800b170:	f7ff ff70 	bl	800b054 <__hexdig_fun>
 800b174:	1e43      	subs	r3, r0, #1
 800b176:	b2db      	uxtb	r3, r3
 800b178:	2b18      	cmp	r3, #24
 800b17a:	d82c      	bhi.n	800b1d6 <__gethex+0x156>
 800b17c:	f1a0 0210 	sub.w	r2, r0, #16
 800b180:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b184:	f7ff ff66 	bl	800b054 <__hexdig_fun>
 800b188:	1e43      	subs	r3, r0, #1
 800b18a:	b2db      	uxtb	r3, r3
 800b18c:	2b18      	cmp	r3, #24
 800b18e:	d91d      	bls.n	800b1cc <__gethex+0x14c>
 800b190:	f1b9 0f00 	cmp.w	r9, #0
 800b194:	d000      	beq.n	800b198 <__gethex+0x118>
 800b196:	4252      	negs	r2, r2
 800b198:	4415      	add	r5, r2
 800b19a:	f8cb 1000 	str.w	r1, [fp]
 800b19e:	b1e4      	cbz	r4, 800b1da <__gethex+0x15a>
 800b1a0:	9b00      	ldr	r3, [sp, #0]
 800b1a2:	2b00      	cmp	r3, #0
 800b1a4:	bf14      	ite	ne
 800b1a6:	2700      	movne	r7, #0
 800b1a8:	2706      	moveq	r7, #6
 800b1aa:	4638      	mov	r0, r7
 800b1ac:	b009      	add	sp, #36	; 0x24
 800b1ae:	ecbd 8b02 	vpop	{d8}
 800b1b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1b6:	463e      	mov	r6, r7
 800b1b8:	4625      	mov	r5, r4
 800b1ba:	2401      	movs	r4, #1
 800b1bc:	e7ca      	b.n	800b154 <__gethex+0xd4>
 800b1be:	f04f 0900 	mov.w	r9, #0
 800b1c2:	1cb1      	adds	r1, r6, #2
 800b1c4:	e7d3      	b.n	800b16e <__gethex+0xee>
 800b1c6:	f04f 0901 	mov.w	r9, #1
 800b1ca:	e7fa      	b.n	800b1c2 <__gethex+0x142>
 800b1cc:	230a      	movs	r3, #10
 800b1ce:	fb03 0202 	mla	r2, r3, r2, r0
 800b1d2:	3a10      	subs	r2, #16
 800b1d4:	e7d4      	b.n	800b180 <__gethex+0x100>
 800b1d6:	4631      	mov	r1, r6
 800b1d8:	e7df      	b.n	800b19a <__gethex+0x11a>
 800b1da:	1bf3      	subs	r3, r6, r7
 800b1dc:	3b01      	subs	r3, #1
 800b1de:	4621      	mov	r1, r4
 800b1e0:	2b07      	cmp	r3, #7
 800b1e2:	dc0b      	bgt.n	800b1fc <__gethex+0x17c>
 800b1e4:	ee18 0a10 	vmov	r0, s16
 800b1e8:	f000 fa8e 	bl	800b708 <_Balloc>
 800b1ec:	4604      	mov	r4, r0
 800b1ee:	b940      	cbnz	r0, 800b202 <__gethex+0x182>
 800b1f0:	4b5d      	ldr	r3, [pc, #372]	; (800b368 <__gethex+0x2e8>)
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	21de      	movs	r1, #222	; 0xde
 800b1f6:	485d      	ldr	r0, [pc, #372]	; (800b36c <__gethex+0x2ec>)
 800b1f8:	f001 f944 	bl	800c484 <__assert_func>
 800b1fc:	3101      	adds	r1, #1
 800b1fe:	105b      	asrs	r3, r3, #1
 800b200:	e7ee      	b.n	800b1e0 <__gethex+0x160>
 800b202:	f100 0914 	add.w	r9, r0, #20
 800b206:	f04f 0b00 	mov.w	fp, #0
 800b20a:	f1ca 0301 	rsb	r3, sl, #1
 800b20e:	f8cd 9008 	str.w	r9, [sp, #8]
 800b212:	f8cd b000 	str.w	fp, [sp]
 800b216:	9306      	str	r3, [sp, #24]
 800b218:	42b7      	cmp	r7, r6
 800b21a:	d340      	bcc.n	800b29e <__gethex+0x21e>
 800b21c:	9802      	ldr	r0, [sp, #8]
 800b21e:	9b00      	ldr	r3, [sp, #0]
 800b220:	f840 3b04 	str.w	r3, [r0], #4
 800b224:	eba0 0009 	sub.w	r0, r0, r9
 800b228:	1080      	asrs	r0, r0, #2
 800b22a:	0146      	lsls	r6, r0, #5
 800b22c:	6120      	str	r0, [r4, #16]
 800b22e:	4618      	mov	r0, r3
 800b230:	f000 fb5c 	bl	800b8ec <__hi0bits>
 800b234:	1a30      	subs	r0, r6, r0
 800b236:	f8d8 6000 	ldr.w	r6, [r8]
 800b23a:	42b0      	cmp	r0, r6
 800b23c:	dd63      	ble.n	800b306 <__gethex+0x286>
 800b23e:	1b87      	subs	r7, r0, r6
 800b240:	4639      	mov	r1, r7
 800b242:	4620      	mov	r0, r4
 800b244:	f000 ff00 	bl	800c048 <__any_on>
 800b248:	4682      	mov	sl, r0
 800b24a:	b1a8      	cbz	r0, 800b278 <__gethex+0x1f8>
 800b24c:	1e7b      	subs	r3, r7, #1
 800b24e:	1159      	asrs	r1, r3, #5
 800b250:	f003 021f 	and.w	r2, r3, #31
 800b254:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b258:	f04f 0a01 	mov.w	sl, #1
 800b25c:	fa0a f202 	lsl.w	r2, sl, r2
 800b260:	420a      	tst	r2, r1
 800b262:	d009      	beq.n	800b278 <__gethex+0x1f8>
 800b264:	4553      	cmp	r3, sl
 800b266:	dd05      	ble.n	800b274 <__gethex+0x1f4>
 800b268:	1eb9      	subs	r1, r7, #2
 800b26a:	4620      	mov	r0, r4
 800b26c:	f000 feec 	bl	800c048 <__any_on>
 800b270:	2800      	cmp	r0, #0
 800b272:	d145      	bne.n	800b300 <__gethex+0x280>
 800b274:	f04f 0a02 	mov.w	sl, #2
 800b278:	4639      	mov	r1, r7
 800b27a:	4620      	mov	r0, r4
 800b27c:	f7ff fe98 	bl	800afb0 <rshift>
 800b280:	443d      	add	r5, r7
 800b282:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b286:	42ab      	cmp	r3, r5
 800b288:	da4c      	bge.n	800b324 <__gethex+0x2a4>
 800b28a:	ee18 0a10 	vmov	r0, s16
 800b28e:	4621      	mov	r1, r4
 800b290:	f000 fa7a 	bl	800b788 <_Bfree>
 800b294:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b296:	2300      	movs	r3, #0
 800b298:	6013      	str	r3, [r2, #0]
 800b29a:	27a3      	movs	r7, #163	; 0xa3
 800b29c:	e785      	b.n	800b1aa <__gethex+0x12a>
 800b29e:	1e73      	subs	r3, r6, #1
 800b2a0:	9a05      	ldr	r2, [sp, #20]
 800b2a2:	9303      	str	r3, [sp, #12]
 800b2a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	d019      	beq.n	800b2e0 <__gethex+0x260>
 800b2ac:	f1bb 0f20 	cmp.w	fp, #32
 800b2b0:	d107      	bne.n	800b2c2 <__gethex+0x242>
 800b2b2:	9b02      	ldr	r3, [sp, #8]
 800b2b4:	9a00      	ldr	r2, [sp, #0]
 800b2b6:	f843 2b04 	str.w	r2, [r3], #4
 800b2ba:	9302      	str	r3, [sp, #8]
 800b2bc:	2300      	movs	r3, #0
 800b2be:	9300      	str	r3, [sp, #0]
 800b2c0:	469b      	mov	fp, r3
 800b2c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b2c6:	f7ff fec5 	bl	800b054 <__hexdig_fun>
 800b2ca:	9b00      	ldr	r3, [sp, #0]
 800b2cc:	f000 000f 	and.w	r0, r0, #15
 800b2d0:	fa00 f00b 	lsl.w	r0, r0, fp
 800b2d4:	4303      	orrs	r3, r0
 800b2d6:	9300      	str	r3, [sp, #0]
 800b2d8:	f10b 0b04 	add.w	fp, fp, #4
 800b2dc:	9b03      	ldr	r3, [sp, #12]
 800b2de:	e00d      	b.n	800b2fc <__gethex+0x27c>
 800b2e0:	9b03      	ldr	r3, [sp, #12]
 800b2e2:	9a06      	ldr	r2, [sp, #24]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	42bb      	cmp	r3, r7
 800b2e8:	d3e0      	bcc.n	800b2ac <__gethex+0x22c>
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	9901      	ldr	r1, [sp, #4]
 800b2ee:	9307      	str	r3, [sp, #28]
 800b2f0:	4652      	mov	r2, sl
 800b2f2:	f001 f8a5 	bl	800c440 <strncmp>
 800b2f6:	9b07      	ldr	r3, [sp, #28]
 800b2f8:	2800      	cmp	r0, #0
 800b2fa:	d1d7      	bne.n	800b2ac <__gethex+0x22c>
 800b2fc:	461e      	mov	r6, r3
 800b2fe:	e78b      	b.n	800b218 <__gethex+0x198>
 800b300:	f04f 0a03 	mov.w	sl, #3
 800b304:	e7b8      	b.n	800b278 <__gethex+0x1f8>
 800b306:	da0a      	bge.n	800b31e <__gethex+0x29e>
 800b308:	1a37      	subs	r7, r6, r0
 800b30a:	4621      	mov	r1, r4
 800b30c:	ee18 0a10 	vmov	r0, s16
 800b310:	463a      	mov	r2, r7
 800b312:	f000 fc55 	bl	800bbc0 <__lshift>
 800b316:	1bed      	subs	r5, r5, r7
 800b318:	4604      	mov	r4, r0
 800b31a:	f100 0914 	add.w	r9, r0, #20
 800b31e:	f04f 0a00 	mov.w	sl, #0
 800b322:	e7ae      	b.n	800b282 <__gethex+0x202>
 800b324:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b328:	42a8      	cmp	r0, r5
 800b32a:	dd72      	ble.n	800b412 <__gethex+0x392>
 800b32c:	1b45      	subs	r5, r0, r5
 800b32e:	42ae      	cmp	r6, r5
 800b330:	dc36      	bgt.n	800b3a0 <__gethex+0x320>
 800b332:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b336:	2b02      	cmp	r3, #2
 800b338:	d02a      	beq.n	800b390 <__gethex+0x310>
 800b33a:	2b03      	cmp	r3, #3
 800b33c:	d02c      	beq.n	800b398 <__gethex+0x318>
 800b33e:	2b01      	cmp	r3, #1
 800b340:	d11c      	bne.n	800b37c <__gethex+0x2fc>
 800b342:	42ae      	cmp	r6, r5
 800b344:	d11a      	bne.n	800b37c <__gethex+0x2fc>
 800b346:	2e01      	cmp	r6, #1
 800b348:	d112      	bne.n	800b370 <__gethex+0x2f0>
 800b34a:	9a04      	ldr	r2, [sp, #16]
 800b34c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b350:	6013      	str	r3, [r2, #0]
 800b352:	2301      	movs	r3, #1
 800b354:	6123      	str	r3, [r4, #16]
 800b356:	f8c9 3000 	str.w	r3, [r9]
 800b35a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b35c:	2762      	movs	r7, #98	; 0x62
 800b35e:	601c      	str	r4, [r3, #0]
 800b360:	e723      	b.n	800b1aa <__gethex+0x12a>
 800b362:	bf00      	nop
 800b364:	0800cff8 	.word	0x0800cff8
 800b368:	0800cf80 	.word	0x0800cf80
 800b36c:	0800cf91 	.word	0x0800cf91
 800b370:	1e71      	subs	r1, r6, #1
 800b372:	4620      	mov	r0, r4
 800b374:	f000 fe68 	bl	800c048 <__any_on>
 800b378:	2800      	cmp	r0, #0
 800b37a:	d1e6      	bne.n	800b34a <__gethex+0x2ca>
 800b37c:	ee18 0a10 	vmov	r0, s16
 800b380:	4621      	mov	r1, r4
 800b382:	f000 fa01 	bl	800b788 <_Bfree>
 800b386:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b388:	2300      	movs	r3, #0
 800b38a:	6013      	str	r3, [r2, #0]
 800b38c:	2750      	movs	r7, #80	; 0x50
 800b38e:	e70c      	b.n	800b1aa <__gethex+0x12a>
 800b390:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b392:	2b00      	cmp	r3, #0
 800b394:	d1f2      	bne.n	800b37c <__gethex+0x2fc>
 800b396:	e7d8      	b.n	800b34a <__gethex+0x2ca>
 800b398:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d1d5      	bne.n	800b34a <__gethex+0x2ca>
 800b39e:	e7ed      	b.n	800b37c <__gethex+0x2fc>
 800b3a0:	1e6f      	subs	r7, r5, #1
 800b3a2:	f1ba 0f00 	cmp.w	sl, #0
 800b3a6:	d131      	bne.n	800b40c <__gethex+0x38c>
 800b3a8:	b127      	cbz	r7, 800b3b4 <__gethex+0x334>
 800b3aa:	4639      	mov	r1, r7
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f000 fe4b 	bl	800c048 <__any_on>
 800b3b2:	4682      	mov	sl, r0
 800b3b4:	117b      	asrs	r3, r7, #5
 800b3b6:	2101      	movs	r1, #1
 800b3b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b3bc:	f007 071f 	and.w	r7, r7, #31
 800b3c0:	fa01 f707 	lsl.w	r7, r1, r7
 800b3c4:	421f      	tst	r7, r3
 800b3c6:	4629      	mov	r1, r5
 800b3c8:	4620      	mov	r0, r4
 800b3ca:	bf18      	it	ne
 800b3cc:	f04a 0a02 	orrne.w	sl, sl, #2
 800b3d0:	1b76      	subs	r6, r6, r5
 800b3d2:	f7ff fded 	bl	800afb0 <rshift>
 800b3d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b3da:	2702      	movs	r7, #2
 800b3dc:	f1ba 0f00 	cmp.w	sl, #0
 800b3e0:	d048      	beq.n	800b474 <__gethex+0x3f4>
 800b3e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b3e6:	2b02      	cmp	r3, #2
 800b3e8:	d015      	beq.n	800b416 <__gethex+0x396>
 800b3ea:	2b03      	cmp	r3, #3
 800b3ec:	d017      	beq.n	800b41e <__gethex+0x39e>
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d109      	bne.n	800b406 <__gethex+0x386>
 800b3f2:	f01a 0f02 	tst.w	sl, #2
 800b3f6:	d006      	beq.n	800b406 <__gethex+0x386>
 800b3f8:	f8d9 0000 	ldr.w	r0, [r9]
 800b3fc:	ea4a 0a00 	orr.w	sl, sl, r0
 800b400:	f01a 0f01 	tst.w	sl, #1
 800b404:	d10e      	bne.n	800b424 <__gethex+0x3a4>
 800b406:	f047 0710 	orr.w	r7, r7, #16
 800b40a:	e033      	b.n	800b474 <__gethex+0x3f4>
 800b40c:	f04f 0a01 	mov.w	sl, #1
 800b410:	e7d0      	b.n	800b3b4 <__gethex+0x334>
 800b412:	2701      	movs	r7, #1
 800b414:	e7e2      	b.n	800b3dc <__gethex+0x35c>
 800b416:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b418:	f1c3 0301 	rsb	r3, r3, #1
 800b41c:	9315      	str	r3, [sp, #84]	; 0x54
 800b41e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b420:	2b00      	cmp	r3, #0
 800b422:	d0f0      	beq.n	800b406 <__gethex+0x386>
 800b424:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b428:	f104 0314 	add.w	r3, r4, #20
 800b42c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b430:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b434:	f04f 0c00 	mov.w	ip, #0
 800b438:	4618      	mov	r0, r3
 800b43a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b43e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b442:	d01c      	beq.n	800b47e <__gethex+0x3fe>
 800b444:	3201      	adds	r2, #1
 800b446:	6002      	str	r2, [r0, #0]
 800b448:	2f02      	cmp	r7, #2
 800b44a:	f104 0314 	add.w	r3, r4, #20
 800b44e:	d13f      	bne.n	800b4d0 <__gethex+0x450>
 800b450:	f8d8 2000 	ldr.w	r2, [r8]
 800b454:	3a01      	subs	r2, #1
 800b456:	42b2      	cmp	r2, r6
 800b458:	d10a      	bne.n	800b470 <__gethex+0x3f0>
 800b45a:	1171      	asrs	r1, r6, #5
 800b45c:	2201      	movs	r2, #1
 800b45e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b462:	f006 061f 	and.w	r6, r6, #31
 800b466:	fa02 f606 	lsl.w	r6, r2, r6
 800b46a:	421e      	tst	r6, r3
 800b46c:	bf18      	it	ne
 800b46e:	4617      	movne	r7, r2
 800b470:	f047 0720 	orr.w	r7, r7, #32
 800b474:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b476:	601c      	str	r4, [r3, #0]
 800b478:	9b04      	ldr	r3, [sp, #16]
 800b47a:	601d      	str	r5, [r3, #0]
 800b47c:	e695      	b.n	800b1aa <__gethex+0x12a>
 800b47e:	4299      	cmp	r1, r3
 800b480:	f843 cc04 	str.w	ip, [r3, #-4]
 800b484:	d8d8      	bhi.n	800b438 <__gethex+0x3b8>
 800b486:	68a3      	ldr	r3, [r4, #8]
 800b488:	459b      	cmp	fp, r3
 800b48a:	db19      	blt.n	800b4c0 <__gethex+0x440>
 800b48c:	6861      	ldr	r1, [r4, #4]
 800b48e:	ee18 0a10 	vmov	r0, s16
 800b492:	3101      	adds	r1, #1
 800b494:	f000 f938 	bl	800b708 <_Balloc>
 800b498:	4681      	mov	r9, r0
 800b49a:	b918      	cbnz	r0, 800b4a4 <__gethex+0x424>
 800b49c:	4b1a      	ldr	r3, [pc, #104]	; (800b508 <__gethex+0x488>)
 800b49e:	4602      	mov	r2, r0
 800b4a0:	2184      	movs	r1, #132	; 0x84
 800b4a2:	e6a8      	b.n	800b1f6 <__gethex+0x176>
 800b4a4:	6922      	ldr	r2, [r4, #16]
 800b4a6:	3202      	adds	r2, #2
 800b4a8:	f104 010c 	add.w	r1, r4, #12
 800b4ac:	0092      	lsls	r2, r2, #2
 800b4ae:	300c      	adds	r0, #12
 800b4b0:	f7fc ff67 	bl	8008382 <memcpy>
 800b4b4:	4621      	mov	r1, r4
 800b4b6:	ee18 0a10 	vmov	r0, s16
 800b4ba:	f000 f965 	bl	800b788 <_Bfree>
 800b4be:	464c      	mov	r4, r9
 800b4c0:	6923      	ldr	r3, [r4, #16]
 800b4c2:	1c5a      	adds	r2, r3, #1
 800b4c4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b4c8:	6122      	str	r2, [r4, #16]
 800b4ca:	2201      	movs	r2, #1
 800b4cc:	615a      	str	r2, [r3, #20]
 800b4ce:	e7bb      	b.n	800b448 <__gethex+0x3c8>
 800b4d0:	6922      	ldr	r2, [r4, #16]
 800b4d2:	455a      	cmp	r2, fp
 800b4d4:	dd0b      	ble.n	800b4ee <__gethex+0x46e>
 800b4d6:	2101      	movs	r1, #1
 800b4d8:	4620      	mov	r0, r4
 800b4da:	f7ff fd69 	bl	800afb0 <rshift>
 800b4de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4e2:	3501      	adds	r5, #1
 800b4e4:	42ab      	cmp	r3, r5
 800b4e6:	f6ff aed0 	blt.w	800b28a <__gethex+0x20a>
 800b4ea:	2701      	movs	r7, #1
 800b4ec:	e7c0      	b.n	800b470 <__gethex+0x3f0>
 800b4ee:	f016 061f 	ands.w	r6, r6, #31
 800b4f2:	d0fa      	beq.n	800b4ea <__gethex+0x46a>
 800b4f4:	4453      	add	r3, sl
 800b4f6:	f1c6 0620 	rsb	r6, r6, #32
 800b4fa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b4fe:	f000 f9f5 	bl	800b8ec <__hi0bits>
 800b502:	42b0      	cmp	r0, r6
 800b504:	dbe7      	blt.n	800b4d6 <__gethex+0x456>
 800b506:	e7f0      	b.n	800b4ea <__gethex+0x46a>
 800b508:	0800cf80 	.word	0x0800cf80

0800b50c <L_shift>:
 800b50c:	f1c2 0208 	rsb	r2, r2, #8
 800b510:	0092      	lsls	r2, r2, #2
 800b512:	b570      	push	{r4, r5, r6, lr}
 800b514:	f1c2 0620 	rsb	r6, r2, #32
 800b518:	6843      	ldr	r3, [r0, #4]
 800b51a:	6804      	ldr	r4, [r0, #0]
 800b51c:	fa03 f506 	lsl.w	r5, r3, r6
 800b520:	432c      	orrs	r4, r5
 800b522:	40d3      	lsrs	r3, r2
 800b524:	6004      	str	r4, [r0, #0]
 800b526:	f840 3f04 	str.w	r3, [r0, #4]!
 800b52a:	4288      	cmp	r0, r1
 800b52c:	d3f4      	bcc.n	800b518 <L_shift+0xc>
 800b52e:	bd70      	pop	{r4, r5, r6, pc}

0800b530 <__match>:
 800b530:	b530      	push	{r4, r5, lr}
 800b532:	6803      	ldr	r3, [r0, #0]
 800b534:	3301      	adds	r3, #1
 800b536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b53a:	b914      	cbnz	r4, 800b542 <__match+0x12>
 800b53c:	6003      	str	r3, [r0, #0]
 800b53e:	2001      	movs	r0, #1
 800b540:	bd30      	pop	{r4, r5, pc}
 800b542:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b546:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b54a:	2d19      	cmp	r5, #25
 800b54c:	bf98      	it	ls
 800b54e:	3220      	addls	r2, #32
 800b550:	42a2      	cmp	r2, r4
 800b552:	d0f0      	beq.n	800b536 <__match+0x6>
 800b554:	2000      	movs	r0, #0
 800b556:	e7f3      	b.n	800b540 <__match+0x10>

0800b558 <__hexnan>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	680b      	ldr	r3, [r1, #0]
 800b55e:	115e      	asrs	r6, r3, #5
 800b560:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b564:	f013 031f 	ands.w	r3, r3, #31
 800b568:	b087      	sub	sp, #28
 800b56a:	bf18      	it	ne
 800b56c:	3604      	addne	r6, #4
 800b56e:	2500      	movs	r5, #0
 800b570:	1f37      	subs	r7, r6, #4
 800b572:	4690      	mov	r8, r2
 800b574:	6802      	ldr	r2, [r0, #0]
 800b576:	9301      	str	r3, [sp, #4]
 800b578:	4682      	mov	sl, r0
 800b57a:	f846 5c04 	str.w	r5, [r6, #-4]
 800b57e:	46b9      	mov	r9, r7
 800b580:	463c      	mov	r4, r7
 800b582:	9502      	str	r5, [sp, #8]
 800b584:	46ab      	mov	fp, r5
 800b586:	7851      	ldrb	r1, [r2, #1]
 800b588:	1c53      	adds	r3, r2, #1
 800b58a:	9303      	str	r3, [sp, #12]
 800b58c:	b341      	cbz	r1, 800b5e0 <__hexnan+0x88>
 800b58e:	4608      	mov	r0, r1
 800b590:	9205      	str	r2, [sp, #20]
 800b592:	9104      	str	r1, [sp, #16]
 800b594:	f7ff fd5e 	bl	800b054 <__hexdig_fun>
 800b598:	2800      	cmp	r0, #0
 800b59a:	d14f      	bne.n	800b63c <__hexnan+0xe4>
 800b59c:	9904      	ldr	r1, [sp, #16]
 800b59e:	9a05      	ldr	r2, [sp, #20]
 800b5a0:	2920      	cmp	r1, #32
 800b5a2:	d818      	bhi.n	800b5d6 <__hexnan+0x7e>
 800b5a4:	9b02      	ldr	r3, [sp, #8]
 800b5a6:	459b      	cmp	fp, r3
 800b5a8:	dd13      	ble.n	800b5d2 <__hexnan+0x7a>
 800b5aa:	454c      	cmp	r4, r9
 800b5ac:	d206      	bcs.n	800b5bc <__hexnan+0x64>
 800b5ae:	2d07      	cmp	r5, #7
 800b5b0:	dc04      	bgt.n	800b5bc <__hexnan+0x64>
 800b5b2:	462a      	mov	r2, r5
 800b5b4:	4649      	mov	r1, r9
 800b5b6:	4620      	mov	r0, r4
 800b5b8:	f7ff ffa8 	bl	800b50c <L_shift>
 800b5bc:	4544      	cmp	r4, r8
 800b5be:	d950      	bls.n	800b662 <__hexnan+0x10a>
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	f1a4 0904 	sub.w	r9, r4, #4
 800b5c6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b5ca:	f8cd b008 	str.w	fp, [sp, #8]
 800b5ce:	464c      	mov	r4, r9
 800b5d0:	461d      	mov	r5, r3
 800b5d2:	9a03      	ldr	r2, [sp, #12]
 800b5d4:	e7d7      	b.n	800b586 <__hexnan+0x2e>
 800b5d6:	2929      	cmp	r1, #41	; 0x29
 800b5d8:	d156      	bne.n	800b688 <__hexnan+0x130>
 800b5da:	3202      	adds	r2, #2
 800b5dc:	f8ca 2000 	str.w	r2, [sl]
 800b5e0:	f1bb 0f00 	cmp.w	fp, #0
 800b5e4:	d050      	beq.n	800b688 <__hexnan+0x130>
 800b5e6:	454c      	cmp	r4, r9
 800b5e8:	d206      	bcs.n	800b5f8 <__hexnan+0xa0>
 800b5ea:	2d07      	cmp	r5, #7
 800b5ec:	dc04      	bgt.n	800b5f8 <__hexnan+0xa0>
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	4649      	mov	r1, r9
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	f7ff ff8a 	bl	800b50c <L_shift>
 800b5f8:	4544      	cmp	r4, r8
 800b5fa:	d934      	bls.n	800b666 <__hexnan+0x10e>
 800b5fc:	f1a8 0204 	sub.w	r2, r8, #4
 800b600:	4623      	mov	r3, r4
 800b602:	f853 1b04 	ldr.w	r1, [r3], #4
 800b606:	f842 1f04 	str.w	r1, [r2, #4]!
 800b60a:	429f      	cmp	r7, r3
 800b60c:	d2f9      	bcs.n	800b602 <__hexnan+0xaa>
 800b60e:	1b3b      	subs	r3, r7, r4
 800b610:	f023 0303 	bic.w	r3, r3, #3
 800b614:	3304      	adds	r3, #4
 800b616:	3401      	adds	r4, #1
 800b618:	3e03      	subs	r6, #3
 800b61a:	42b4      	cmp	r4, r6
 800b61c:	bf88      	it	hi
 800b61e:	2304      	movhi	r3, #4
 800b620:	4443      	add	r3, r8
 800b622:	2200      	movs	r2, #0
 800b624:	f843 2b04 	str.w	r2, [r3], #4
 800b628:	429f      	cmp	r7, r3
 800b62a:	d2fb      	bcs.n	800b624 <__hexnan+0xcc>
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	b91b      	cbnz	r3, 800b638 <__hexnan+0xe0>
 800b630:	4547      	cmp	r7, r8
 800b632:	d127      	bne.n	800b684 <__hexnan+0x12c>
 800b634:	2301      	movs	r3, #1
 800b636:	603b      	str	r3, [r7, #0]
 800b638:	2005      	movs	r0, #5
 800b63a:	e026      	b.n	800b68a <__hexnan+0x132>
 800b63c:	3501      	adds	r5, #1
 800b63e:	2d08      	cmp	r5, #8
 800b640:	f10b 0b01 	add.w	fp, fp, #1
 800b644:	dd06      	ble.n	800b654 <__hexnan+0xfc>
 800b646:	4544      	cmp	r4, r8
 800b648:	d9c3      	bls.n	800b5d2 <__hexnan+0x7a>
 800b64a:	2300      	movs	r3, #0
 800b64c:	f844 3c04 	str.w	r3, [r4, #-4]
 800b650:	2501      	movs	r5, #1
 800b652:	3c04      	subs	r4, #4
 800b654:	6822      	ldr	r2, [r4, #0]
 800b656:	f000 000f 	and.w	r0, r0, #15
 800b65a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b65e:	6022      	str	r2, [r4, #0]
 800b660:	e7b7      	b.n	800b5d2 <__hexnan+0x7a>
 800b662:	2508      	movs	r5, #8
 800b664:	e7b5      	b.n	800b5d2 <__hexnan+0x7a>
 800b666:	9b01      	ldr	r3, [sp, #4]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d0df      	beq.n	800b62c <__hexnan+0xd4>
 800b66c:	f04f 32ff 	mov.w	r2, #4294967295
 800b670:	f1c3 0320 	rsb	r3, r3, #32
 800b674:	fa22 f303 	lsr.w	r3, r2, r3
 800b678:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b67c:	401a      	ands	r2, r3
 800b67e:	f846 2c04 	str.w	r2, [r6, #-4]
 800b682:	e7d3      	b.n	800b62c <__hexnan+0xd4>
 800b684:	3f04      	subs	r7, #4
 800b686:	e7d1      	b.n	800b62c <__hexnan+0xd4>
 800b688:	2004      	movs	r0, #4
 800b68a:	b007      	add	sp, #28
 800b68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b690 <_localeconv_r>:
 800b690:	4800      	ldr	r0, [pc, #0]	; (800b694 <_localeconv_r+0x4>)
 800b692:	4770      	bx	lr
 800b694:	20000350 	.word	0x20000350

0800b698 <_lseek_r>:
 800b698:	b538      	push	{r3, r4, r5, lr}
 800b69a:	4d07      	ldr	r5, [pc, #28]	; (800b6b8 <_lseek_r+0x20>)
 800b69c:	4604      	mov	r4, r0
 800b69e:	4608      	mov	r0, r1
 800b6a0:	4611      	mov	r1, r2
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	602a      	str	r2, [r5, #0]
 800b6a6:	461a      	mov	r2, r3
 800b6a8:	f7f7 fc2c 	bl	8002f04 <_lseek>
 800b6ac:	1c43      	adds	r3, r0, #1
 800b6ae:	d102      	bne.n	800b6b6 <_lseek_r+0x1e>
 800b6b0:	682b      	ldr	r3, [r5, #0]
 800b6b2:	b103      	cbz	r3, 800b6b6 <_lseek_r+0x1e>
 800b6b4:	6023      	str	r3, [r4, #0]
 800b6b6:	bd38      	pop	{r3, r4, r5, pc}
 800b6b8:	20004f74 	.word	0x20004f74

0800b6bc <malloc>:
 800b6bc:	4b02      	ldr	r3, [pc, #8]	; (800b6c8 <malloc+0xc>)
 800b6be:	4601      	mov	r1, r0
 800b6c0:	6818      	ldr	r0, [r3, #0]
 800b6c2:	f7fc be95 	b.w	80083f0 <_malloc_r>
 800b6c6:	bf00      	nop
 800b6c8:	200001f8 	.word	0x200001f8

0800b6cc <__ascii_mbtowc>:
 800b6cc:	b082      	sub	sp, #8
 800b6ce:	b901      	cbnz	r1, 800b6d2 <__ascii_mbtowc+0x6>
 800b6d0:	a901      	add	r1, sp, #4
 800b6d2:	b142      	cbz	r2, 800b6e6 <__ascii_mbtowc+0x1a>
 800b6d4:	b14b      	cbz	r3, 800b6ea <__ascii_mbtowc+0x1e>
 800b6d6:	7813      	ldrb	r3, [r2, #0]
 800b6d8:	600b      	str	r3, [r1, #0]
 800b6da:	7812      	ldrb	r2, [r2, #0]
 800b6dc:	1e10      	subs	r0, r2, #0
 800b6de:	bf18      	it	ne
 800b6e0:	2001      	movne	r0, #1
 800b6e2:	b002      	add	sp, #8
 800b6e4:	4770      	bx	lr
 800b6e6:	4610      	mov	r0, r2
 800b6e8:	e7fb      	b.n	800b6e2 <__ascii_mbtowc+0x16>
 800b6ea:	f06f 0001 	mvn.w	r0, #1
 800b6ee:	e7f8      	b.n	800b6e2 <__ascii_mbtowc+0x16>

0800b6f0 <__malloc_lock>:
 800b6f0:	4801      	ldr	r0, [pc, #4]	; (800b6f8 <__malloc_lock+0x8>)
 800b6f2:	f7fc be44 	b.w	800837e <__retarget_lock_acquire_recursive>
 800b6f6:	bf00      	nop
 800b6f8:	20004f68 	.word	0x20004f68

0800b6fc <__malloc_unlock>:
 800b6fc:	4801      	ldr	r0, [pc, #4]	; (800b704 <__malloc_unlock+0x8>)
 800b6fe:	f7fc be3f 	b.w	8008380 <__retarget_lock_release_recursive>
 800b702:	bf00      	nop
 800b704:	20004f68 	.word	0x20004f68

0800b708 <_Balloc>:
 800b708:	b570      	push	{r4, r5, r6, lr}
 800b70a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b70c:	4604      	mov	r4, r0
 800b70e:	460d      	mov	r5, r1
 800b710:	b976      	cbnz	r6, 800b730 <_Balloc+0x28>
 800b712:	2010      	movs	r0, #16
 800b714:	f7ff ffd2 	bl	800b6bc <malloc>
 800b718:	4602      	mov	r2, r0
 800b71a:	6260      	str	r0, [r4, #36]	; 0x24
 800b71c:	b920      	cbnz	r0, 800b728 <_Balloc+0x20>
 800b71e:	4b18      	ldr	r3, [pc, #96]	; (800b780 <_Balloc+0x78>)
 800b720:	4818      	ldr	r0, [pc, #96]	; (800b784 <_Balloc+0x7c>)
 800b722:	2166      	movs	r1, #102	; 0x66
 800b724:	f000 feae 	bl	800c484 <__assert_func>
 800b728:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b72c:	6006      	str	r6, [r0, #0]
 800b72e:	60c6      	str	r6, [r0, #12]
 800b730:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b732:	68f3      	ldr	r3, [r6, #12]
 800b734:	b183      	cbz	r3, 800b758 <_Balloc+0x50>
 800b736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b738:	68db      	ldr	r3, [r3, #12]
 800b73a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b73e:	b9b8      	cbnz	r0, 800b770 <_Balloc+0x68>
 800b740:	2101      	movs	r1, #1
 800b742:	fa01 f605 	lsl.w	r6, r1, r5
 800b746:	1d72      	adds	r2, r6, #5
 800b748:	0092      	lsls	r2, r2, #2
 800b74a:	4620      	mov	r0, r4
 800b74c:	f000 fc9d 	bl	800c08a <_calloc_r>
 800b750:	b160      	cbz	r0, 800b76c <_Balloc+0x64>
 800b752:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b756:	e00e      	b.n	800b776 <_Balloc+0x6e>
 800b758:	2221      	movs	r2, #33	; 0x21
 800b75a:	2104      	movs	r1, #4
 800b75c:	4620      	mov	r0, r4
 800b75e:	f000 fc94 	bl	800c08a <_calloc_r>
 800b762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b764:	60f0      	str	r0, [r6, #12]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d1e4      	bne.n	800b736 <_Balloc+0x2e>
 800b76c:	2000      	movs	r0, #0
 800b76e:	bd70      	pop	{r4, r5, r6, pc}
 800b770:	6802      	ldr	r2, [r0, #0]
 800b772:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b776:	2300      	movs	r3, #0
 800b778:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b77c:	e7f7      	b.n	800b76e <_Balloc+0x66>
 800b77e:	bf00      	nop
 800b780:	0800cf0e 	.word	0x0800cf0e
 800b784:	0800d00c 	.word	0x0800d00c

0800b788 <_Bfree>:
 800b788:	b570      	push	{r4, r5, r6, lr}
 800b78a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b78c:	4605      	mov	r5, r0
 800b78e:	460c      	mov	r4, r1
 800b790:	b976      	cbnz	r6, 800b7b0 <_Bfree+0x28>
 800b792:	2010      	movs	r0, #16
 800b794:	f7ff ff92 	bl	800b6bc <malloc>
 800b798:	4602      	mov	r2, r0
 800b79a:	6268      	str	r0, [r5, #36]	; 0x24
 800b79c:	b920      	cbnz	r0, 800b7a8 <_Bfree+0x20>
 800b79e:	4b09      	ldr	r3, [pc, #36]	; (800b7c4 <_Bfree+0x3c>)
 800b7a0:	4809      	ldr	r0, [pc, #36]	; (800b7c8 <_Bfree+0x40>)
 800b7a2:	218a      	movs	r1, #138	; 0x8a
 800b7a4:	f000 fe6e 	bl	800c484 <__assert_func>
 800b7a8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b7ac:	6006      	str	r6, [r0, #0]
 800b7ae:	60c6      	str	r6, [r0, #12]
 800b7b0:	b13c      	cbz	r4, 800b7c2 <_Bfree+0x3a>
 800b7b2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b7b4:	6862      	ldr	r2, [r4, #4]
 800b7b6:	68db      	ldr	r3, [r3, #12]
 800b7b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b7bc:	6021      	str	r1, [r4, #0]
 800b7be:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b7c2:	bd70      	pop	{r4, r5, r6, pc}
 800b7c4:	0800cf0e 	.word	0x0800cf0e
 800b7c8:	0800d00c 	.word	0x0800d00c

0800b7cc <__multadd>:
 800b7cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7d0:	690d      	ldr	r5, [r1, #16]
 800b7d2:	4607      	mov	r7, r0
 800b7d4:	460c      	mov	r4, r1
 800b7d6:	461e      	mov	r6, r3
 800b7d8:	f101 0c14 	add.w	ip, r1, #20
 800b7dc:	2000      	movs	r0, #0
 800b7de:	f8dc 3000 	ldr.w	r3, [ip]
 800b7e2:	b299      	uxth	r1, r3
 800b7e4:	fb02 6101 	mla	r1, r2, r1, r6
 800b7e8:	0c1e      	lsrs	r6, r3, #16
 800b7ea:	0c0b      	lsrs	r3, r1, #16
 800b7ec:	fb02 3306 	mla	r3, r2, r6, r3
 800b7f0:	b289      	uxth	r1, r1
 800b7f2:	3001      	adds	r0, #1
 800b7f4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b7f8:	4285      	cmp	r5, r0
 800b7fa:	f84c 1b04 	str.w	r1, [ip], #4
 800b7fe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b802:	dcec      	bgt.n	800b7de <__multadd+0x12>
 800b804:	b30e      	cbz	r6, 800b84a <__multadd+0x7e>
 800b806:	68a3      	ldr	r3, [r4, #8]
 800b808:	42ab      	cmp	r3, r5
 800b80a:	dc19      	bgt.n	800b840 <__multadd+0x74>
 800b80c:	6861      	ldr	r1, [r4, #4]
 800b80e:	4638      	mov	r0, r7
 800b810:	3101      	adds	r1, #1
 800b812:	f7ff ff79 	bl	800b708 <_Balloc>
 800b816:	4680      	mov	r8, r0
 800b818:	b928      	cbnz	r0, 800b826 <__multadd+0x5a>
 800b81a:	4602      	mov	r2, r0
 800b81c:	4b0c      	ldr	r3, [pc, #48]	; (800b850 <__multadd+0x84>)
 800b81e:	480d      	ldr	r0, [pc, #52]	; (800b854 <__multadd+0x88>)
 800b820:	21b5      	movs	r1, #181	; 0xb5
 800b822:	f000 fe2f 	bl	800c484 <__assert_func>
 800b826:	6922      	ldr	r2, [r4, #16]
 800b828:	3202      	adds	r2, #2
 800b82a:	f104 010c 	add.w	r1, r4, #12
 800b82e:	0092      	lsls	r2, r2, #2
 800b830:	300c      	adds	r0, #12
 800b832:	f7fc fda6 	bl	8008382 <memcpy>
 800b836:	4621      	mov	r1, r4
 800b838:	4638      	mov	r0, r7
 800b83a:	f7ff ffa5 	bl	800b788 <_Bfree>
 800b83e:	4644      	mov	r4, r8
 800b840:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b844:	3501      	adds	r5, #1
 800b846:	615e      	str	r6, [r3, #20]
 800b848:	6125      	str	r5, [r4, #16]
 800b84a:	4620      	mov	r0, r4
 800b84c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b850:	0800cf80 	.word	0x0800cf80
 800b854:	0800d00c 	.word	0x0800d00c

0800b858 <__s2b>:
 800b858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b85c:	460c      	mov	r4, r1
 800b85e:	4615      	mov	r5, r2
 800b860:	461f      	mov	r7, r3
 800b862:	2209      	movs	r2, #9
 800b864:	3308      	adds	r3, #8
 800b866:	4606      	mov	r6, r0
 800b868:	fb93 f3f2 	sdiv	r3, r3, r2
 800b86c:	2100      	movs	r1, #0
 800b86e:	2201      	movs	r2, #1
 800b870:	429a      	cmp	r2, r3
 800b872:	db09      	blt.n	800b888 <__s2b+0x30>
 800b874:	4630      	mov	r0, r6
 800b876:	f7ff ff47 	bl	800b708 <_Balloc>
 800b87a:	b940      	cbnz	r0, 800b88e <__s2b+0x36>
 800b87c:	4602      	mov	r2, r0
 800b87e:	4b19      	ldr	r3, [pc, #100]	; (800b8e4 <__s2b+0x8c>)
 800b880:	4819      	ldr	r0, [pc, #100]	; (800b8e8 <__s2b+0x90>)
 800b882:	21ce      	movs	r1, #206	; 0xce
 800b884:	f000 fdfe 	bl	800c484 <__assert_func>
 800b888:	0052      	lsls	r2, r2, #1
 800b88a:	3101      	adds	r1, #1
 800b88c:	e7f0      	b.n	800b870 <__s2b+0x18>
 800b88e:	9b08      	ldr	r3, [sp, #32]
 800b890:	6143      	str	r3, [r0, #20]
 800b892:	2d09      	cmp	r5, #9
 800b894:	f04f 0301 	mov.w	r3, #1
 800b898:	6103      	str	r3, [r0, #16]
 800b89a:	dd16      	ble.n	800b8ca <__s2b+0x72>
 800b89c:	f104 0909 	add.w	r9, r4, #9
 800b8a0:	46c8      	mov	r8, r9
 800b8a2:	442c      	add	r4, r5
 800b8a4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b8a8:	4601      	mov	r1, r0
 800b8aa:	3b30      	subs	r3, #48	; 0x30
 800b8ac:	220a      	movs	r2, #10
 800b8ae:	4630      	mov	r0, r6
 800b8b0:	f7ff ff8c 	bl	800b7cc <__multadd>
 800b8b4:	45a0      	cmp	r8, r4
 800b8b6:	d1f5      	bne.n	800b8a4 <__s2b+0x4c>
 800b8b8:	f1a5 0408 	sub.w	r4, r5, #8
 800b8bc:	444c      	add	r4, r9
 800b8be:	1b2d      	subs	r5, r5, r4
 800b8c0:	1963      	adds	r3, r4, r5
 800b8c2:	42bb      	cmp	r3, r7
 800b8c4:	db04      	blt.n	800b8d0 <__s2b+0x78>
 800b8c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b8ca:	340a      	adds	r4, #10
 800b8cc:	2509      	movs	r5, #9
 800b8ce:	e7f6      	b.n	800b8be <__s2b+0x66>
 800b8d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b8d4:	4601      	mov	r1, r0
 800b8d6:	3b30      	subs	r3, #48	; 0x30
 800b8d8:	220a      	movs	r2, #10
 800b8da:	4630      	mov	r0, r6
 800b8dc:	f7ff ff76 	bl	800b7cc <__multadd>
 800b8e0:	e7ee      	b.n	800b8c0 <__s2b+0x68>
 800b8e2:	bf00      	nop
 800b8e4:	0800cf80 	.word	0x0800cf80
 800b8e8:	0800d00c 	.word	0x0800d00c

0800b8ec <__hi0bits>:
 800b8ec:	0c03      	lsrs	r3, r0, #16
 800b8ee:	041b      	lsls	r3, r3, #16
 800b8f0:	b9d3      	cbnz	r3, 800b928 <__hi0bits+0x3c>
 800b8f2:	0400      	lsls	r0, r0, #16
 800b8f4:	2310      	movs	r3, #16
 800b8f6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b8fa:	bf04      	itt	eq
 800b8fc:	0200      	lsleq	r0, r0, #8
 800b8fe:	3308      	addeq	r3, #8
 800b900:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b904:	bf04      	itt	eq
 800b906:	0100      	lsleq	r0, r0, #4
 800b908:	3304      	addeq	r3, #4
 800b90a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b90e:	bf04      	itt	eq
 800b910:	0080      	lsleq	r0, r0, #2
 800b912:	3302      	addeq	r3, #2
 800b914:	2800      	cmp	r0, #0
 800b916:	db05      	blt.n	800b924 <__hi0bits+0x38>
 800b918:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b91c:	f103 0301 	add.w	r3, r3, #1
 800b920:	bf08      	it	eq
 800b922:	2320      	moveq	r3, #32
 800b924:	4618      	mov	r0, r3
 800b926:	4770      	bx	lr
 800b928:	2300      	movs	r3, #0
 800b92a:	e7e4      	b.n	800b8f6 <__hi0bits+0xa>

0800b92c <__lo0bits>:
 800b92c:	6803      	ldr	r3, [r0, #0]
 800b92e:	f013 0207 	ands.w	r2, r3, #7
 800b932:	4601      	mov	r1, r0
 800b934:	d00b      	beq.n	800b94e <__lo0bits+0x22>
 800b936:	07da      	lsls	r2, r3, #31
 800b938:	d423      	bmi.n	800b982 <__lo0bits+0x56>
 800b93a:	0798      	lsls	r0, r3, #30
 800b93c:	bf49      	itett	mi
 800b93e:	085b      	lsrmi	r3, r3, #1
 800b940:	089b      	lsrpl	r3, r3, #2
 800b942:	2001      	movmi	r0, #1
 800b944:	600b      	strmi	r3, [r1, #0]
 800b946:	bf5c      	itt	pl
 800b948:	600b      	strpl	r3, [r1, #0]
 800b94a:	2002      	movpl	r0, #2
 800b94c:	4770      	bx	lr
 800b94e:	b298      	uxth	r0, r3
 800b950:	b9a8      	cbnz	r0, 800b97e <__lo0bits+0x52>
 800b952:	0c1b      	lsrs	r3, r3, #16
 800b954:	2010      	movs	r0, #16
 800b956:	b2da      	uxtb	r2, r3
 800b958:	b90a      	cbnz	r2, 800b95e <__lo0bits+0x32>
 800b95a:	3008      	adds	r0, #8
 800b95c:	0a1b      	lsrs	r3, r3, #8
 800b95e:	071a      	lsls	r2, r3, #28
 800b960:	bf04      	itt	eq
 800b962:	091b      	lsreq	r3, r3, #4
 800b964:	3004      	addeq	r0, #4
 800b966:	079a      	lsls	r2, r3, #30
 800b968:	bf04      	itt	eq
 800b96a:	089b      	lsreq	r3, r3, #2
 800b96c:	3002      	addeq	r0, #2
 800b96e:	07da      	lsls	r2, r3, #31
 800b970:	d403      	bmi.n	800b97a <__lo0bits+0x4e>
 800b972:	085b      	lsrs	r3, r3, #1
 800b974:	f100 0001 	add.w	r0, r0, #1
 800b978:	d005      	beq.n	800b986 <__lo0bits+0x5a>
 800b97a:	600b      	str	r3, [r1, #0]
 800b97c:	4770      	bx	lr
 800b97e:	4610      	mov	r0, r2
 800b980:	e7e9      	b.n	800b956 <__lo0bits+0x2a>
 800b982:	2000      	movs	r0, #0
 800b984:	4770      	bx	lr
 800b986:	2020      	movs	r0, #32
 800b988:	4770      	bx	lr
	...

0800b98c <__i2b>:
 800b98c:	b510      	push	{r4, lr}
 800b98e:	460c      	mov	r4, r1
 800b990:	2101      	movs	r1, #1
 800b992:	f7ff feb9 	bl	800b708 <_Balloc>
 800b996:	4602      	mov	r2, r0
 800b998:	b928      	cbnz	r0, 800b9a6 <__i2b+0x1a>
 800b99a:	4b05      	ldr	r3, [pc, #20]	; (800b9b0 <__i2b+0x24>)
 800b99c:	4805      	ldr	r0, [pc, #20]	; (800b9b4 <__i2b+0x28>)
 800b99e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b9a2:	f000 fd6f 	bl	800c484 <__assert_func>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	6144      	str	r4, [r0, #20]
 800b9aa:	6103      	str	r3, [r0, #16]
 800b9ac:	bd10      	pop	{r4, pc}
 800b9ae:	bf00      	nop
 800b9b0:	0800cf80 	.word	0x0800cf80
 800b9b4:	0800d00c 	.word	0x0800d00c

0800b9b8 <__multiply>:
 800b9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9bc:	4691      	mov	r9, r2
 800b9be:	690a      	ldr	r2, [r1, #16]
 800b9c0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b9c4:	429a      	cmp	r2, r3
 800b9c6:	bfb8      	it	lt
 800b9c8:	460b      	movlt	r3, r1
 800b9ca:	460c      	mov	r4, r1
 800b9cc:	bfbc      	itt	lt
 800b9ce:	464c      	movlt	r4, r9
 800b9d0:	4699      	movlt	r9, r3
 800b9d2:	6927      	ldr	r7, [r4, #16]
 800b9d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b9d8:	68a3      	ldr	r3, [r4, #8]
 800b9da:	6861      	ldr	r1, [r4, #4]
 800b9dc:	eb07 060a 	add.w	r6, r7, sl
 800b9e0:	42b3      	cmp	r3, r6
 800b9e2:	b085      	sub	sp, #20
 800b9e4:	bfb8      	it	lt
 800b9e6:	3101      	addlt	r1, #1
 800b9e8:	f7ff fe8e 	bl	800b708 <_Balloc>
 800b9ec:	b930      	cbnz	r0, 800b9fc <__multiply+0x44>
 800b9ee:	4602      	mov	r2, r0
 800b9f0:	4b44      	ldr	r3, [pc, #272]	; (800bb04 <__multiply+0x14c>)
 800b9f2:	4845      	ldr	r0, [pc, #276]	; (800bb08 <__multiply+0x150>)
 800b9f4:	f240 115d 	movw	r1, #349	; 0x15d
 800b9f8:	f000 fd44 	bl	800c484 <__assert_func>
 800b9fc:	f100 0514 	add.w	r5, r0, #20
 800ba00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ba04:	462b      	mov	r3, r5
 800ba06:	2200      	movs	r2, #0
 800ba08:	4543      	cmp	r3, r8
 800ba0a:	d321      	bcc.n	800ba50 <__multiply+0x98>
 800ba0c:	f104 0314 	add.w	r3, r4, #20
 800ba10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ba14:	f109 0314 	add.w	r3, r9, #20
 800ba18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ba1c:	9202      	str	r2, [sp, #8]
 800ba1e:	1b3a      	subs	r2, r7, r4
 800ba20:	3a15      	subs	r2, #21
 800ba22:	f022 0203 	bic.w	r2, r2, #3
 800ba26:	3204      	adds	r2, #4
 800ba28:	f104 0115 	add.w	r1, r4, #21
 800ba2c:	428f      	cmp	r7, r1
 800ba2e:	bf38      	it	cc
 800ba30:	2204      	movcc	r2, #4
 800ba32:	9201      	str	r2, [sp, #4]
 800ba34:	9a02      	ldr	r2, [sp, #8]
 800ba36:	9303      	str	r3, [sp, #12]
 800ba38:	429a      	cmp	r2, r3
 800ba3a:	d80c      	bhi.n	800ba56 <__multiply+0x9e>
 800ba3c:	2e00      	cmp	r6, #0
 800ba3e:	dd03      	ble.n	800ba48 <__multiply+0x90>
 800ba40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d05a      	beq.n	800bafe <__multiply+0x146>
 800ba48:	6106      	str	r6, [r0, #16]
 800ba4a:	b005      	add	sp, #20
 800ba4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba50:	f843 2b04 	str.w	r2, [r3], #4
 800ba54:	e7d8      	b.n	800ba08 <__multiply+0x50>
 800ba56:	f8b3 a000 	ldrh.w	sl, [r3]
 800ba5a:	f1ba 0f00 	cmp.w	sl, #0
 800ba5e:	d024      	beq.n	800baaa <__multiply+0xf2>
 800ba60:	f104 0e14 	add.w	lr, r4, #20
 800ba64:	46a9      	mov	r9, r5
 800ba66:	f04f 0c00 	mov.w	ip, #0
 800ba6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ba6e:	f8d9 1000 	ldr.w	r1, [r9]
 800ba72:	fa1f fb82 	uxth.w	fp, r2
 800ba76:	b289      	uxth	r1, r1
 800ba78:	fb0a 110b 	mla	r1, sl, fp, r1
 800ba7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ba80:	f8d9 2000 	ldr.w	r2, [r9]
 800ba84:	4461      	add	r1, ip
 800ba86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ba8a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ba8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ba92:	b289      	uxth	r1, r1
 800ba94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ba98:	4577      	cmp	r7, lr
 800ba9a:	f849 1b04 	str.w	r1, [r9], #4
 800ba9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800baa2:	d8e2      	bhi.n	800ba6a <__multiply+0xb2>
 800baa4:	9a01      	ldr	r2, [sp, #4]
 800baa6:	f845 c002 	str.w	ip, [r5, r2]
 800baaa:	9a03      	ldr	r2, [sp, #12]
 800baac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bab0:	3304      	adds	r3, #4
 800bab2:	f1b9 0f00 	cmp.w	r9, #0
 800bab6:	d020      	beq.n	800bafa <__multiply+0x142>
 800bab8:	6829      	ldr	r1, [r5, #0]
 800baba:	f104 0c14 	add.w	ip, r4, #20
 800babe:	46ae      	mov	lr, r5
 800bac0:	f04f 0a00 	mov.w	sl, #0
 800bac4:	f8bc b000 	ldrh.w	fp, [ip]
 800bac8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bacc:	fb09 220b 	mla	r2, r9, fp, r2
 800bad0:	4492      	add	sl, r2
 800bad2:	b289      	uxth	r1, r1
 800bad4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bad8:	f84e 1b04 	str.w	r1, [lr], #4
 800badc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bae0:	f8be 1000 	ldrh.w	r1, [lr]
 800bae4:	0c12      	lsrs	r2, r2, #16
 800bae6:	fb09 1102 	mla	r1, r9, r2, r1
 800baea:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800baee:	4567      	cmp	r7, ip
 800baf0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800baf4:	d8e6      	bhi.n	800bac4 <__multiply+0x10c>
 800baf6:	9a01      	ldr	r2, [sp, #4]
 800baf8:	50a9      	str	r1, [r5, r2]
 800bafa:	3504      	adds	r5, #4
 800bafc:	e79a      	b.n	800ba34 <__multiply+0x7c>
 800bafe:	3e01      	subs	r6, #1
 800bb00:	e79c      	b.n	800ba3c <__multiply+0x84>
 800bb02:	bf00      	nop
 800bb04:	0800cf80 	.word	0x0800cf80
 800bb08:	0800d00c 	.word	0x0800d00c

0800bb0c <__pow5mult>:
 800bb0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb10:	4615      	mov	r5, r2
 800bb12:	f012 0203 	ands.w	r2, r2, #3
 800bb16:	4606      	mov	r6, r0
 800bb18:	460f      	mov	r7, r1
 800bb1a:	d007      	beq.n	800bb2c <__pow5mult+0x20>
 800bb1c:	4c25      	ldr	r4, [pc, #148]	; (800bbb4 <__pow5mult+0xa8>)
 800bb1e:	3a01      	subs	r2, #1
 800bb20:	2300      	movs	r3, #0
 800bb22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bb26:	f7ff fe51 	bl	800b7cc <__multadd>
 800bb2a:	4607      	mov	r7, r0
 800bb2c:	10ad      	asrs	r5, r5, #2
 800bb2e:	d03d      	beq.n	800bbac <__pow5mult+0xa0>
 800bb30:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bb32:	b97c      	cbnz	r4, 800bb54 <__pow5mult+0x48>
 800bb34:	2010      	movs	r0, #16
 800bb36:	f7ff fdc1 	bl	800b6bc <malloc>
 800bb3a:	4602      	mov	r2, r0
 800bb3c:	6270      	str	r0, [r6, #36]	; 0x24
 800bb3e:	b928      	cbnz	r0, 800bb4c <__pow5mult+0x40>
 800bb40:	4b1d      	ldr	r3, [pc, #116]	; (800bbb8 <__pow5mult+0xac>)
 800bb42:	481e      	ldr	r0, [pc, #120]	; (800bbbc <__pow5mult+0xb0>)
 800bb44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bb48:	f000 fc9c 	bl	800c484 <__assert_func>
 800bb4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bb50:	6004      	str	r4, [r0, #0]
 800bb52:	60c4      	str	r4, [r0, #12]
 800bb54:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bb58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bb5c:	b94c      	cbnz	r4, 800bb72 <__pow5mult+0x66>
 800bb5e:	f240 2171 	movw	r1, #625	; 0x271
 800bb62:	4630      	mov	r0, r6
 800bb64:	f7ff ff12 	bl	800b98c <__i2b>
 800bb68:	2300      	movs	r3, #0
 800bb6a:	f8c8 0008 	str.w	r0, [r8, #8]
 800bb6e:	4604      	mov	r4, r0
 800bb70:	6003      	str	r3, [r0, #0]
 800bb72:	f04f 0900 	mov.w	r9, #0
 800bb76:	07eb      	lsls	r3, r5, #31
 800bb78:	d50a      	bpl.n	800bb90 <__pow5mult+0x84>
 800bb7a:	4639      	mov	r1, r7
 800bb7c:	4622      	mov	r2, r4
 800bb7e:	4630      	mov	r0, r6
 800bb80:	f7ff ff1a 	bl	800b9b8 <__multiply>
 800bb84:	4639      	mov	r1, r7
 800bb86:	4680      	mov	r8, r0
 800bb88:	4630      	mov	r0, r6
 800bb8a:	f7ff fdfd 	bl	800b788 <_Bfree>
 800bb8e:	4647      	mov	r7, r8
 800bb90:	106d      	asrs	r5, r5, #1
 800bb92:	d00b      	beq.n	800bbac <__pow5mult+0xa0>
 800bb94:	6820      	ldr	r0, [r4, #0]
 800bb96:	b938      	cbnz	r0, 800bba8 <__pow5mult+0x9c>
 800bb98:	4622      	mov	r2, r4
 800bb9a:	4621      	mov	r1, r4
 800bb9c:	4630      	mov	r0, r6
 800bb9e:	f7ff ff0b 	bl	800b9b8 <__multiply>
 800bba2:	6020      	str	r0, [r4, #0]
 800bba4:	f8c0 9000 	str.w	r9, [r0]
 800bba8:	4604      	mov	r4, r0
 800bbaa:	e7e4      	b.n	800bb76 <__pow5mult+0x6a>
 800bbac:	4638      	mov	r0, r7
 800bbae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbb2:	bf00      	nop
 800bbb4:	0800d158 	.word	0x0800d158
 800bbb8:	0800cf0e 	.word	0x0800cf0e
 800bbbc:	0800d00c 	.word	0x0800d00c

0800bbc0 <__lshift>:
 800bbc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc4:	460c      	mov	r4, r1
 800bbc6:	6849      	ldr	r1, [r1, #4]
 800bbc8:	6923      	ldr	r3, [r4, #16]
 800bbca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bbce:	68a3      	ldr	r3, [r4, #8]
 800bbd0:	4607      	mov	r7, r0
 800bbd2:	4691      	mov	r9, r2
 800bbd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bbd8:	f108 0601 	add.w	r6, r8, #1
 800bbdc:	42b3      	cmp	r3, r6
 800bbde:	db0b      	blt.n	800bbf8 <__lshift+0x38>
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	f7ff fd91 	bl	800b708 <_Balloc>
 800bbe6:	4605      	mov	r5, r0
 800bbe8:	b948      	cbnz	r0, 800bbfe <__lshift+0x3e>
 800bbea:	4602      	mov	r2, r0
 800bbec:	4b2a      	ldr	r3, [pc, #168]	; (800bc98 <__lshift+0xd8>)
 800bbee:	482b      	ldr	r0, [pc, #172]	; (800bc9c <__lshift+0xdc>)
 800bbf0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bbf4:	f000 fc46 	bl	800c484 <__assert_func>
 800bbf8:	3101      	adds	r1, #1
 800bbfa:	005b      	lsls	r3, r3, #1
 800bbfc:	e7ee      	b.n	800bbdc <__lshift+0x1c>
 800bbfe:	2300      	movs	r3, #0
 800bc00:	f100 0114 	add.w	r1, r0, #20
 800bc04:	f100 0210 	add.w	r2, r0, #16
 800bc08:	4618      	mov	r0, r3
 800bc0a:	4553      	cmp	r3, sl
 800bc0c:	db37      	blt.n	800bc7e <__lshift+0xbe>
 800bc0e:	6920      	ldr	r0, [r4, #16]
 800bc10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc14:	f104 0314 	add.w	r3, r4, #20
 800bc18:	f019 091f 	ands.w	r9, r9, #31
 800bc1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bc20:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bc24:	d02f      	beq.n	800bc86 <__lshift+0xc6>
 800bc26:	f1c9 0e20 	rsb	lr, r9, #32
 800bc2a:	468a      	mov	sl, r1
 800bc2c:	f04f 0c00 	mov.w	ip, #0
 800bc30:	681a      	ldr	r2, [r3, #0]
 800bc32:	fa02 f209 	lsl.w	r2, r2, r9
 800bc36:	ea42 020c 	orr.w	r2, r2, ip
 800bc3a:	f84a 2b04 	str.w	r2, [sl], #4
 800bc3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc42:	4298      	cmp	r0, r3
 800bc44:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bc48:	d8f2      	bhi.n	800bc30 <__lshift+0x70>
 800bc4a:	1b03      	subs	r3, r0, r4
 800bc4c:	3b15      	subs	r3, #21
 800bc4e:	f023 0303 	bic.w	r3, r3, #3
 800bc52:	3304      	adds	r3, #4
 800bc54:	f104 0215 	add.w	r2, r4, #21
 800bc58:	4290      	cmp	r0, r2
 800bc5a:	bf38      	it	cc
 800bc5c:	2304      	movcc	r3, #4
 800bc5e:	f841 c003 	str.w	ip, [r1, r3]
 800bc62:	f1bc 0f00 	cmp.w	ip, #0
 800bc66:	d001      	beq.n	800bc6c <__lshift+0xac>
 800bc68:	f108 0602 	add.w	r6, r8, #2
 800bc6c:	3e01      	subs	r6, #1
 800bc6e:	4638      	mov	r0, r7
 800bc70:	612e      	str	r6, [r5, #16]
 800bc72:	4621      	mov	r1, r4
 800bc74:	f7ff fd88 	bl	800b788 <_Bfree>
 800bc78:	4628      	mov	r0, r5
 800bc7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc7e:	f842 0f04 	str.w	r0, [r2, #4]!
 800bc82:	3301      	adds	r3, #1
 800bc84:	e7c1      	b.n	800bc0a <__lshift+0x4a>
 800bc86:	3904      	subs	r1, #4
 800bc88:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc8c:	f841 2f04 	str.w	r2, [r1, #4]!
 800bc90:	4298      	cmp	r0, r3
 800bc92:	d8f9      	bhi.n	800bc88 <__lshift+0xc8>
 800bc94:	e7ea      	b.n	800bc6c <__lshift+0xac>
 800bc96:	bf00      	nop
 800bc98:	0800cf80 	.word	0x0800cf80
 800bc9c:	0800d00c 	.word	0x0800d00c

0800bca0 <__mcmp>:
 800bca0:	b530      	push	{r4, r5, lr}
 800bca2:	6902      	ldr	r2, [r0, #16]
 800bca4:	690c      	ldr	r4, [r1, #16]
 800bca6:	1b12      	subs	r2, r2, r4
 800bca8:	d10e      	bne.n	800bcc8 <__mcmp+0x28>
 800bcaa:	f100 0314 	add.w	r3, r0, #20
 800bcae:	3114      	adds	r1, #20
 800bcb0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bcb4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bcb8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bcbc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bcc0:	42a5      	cmp	r5, r4
 800bcc2:	d003      	beq.n	800bccc <__mcmp+0x2c>
 800bcc4:	d305      	bcc.n	800bcd2 <__mcmp+0x32>
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	4610      	mov	r0, r2
 800bcca:	bd30      	pop	{r4, r5, pc}
 800bccc:	4283      	cmp	r3, r0
 800bcce:	d3f3      	bcc.n	800bcb8 <__mcmp+0x18>
 800bcd0:	e7fa      	b.n	800bcc8 <__mcmp+0x28>
 800bcd2:	f04f 32ff 	mov.w	r2, #4294967295
 800bcd6:	e7f7      	b.n	800bcc8 <__mcmp+0x28>

0800bcd8 <__mdiff>:
 800bcd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcdc:	460c      	mov	r4, r1
 800bcde:	4606      	mov	r6, r0
 800bce0:	4611      	mov	r1, r2
 800bce2:	4620      	mov	r0, r4
 800bce4:	4690      	mov	r8, r2
 800bce6:	f7ff ffdb 	bl	800bca0 <__mcmp>
 800bcea:	1e05      	subs	r5, r0, #0
 800bcec:	d110      	bne.n	800bd10 <__mdiff+0x38>
 800bcee:	4629      	mov	r1, r5
 800bcf0:	4630      	mov	r0, r6
 800bcf2:	f7ff fd09 	bl	800b708 <_Balloc>
 800bcf6:	b930      	cbnz	r0, 800bd06 <__mdiff+0x2e>
 800bcf8:	4b3a      	ldr	r3, [pc, #232]	; (800bde4 <__mdiff+0x10c>)
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	f240 2132 	movw	r1, #562	; 0x232
 800bd00:	4839      	ldr	r0, [pc, #228]	; (800bde8 <__mdiff+0x110>)
 800bd02:	f000 fbbf 	bl	800c484 <__assert_func>
 800bd06:	2301      	movs	r3, #1
 800bd08:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bd0c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd10:	bfa4      	itt	ge
 800bd12:	4643      	movge	r3, r8
 800bd14:	46a0      	movge	r8, r4
 800bd16:	4630      	mov	r0, r6
 800bd18:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bd1c:	bfa6      	itte	ge
 800bd1e:	461c      	movge	r4, r3
 800bd20:	2500      	movge	r5, #0
 800bd22:	2501      	movlt	r5, #1
 800bd24:	f7ff fcf0 	bl	800b708 <_Balloc>
 800bd28:	b920      	cbnz	r0, 800bd34 <__mdiff+0x5c>
 800bd2a:	4b2e      	ldr	r3, [pc, #184]	; (800bde4 <__mdiff+0x10c>)
 800bd2c:	4602      	mov	r2, r0
 800bd2e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bd32:	e7e5      	b.n	800bd00 <__mdiff+0x28>
 800bd34:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bd38:	6926      	ldr	r6, [r4, #16]
 800bd3a:	60c5      	str	r5, [r0, #12]
 800bd3c:	f104 0914 	add.w	r9, r4, #20
 800bd40:	f108 0514 	add.w	r5, r8, #20
 800bd44:	f100 0e14 	add.w	lr, r0, #20
 800bd48:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bd4c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bd50:	f108 0210 	add.w	r2, r8, #16
 800bd54:	46f2      	mov	sl, lr
 800bd56:	2100      	movs	r1, #0
 800bd58:	f859 3b04 	ldr.w	r3, [r9], #4
 800bd5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bd60:	fa1f f883 	uxth.w	r8, r3
 800bd64:	fa11 f18b 	uxtah	r1, r1, fp
 800bd68:	0c1b      	lsrs	r3, r3, #16
 800bd6a:	eba1 0808 	sub.w	r8, r1, r8
 800bd6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bd72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bd76:	fa1f f888 	uxth.w	r8, r8
 800bd7a:	1419      	asrs	r1, r3, #16
 800bd7c:	454e      	cmp	r6, r9
 800bd7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bd82:	f84a 3b04 	str.w	r3, [sl], #4
 800bd86:	d8e7      	bhi.n	800bd58 <__mdiff+0x80>
 800bd88:	1b33      	subs	r3, r6, r4
 800bd8a:	3b15      	subs	r3, #21
 800bd8c:	f023 0303 	bic.w	r3, r3, #3
 800bd90:	3304      	adds	r3, #4
 800bd92:	3415      	adds	r4, #21
 800bd94:	42a6      	cmp	r6, r4
 800bd96:	bf38      	it	cc
 800bd98:	2304      	movcc	r3, #4
 800bd9a:	441d      	add	r5, r3
 800bd9c:	4473      	add	r3, lr
 800bd9e:	469e      	mov	lr, r3
 800bda0:	462e      	mov	r6, r5
 800bda2:	4566      	cmp	r6, ip
 800bda4:	d30e      	bcc.n	800bdc4 <__mdiff+0xec>
 800bda6:	f10c 0203 	add.w	r2, ip, #3
 800bdaa:	1b52      	subs	r2, r2, r5
 800bdac:	f022 0203 	bic.w	r2, r2, #3
 800bdb0:	3d03      	subs	r5, #3
 800bdb2:	45ac      	cmp	ip, r5
 800bdb4:	bf38      	it	cc
 800bdb6:	2200      	movcc	r2, #0
 800bdb8:	441a      	add	r2, r3
 800bdba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bdbe:	b17b      	cbz	r3, 800bde0 <__mdiff+0x108>
 800bdc0:	6107      	str	r7, [r0, #16]
 800bdc2:	e7a3      	b.n	800bd0c <__mdiff+0x34>
 800bdc4:	f856 8b04 	ldr.w	r8, [r6], #4
 800bdc8:	fa11 f288 	uxtah	r2, r1, r8
 800bdcc:	1414      	asrs	r4, r2, #16
 800bdce:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bdd2:	b292      	uxth	r2, r2
 800bdd4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bdd8:	f84e 2b04 	str.w	r2, [lr], #4
 800bddc:	1421      	asrs	r1, r4, #16
 800bdde:	e7e0      	b.n	800bda2 <__mdiff+0xca>
 800bde0:	3f01      	subs	r7, #1
 800bde2:	e7ea      	b.n	800bdba <__mdiff+0xe2>
 800bde4:	0800cf80 	.word	0x0800cf80
 800bde8:	0800d00c 	.word	0x0800d00c

0800bdec <__ulp>:
 800bdec:	b082      	sub	sp, #8
 800bdee:	ed8d 0b00 	vstr	d0, [sp]
 800bdf2:	9b01      	ldr	r3, [sp, #4]
 800bdf4:	4912      	ldr	r1, [pc, #72]	; (800be40 <__ulp+0x54>)
 800bdf6:	4019      	ands	r1, r3
 800bdf8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bdfc:	2900      	cmp	r1, #0
 800bdfe:	dd05      	ble.n	800be0c <__ulp+0x20>
 800be00:	2200      	movs	r2, #0
 800be02:	460b      	mov	r3, r1
 800be04:	ec43 2b10 	vmov	d0, r2, r3
 800be08:	b002      	add	sp, #8
 800be0a:	4770      	bx	lr
 800be0c:	4249      	negs	r1, r1
 800be0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800be12:	ea4f 5021 	mov.w	r0, r1, asr #20
 800be16:	f04f 0200 	mov.w	r2, #0
 800be1a:	f04f 0300 	mov.w	r3, #0
 800be1e:	da04      	bge.n	800be2a <__ulp+0x3e>
 800be20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800be24:	fa41 f300 	asr.w	r3, r1, r0
 800be28:	e7ec      	b.n	800be04 <__ulp+0x18>
 800be2a:	f1a0 0114 	sub.w	r1, r0, #20
 800be2e:	291e      	cmp	r1, #30
 800be30:	bfda      	itte	le
 800be32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800be36:	fa20 f101 	lsrle.w	r1, r0, r1
 800be3a:	2101      	movgt	r1, #1
 800be3c:	460a      	mov	r2, r1
 800be3e:	e7e1      	b.n	800be04 <__ulp+0x18>
 800be40:	7ff00000 	.word	0x7ff00000

0800be44 <__b2d>:
 800be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be46:	6905      	ldr	r5, [r0, #16]
 800be48:	f100 0714 	add.w	r7, r0, #20
 800be4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800be50:	1f2e      	subs	r6, r5, #4
 800be52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800be56:	4620      	mov	r0, r4
 800be58:	f7ff fd48 	bl	800b8ec <__hi0bits>
 800be5c:	f1c0 0320 	rsb	r3, r0, #32
 800be60:	280a      	cmp	r0, #10
 800be62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bee0 <__b2d+0x9c>
 800be66:	600b      	str	r3, [r1, #0]
 800be68:	dc14      	bgt.n	800be94 <__b2d+0x50>
 800be6a:	f1c0 0e0b 	rsb	lr, r0, #11
 800be6e:	fa24 f10e 	lsr.w	r1, r4, lr
 800be72:	42b7      	cmp	r7, r6
 800be74:	ea41 030c 	orr.w	r3, r1, ip
 800be78:	bf34      	ite	cc
 800be7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be7e:	2100      	movcs	r1, #0
 800be80:	3015      	adds	r0, #21
 800be82:	fa04 f000 	lsl.w	r0, r4, r0
 800be86:	fa21 f10e 	lsr.w	r1, r1, lr
 800be8a:	ea40 0201 	orr.w	r2, r0, r1
 800be8e:	ec43 2b10 	vmov	d0, r2, r3
 800be92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800be94:	42b7      	cmp	r7, r6
 800be96:	bf3a      	itte	cc
 800be98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800be9c:	f1a5 0608 	subcc.w	r6, r5, #8
 800bea0:	2100      	movcs	r1, #0
 800bea2:	380b      	subs	r0, #11
 800bea4:	d017      	beq.n	800bed6 <__b2d+0x92>
 800bea6:	f1c0 0c20 	rsb	ip, r0, #32
 800beaa:	fa04 f500 	lsl.w	r5, r4, r0
 800beae:	42be      	cmp	r6, r7
 800beb0:	fa21 f40c 	lsr.w	r4, r1, ip
 800beb4:	ea45 0504 	orr.w	r5, r5, r4
 800beb8:	bf8c      	ite	hi
 800beba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bebe:	2400      	movls	r4, #0
 800bec0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bec4:	fa01 f000 	lsl.w	r0, r1, r0
 800bec8:	fa24 f40c 	lsr.w	r4, r4, ip
 800becc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bed0:	ea40 0204 	orr.w	r2, r0, r4
 800bed4:	e7db      	b.n	800be8e <__b2d+0x4a>
 800bed6:	ea44 030c 	orr.w	r3, r4, ip
 800beda:	460a      	mov	r2, r1
 800bedc:	e7d7      	b.n	800be8e <__b2d+0x4a>
 800bede:	bf00      	nop
 800bee0:	3ff00000 	.word	0x3ff00000

0800bee4 <__d2b>:
 800bee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bee8:	4689      	mov	r9, r1
 800beea:	2101      	movs	r1, #1
 800beec:	ec57 6b10 	vmov	r6, r7, d0
 800bef0:	4690      	mov	r8, r2
 800bef2:	f7ff fc09 	bl	800b708 <_Balloc>
 800bef6:	4604      	mov	r4, r0
 800bef8:	b930      	cbnz	r0, 800bf08 <__d2b+0x24>
 800befa:	4602      	mov	r2, r0
 800befc:	4b25      	ldr	r3, [pc, #148]	; (800bf94 <__d2b+0xb0>)
 800befe:	4826      	ldr	r0, [pc, #152]	; (800bf98 <__d2b+0xb4>)
 800bf00:	f240 310a 	movw	r1, #778	; 0x30a
 800bf04:	f000 fabe 	bl	800c484 <__assert_func>
 800bf08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bf0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bf10:	bb35      	cbnz	r5, 800bf60 <__d2b+0x7c>
 800bf12:	2e00      	cmp	r6, #0
 800bf14:	9301      	str	r3, [sp, #4]
 800bf16:	d028      	beq.n	800bf6a <__d2b+0x86>
 800bf18:	4668      	mov	r0, sp
 800bf1a:	9600      	str	r6, [sp, #0]
 800bf1c:	f7ff fd06 	bl	800b92c <__lo0bits>
 800bf20:	9900      	ldr	r1, [sp, #0]
 800bf22:	b300      	cbz	r0, 800bf66 <__d2b+0x82>
 800bf24:	9a01      	ldr	r2, [sp, #4]
 800bf26:	f1c0 0320 	rsb	r3, r0, #32
 800bf2a:	fa02 f303 	lsl.w	r3, r2, r3
 800bf2e:	430b      	orrs	r3, r1
 800bf30:	40c2      	lsrs	r2, r0
 800bf32:	6163      	str	r3, [r4, #20]
 800bf34:	9201      	str	r2, [sp, #4]
 800bf36:	9b01      	ldr	r3, [sp, #4]
 800bf38:	61a3      	str	r3, [r4, #24]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	bf14      	ite	ne
 800bf3e:	2202      	movne	r2, #2
 800bf40:	2201      	moveq	r2, #1
 800bf42:	6122      	str	r2, [r4, #16]
 800bf44:	b1d5      	cbz	r5, 800bf7c <__d2b+0x98>
 800bf46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bf4a:	4405      	add	r5, r0
 800bf4c:	f8c9 5000 	str.w	r5, [r9]
 800bf50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf54:	f8c8 0000 	str.w	r0, [r8]
 800bf58:	4620      	mov	r0, r4
 800bf5a:	b003      	add	sp, #12
 800bf5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bf64:	e7d5      	b.n	800bf12 <__d2b+0x2e>
 800bf66:	6161      	str	r1, [r4, #20]
 800bf68:	e7e5      	b.n	800bf36 <__d2b+0x52>
 800bf6a:	a801      	add	r0, sp, #4
 800bf6c:	f7ff fcde 	bl	800b92c <__lo0bits>
 800bf70:	9b01      	ldr	r3, [sp, #4]
 800bf72:	6163      	str	r3, [r4, #20]
 800bf74:	2201      	movs	r2, #1
 800bf76:	6122      	str	r2, [r4, #16]
 800bf78:	3020      	adds	r0, #32
 800bf7a:	e7e3      	b.n	800bf44 <__d2b+0x60>
 800bf7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bf80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf84:	f8c9 0000 	str.w	r0, [r9]
 800bf88:	6918      	ldr	r0, [r3, #16]
 800bf8a:	f7ff fcaf 	bl	800b8ec <__hi0bits>
 800bf8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bf92:	e7df      	b.n	800bf54 <__d2b+0x70>
 800bf94:	0800cf80 	.word	0x0800cf80
 800bf98:	0800d00c 	.word	0x0800d00c

0800bf9c <__ratio>:
 800bf9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfa0:	4688      	mov	r8, r1
 800bfa2:	4669      	mov	r1, sp
 800bfa4:	4681      	mov	r9, r0
 800bfa6:	f7ff ff4d 	bl	800be44 <__b2d>
 800bfaa:	a901      	add	r1, sp, #4
 800bfac:	4640      	mov	r0, r8
 800bfae:	ec55 4b10 	vmov	r4, r5, d0
 800bfb2:	f7ff ff47 	bl	800be44 <__b2d>
 800bfb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bfbe:	eba3 0c02 	sub.w	ip, r3, r2
 800bfc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bfc6:	1a9b      	subs	r3, r3, r2
 800bfc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bfcc:	ec51 0b10 	vmov	r0, r1, d0
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	bfd6      	itet	le
 800bfd4:	460a      	movle	r2, r1
 800bfd6:	462a      	movgt	r2, r5
 800bfd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfdc:	468b      	mov	fp, r1
 800bfde:	462f      	mov	r7, r5
 800bfe0:	bfd4      	ite	le
 800bfe2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800bfe6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bfea:	4620      	mov	r0, r4
 800bfec:	ee10 2a10 	vmov	r2, s0
 800bff0:	465b      	mov	r3, fp
 800bff2:	4639      	mov	r1, r7
 800bff4:	f7f4 fc3a 	bl	800086c <__aeabi_ddiv>
 800bff8:	ec41 0b10 	vmov	d0, r0, r1
 800bffc:	b003      	add	sp, #12
 800bffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c002 <__copybits>:
 800c002:	3901      	subs	r1, #1
 800c004:	b570      	push	{r4, r5, r6, lr}
 800c006:	1149      	asrs	r1, r1, #5
 800c008:	6914      	ldr	r4, [r2, #16]
 800c00a:	3101      	adds	r1, #1
 800c00c:	f102 0314 	add.w	r3, r2, #20
 800c010:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c014:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c018:	1f05      	subs	r5, r0, #4
 800c01a:	42a3      	cmp	r3, r4
 800c01c:	d30c      	bcc.n	800c038 <__copybits+0x36>
 800c01e:	1aa3      	subs	r3, r4, r2
 800c020:	3b11      	subs	r3, #17
 800c022:	f023 0303 	bic.w	r3, r3, #3
 800c026:	3211      	adds	r2, #17
 800c028:	42a2      	cmp	r2, r4
 800c02a:	bf88      	it	hi
 800c02c:	2300      	movhi	r3, #0
 800c02e:	4418      	add	r0, r3
 800c030:	2300      	movs	r3, #0
 800c032:	4288      	cmp	r0, r1
 800c034:	d305      	bcc.n	800c042 <__copybits+0x40>
 800c036:	bd70      	pop	{r4, r5, r6, pc}
 800c038:	f853 6b04 	ldr.w	r6, [r3], #4
 800c03c:	f845 6f04 	str.w	r6, [r5, #4]!
 800c040:	e7eb      	b.n	800c01a <__copybits+0x18>
 800c042:	f840 3b04 	str.w	r3, [r0], #4
 800c046:	e7f4      	b.n	800c032 <__copybits+0x30>

0800c048 <__any_on>:
 800c048:	f100 0214 	add.w	r2, r0, #20
 800c04c:	6900      	ldr	r0, [r0, #16]
 800c04e:	114b      	asrs	r3, r1, #5
 800c050:	4298      	cmp	r0, r3
 800c052:	b510      	push	{r4, lr}
 800c054:	db11      	blt.n	800c07a <__any_on+0x32>
 800c056:	dd0a      	ble.n	800c06e <__any_on+0x26>
 800c058:	f011 011f 	ands.w	r1, r1, #31
 800c05c:	d007      	beq.n	800c06e <__any_on+0x26>
 800c05e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c062:	fa24 f001 	lsr.w	r0, r4, r1
 800c066:	fa00 f101 	lsl.w	r1, r0, r1
 800c06a:	428c      	cmp	r4, r1
 800c06c:	d10b      	bne.n	800c086 <__any_on+0x3e>
 800c06e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c072:	4293      	cmp	r3, r2
 800c074:	d803      	bhi.n	800c07e <__any_on+0x36>
 800c076:	2000      	movs	r0, #0
 800c078:	bd10      	pop	{r4, pc}
 800c07a:	4603      	mov	r3, r0
 800c07c:	e7f7      	b.n	800c06e <__any_on+0x26>
 800c07e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c082:	2900      	cmp	r1, #0
 800c084:	d0f5      	beq.n	800c072 <__any_on+0x2a>
 800c086:	2001      	movs	r0, #1
 800c088:	e7f6      	b.n	800c078 <__any_on+0x30>

0800c08a <_calloc_r>:
 800c08a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c08c:	fba1 2402 	umull	r2, r4, r1, r2
 800c090:	b94c      	cbnz	r4, 800c0a6 <_calloc_r+0x1c>
 800c092:	4611      	mov	r1, r2
 800c094:	9201      	str	r2, [sp, #4]
 800c096:	f7fc f9ab 	bl	80083f0 <_malloc_r>
 800c09a:	9a01      	ldr	r2, [sp, #4]
 800c09c:	4605      	mov	r5, r0
 800c09e:	b930      	cbnz	r0, 800c0ae <_calloc_r+0x24>
 800c0a0:	4628      	mov	r0, r5
 800c0a2:	b003      	add	sp, #12
 800c0a4:	bd30      	pop	{r4, r5, pc}
 800c0a6:	220c      	movs	r2, #12
 800c0a8:	6002      	str	r2, [r0, #0]
 800c0aa:	2500      	movs	r5, #0
 800c0ac:	e7f8      	b.n	800c0a0 <_calloc_r+0x16>
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	f7fc f975 	bl	800839e <memset>
 800c0b4:	e7f4      	b.n	800c0a0 <_calloc_r+0x16>
	...

0800c0b8 <_free_r>:
 800c0b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0ba:	2900      	cmp	r1, #0
 800c0bc:	d044      	beq.n	800c148 <_free_r+0x90>
 800c0be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0c2:	9001      	str	r0, [sp, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f1a1 0404 	sub.w	r4, r1, #4
 800c0ca:	bfb8      	it	lt
 800c0cc:	18e4      	addlt	r4, r4, r3
 800c0ce:	f7ff fb0f 	bl	800b6f0 <__malloc_lock>
 800c0d2:	4a1e      	ldr	r2, [pc, #120]	; (800c14c <_free_r+0x94>)
 800c0d4:	9801      	ldr	r0, [sp, #4]
 800c0d6:	6813      	ldr	r3, [r2, #0]
 800c0d8:	b933      	cbnz	r3, 800c0e8 <_free_r+0x30>
 800c0da:	6063      	str	r3, [r4, #4]
 800c0dc:	6014      	str	r4, [r2, #0]
 800c0de:	b003      	add	sp, #12
 800c0e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c0e4:	f7ff bb0a 	b.w	800b6fc <__malloc_unlock>
 800c0e8:	42a3      	cmp	r3, r4
 800c0ea:	d908      	bls.n	800c0fe <_free_r+0x46>
 800c0ec:	6825      	ldr	r5, [r4, #0]
 800c0ee:	1961      	adds	r1, r4, r5
 800c0f0:	428b      	cmp	r3, r1
 800c0f2:	bf01      	itttt	eq
 800c0f4:	6819      	ldreq	r1, [r3, #0]
 800c0f6:	685b      	ldreq	r3, [r3, #4]
 800c0f8:	1949      	addeq	r1, r1, r5
 800c0fa:	6021      	streq	r1, [r4, #0]
 800c0fc:	e7ed      	b.n	800c0da <_free_r+0x22>
 800c0fe:	461a      	mov	r2, r3
 800c100:	685b      	ldr	r3, [r3, #4]
 800c102:	b10b      	cbz	r3, 800c108 <_free_r+0x50>
 800c104:	42a3      	cmp	r3, r4
 800c106:	d9fa      	bls.n	800c0fe <_free_r+0x46>
 800c108:	6811      	ldr	r1, [r2, #0]
 800c10a:	1855      	adds	r5, r2, r1
 800c10c:	42a5      	cmp	r5, r4
 800c10e:	d10b      	bne.n	800c128 <_free_r+0x70>
 800c110:	6824      	ldr	r4, [r4, #0]
 800c112:	4421      	add	r1, r4
 800c114:	1854      	adds	r4, r2, r1
 800c116:	42a3      	cmp	r3, r4
 800c118:	6011      	str	r1, [r2, #0]
 800c11a:	d1e0      	bne.n	800c0de <_free_r+0x26>
 800c11c:	681c      	ldr	r4, [r3, #0]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	6053      	str	r3, [r2, #4]
 800c122:	4421      	add	r1, r4
 800c124:	6011      	str	r1, [r2, #0]
 800c126:	e7da      	b.n	800c0de <_free_r+0x26>
 800c128:	d902      	bls.n	800c130 <_free_r+0x78>
 800c12a:	230c      	movs	r3, #12
 800c12c:	6003      	str	r3, [r0, #0]
 800c12e:	e7d6      	b.n	800c0de <_free_r+0x26>
 800c130:	6825      	ldr	r5, [r4, #0]
 800c132:	1961      	adds	r1, r4, r5
 800c134:	428b      	cmp	r3, r1
 800c136:	bf04      	itt	eq
 800c138:	6819      	ldreq	r1, [r3, #0]
 800c13a:	685b      	ldreq	r3, [r3, #4]
 800c13c:	6063      	str	r3, [r4, #4]
 800c13e:	bf04      	itt	eq
 800c140:	1949      	addeq	r1, r1, r5
 800c142:	6021      	streq	r1, [r4, #0]
 800c144:	6054      	str	r4, [r2, #4]
 800c146:	e7ca      	b.n	800c0de <_free_r+0x26>
 800c148:	b003      	add	sp, #12
 800c14a:	bd30      	pop	{r4, r5, pc}
 800c14c:	20004f6c 	.word	0x20004f6c

0800c150 <__ssputs_r>:
 800c150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c154:	688e      	ldr	r6, [r1, #8]
 800c156:	429e      	cmp	r6, r3
 800c158:	4682      	mov	sl, r0
 800c15a:	460c      	mov	r4, r1
 800c15c:	4690      	mov	r8, r2
 800c15e:	461f      	mov	r7, r3
 800c160:	d838      	bhi.n	800c1d4 <__ssputs_r+0x84>
 800c162:	898a      	ldrh	r2, [r1, #12]
 800c164:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c168:	d032      	beq.n	800c1d0 <__ssputs_r+0x80>
 800c16a:	6825      	ldr	r5, [r4, #0]
 800c16c:	6909      	ldr	r1, [r1, #16]
 800c16e:	eba5 0901 	sub.w	r9, r5, r1
 800c172:	6965      	ldr	r5, [r4, #20]
 800c174:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c178:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c17c:	3301      	adds	r3, #1
 800c17e:	444b      	add	r3, r9
 800c180:	106d      	asrs	r5, r5, #1
 800c182:	429d      	cmp	r5, r3
 800c184:	bf38      	it	cc
 800c186:	461d      	movcc	r5, r3
 800c188:	0553      	lsls	r3, r2, #21
 800c18a:	d531      	bpl.n	800c1f0 <__ssputs_r+0xa0>
 800c18c:	4629      	mov	r1, r5
 800c18e:	f7fc f92f 	bl	80083f0 <_malloc_r>
 800c192:	4606      	mov	r6, r0
 800c194:	b950      	cbnz	r0, 800c1ac <__ssputs_r+0x5c>
 800c196:	230c      	movs	r3, #12
 800c198:	f8ca 3000 	str.w	r3, [sl]
 800c19c:	89a3      	ldrh	r3, [r4, #12]
 800c19e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1a2:	81a3      	strh	r3, [r4, #12]
 800c1a4:	f04f 30ff 	mov.w	r0, #4294967295
 800c1a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1ac:	6921      	ldr	r1, [r4, #16]
 800c1ae:	464a      	mov	r2, r9
 800c1b0:	f7fc f8e7 	bl	8008382 <memcpy>
 800c1b4:	89a3      	ldrh	r3, [r4, #12]
 800c1b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1be:	81a3      	strh	r3, [r4, #12]
 800c1c0:	6126      	str	r6, [r4, #16]
 800c1c2:	6165      	str	r5, [r4, #20]
 800c1c4:	444e      	add	r6, r9
 800c1c6:	eba5 0509 	sub.w	r5, r5, r9
 800c1ca:	6026      	str	r6, [r4, #0]
 800c1cc:	60a5      	str	r5, [r4, #8]
 800c1ce:	463e      	mov	r6, r7
 800c1d0:	42be      	cmp	r6, r7
 800c1d2:	d900      	bls.n	800c1d6 <__ssputs_r+0x86>
 800c1d4:	463e      	mov	r6, r7
 800c1d6:	6820      	ldr	r0, [r4, #0]
 800c1d8:	4632      	mov	r2, r6
 800c1da:	4641      	mov	r1, r8
 800c1dc:	f000 f982 	bl	800c4e4 <memmove>
 800c1e0:	68a3      	ldr	r3, [r4, #8]
 800c1e2:	1b9b      	subs	r3, r3, r6
 800c1e4:	60a3      	str	r3, [r4, #8]
 800c1e6:	6823      	ldr	r3, [r4, #0]
 800c1e8:	4433      	add	r3, r6
 800c1ea:	6023      	str	r3, [r4, #0]
 800c1ec:	2000      	movs	r0, #0
 800c1ee:	e7db      	b.n	800c1a8 <__ssputs_r+0x58>
 800c1f0:	462a      	mov	r2, r5
 800c1f2:	f000 f991 	bl	800c518 <_realloc_r>
 800c1f6:	4606      	mov	r6, r0
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	d1e1      	bne.n	800c1c0 <__ssputs_r+0x70>
 800c1fc:	6921      	ldr	r1, [r4, #16]
 800c1fe:	4650      	mov	r0, sl
 800c200:	f7ff ff5a 	bl	800c0b8 <_free_r>
 800c204:	e7c7      	b.n	800c196 <__ssputs_r+0x46>
	...

0800c208 <_svfiprintf_r>:
 800c208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c20c:	4698      	mov	r8, r3
 800c20e:	898b      	ldrh	r3, [r1, #12]
 800c210:	061b      	lsls	r3, r3, #24
 800c212:	b09d      	sub	sp, #116	; 0x74
 800c214:	4607      	mov	r7, r0
 800c216:	460d      	mov	r5, r1
 800c218:	4614      	mov	r4, r2
 800c21a:	d50e      	bpl.n	800c23a <_svfiprintf_r+0x32>
 800c21c:	690b      	ldr	r3, [r1, #16]
 800c21e:	b963      	cbnz	r3, 800c23a <_svfiprintf_r+0x32>
 800c220:	2140      	movs	r1, #64	; 0x40
 800c222:	f7fc f8e5 	bl	80083f0 <_malloc_r>
 800c226:	6028      	str	r0, [r5, #0]
 800c228:	6128      	str	r0, [r5, #16]
 800c22a:	b920      	cbnz	r0, 800c236 <_svfiprintf_r+0x2e>
 800c22c:	230c      	movs	r3, #12
 800c22e:	603b      	str	r3, [r7, #0]
 800c230:	f04f 30ff 	mov.w	r0, #4294967295
 800c234:	e0d1      	b.n	800c3da <_svfiprintf_r+0x1d2>
 800c236:	2340      	movs	r3, #64	; 0x40
 800c238:	616b      	str	r3, [r5, #20]
 800c23a:	2300      	movs	r3, #0
 800c23c:	9309      	str	r3, [sp, #36]	; 0x24
 800c23e:	2320      	movs	r3, #32
 800c240:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c244:	f8cd 800c 	str.w	r8, [sp, #12]
 800c248:	2330      	movs	r3, #48	; 0x30
 800c24a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c3f4 <_svfiprintf_r+0x1ec>
 800c24e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c252:	f04f 0901 	mov.w	r9, #1
 800c256:	4623      	mov	r3, r4
 800c258:	469a      	mov	sl, r3
 800c25a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c25e:	b10a      	cbz	r2, 800c264 <_svfiprintf_r+0x5c>
 800c260:	2a25      	cmp	r2, #37	; 0x25
 800c262:	d1f9      	bne.n	800c258 <_svfiprintf_r+0x50>
 800c264:	ebba 0b04 	subs.w	fp, sl, r4
 800c268:	d00b      	beq.n	800c282 <_svfiprintf_r+0x7a>
 800c26a:	465b      	mov	r3, fp
 800c26c:	4622      	mov	r2, r4
 800c26e:	4629      	mov	r1, r5
 800c270:	4638      	mov	r0, r7
 800c272:	f7ff ff6d 	bl	800c150 <__ssputs_r>
 800c276:	3001      	adds	r0, #1
 800c278:	f000 80aa 	beq.w	800c3d0 <_svfiprintf_r+0x1c8>
 800c27c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c27e:	445a      	add	r2, fp
 800c280:	9209      	str	r2, [sp, #36]	; 0x24
 800c282:	f89a 3000 	ldrb.w	r3, [sl]
 800c286:	2b00      	cmp	r3, #0
 800c288:	f000 80a2 	beq.w	800c3d0 <_svfiprintf_r+0x1c8>
 800c28c:	2300      	movs	r3, #0
 800c28e:	f04f 32ff 	mov.w	r2, #4294967295
 800c292:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c296:	f10a 0a01 	add.w	sl, sl, #1
 800c29a:	9304      	str	r3, [sp, #16]
 800c29c:	9307      	str	r3, [sp, #28]
 800c29e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2a2:	931a      	str	r3, [sp, #104]	; 0x68
 800c2a4:	4654      	mov	r4, sl
 800c2a6:	2205      	movs	r2, #5
 800c2a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2ac:	4851      	ldr	r0, [pc, #324]	; (800c3f4 <_svfiprintf_r+0x1ec>)
 800c2ae:	f7f3 ffa7 	bl	8000200 <memchr>
 800c2b2:	9a04      	ldr	r2, [sp, #16]
 800c2b4:	b9d8      	cbnz	r0, 800c2ee <_svfiprintf_r+0xe6>
 800c2b6:	06d0      	lsls	r0, r2, #27
 800c2b8:	bf44      	itt	mi
 800c2ba:	2320      	movmi	r3, #32
 800c2bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2c0:	0711      	lsls	r1, r2, #28
 800c2c2:	bf44      	itt	mi
 800c2c4:	232b      	movmi	r3, #43	; 0x2b
 800c2c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c2d0:	d015      	beq.n	800c2fe <_svfiprintf_r+0xf6>
 800c2d2:	9a07      	ldr	r2, [sp, #28]
 800c2d4:	4654      	mov	r4, sl
 800c2d6:	2000      	movs	r0, #0
 800c2d8:	f04f 0c0a 	mov.w	ip, #10
 800c2dc:	4621      	mov	r1, r4
 800c2de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c2e2:	3b30      	subs	r3, #48	; 0x30
 800c2e4:	2b09      	cmp	r3, #9
 800c2e6:	d94e      	bls.n	800c386 <_svfiprintf_r+0x17e>
 800c2e8:	b1b0      	cbz	r0, 800c318 <_svfiprintf_r+0x110>
 800c2ea:	9207      	str	r2, [sp, #28]
 800c2ec:	e014      	b.n	800c318 <_svfiprintf_r+0x110>
 800c2ee:	eba0 0308 	sub.w	r3, r0, r8
 800c2f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c2f6:	4313      	orrs	r3, r2
 800c2f8:	9304      	str	r3, [sp, #16]
 800c2fa:	46a2      	mov	sl, r4
 800c2fc:	e7d2      	b.n	800c2a4 <_svfiprintf_r+0x9c>
 800c2fe:	9b03      	ldr	r3, [sp, #12]
 800c300:	1d19      	adds	r1, r3, #4
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	9103      	str	r1, [sp, #12]
 800c306:	2b00      	cmp	r3, #0
 800c308:	bfbb      	ittet	lt
 800c30a:	425b      	neglt	r3, r3
 800c30c:	f042 0202 	orrlt.w	r2, r2, #2
 800c310:	9307      	strge	r3, [sp, #28]
 800c312:	9307      	strlt	r3, [sp, #28]
 800c314:	bfb8      	it	lt
 800c316:	9204      	strlt	r2, [sp, #16]
 800c318:	7823      	ldrb	r3, [r4, #0]
 800c31a:	2b2e      	cmp	r3, #46	; 0x2e
 800c31c:	d10c      	bne.n	800c338 <_svfiprintf_r+0x130>
 800c31e:	7863      	ldrb	r3, [r4, #1]
 800c320:	2b2a      	cmp	r3, #42	; 0x2a
 800c322:	d135      	bne.n	800c390 <_svfiprintf_r+0x188>
 800c324:	9b03      	ldr	r3, [sp, #12]
 800c326:	1d1a      	adds	r2, r3, #4
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	9203      	str	r2, [sp, #12]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	bfb8      	it	lt
 800c330:	f04f 33ff 	movlt.w	r3, #4294967295
 800c334:	3402      	adds	r4, #2
 800c336:	9305      	str	r3, [sp, #20]
 800c338:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c404 <_svfiprintf_r+0x1fc>
 800c33c:	7821      	ldrb	r1, [r4, #0]
 800c33e:	2203      	movs	r2, #3
 800c340:	4650      	mov	r0, sl
 800c342:	f7f3 ff5d 	bl	8000200 <memchr>
 800c346:	b140      	cbz	r0, 800c35a <_svfiprintf_r+0x152>
 800c348:	2340      	movs	r3, #64	; 0x40
 800c34a:	eba0 000a 	sub.w	r0, r0, sl
 800c34e:	fa03 f000 	lsl.w	r0, r3, r0
 800c352:	9b04      	ldr	r3, [sp, #16]
 800c354:	4303      	orrs	r3, r0
 800c356:	3401      	adds	r4, #1
 800c358:	9304      	str	r3, [sp, #16]
 800c35a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c35e:	4826      	ldr	r0, [pc, #152]	; (800c3f8 <_svfiprintf_r+0x1f0>)
 800c360:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c364:	2206      	movs	r2, #6
 800c366:	f7f3 ff4b 	bl	8000200 <memchr>
 800c36a:	2800      	cmp	r0, #0
 800c36c:	d038      	beq.n	800c3e0 <_svfiprintf_r+0x1d8>
 800c36e:	4b23      	ldr	r3, [pc, #140]	; (800c3fc <_svfiprintf_r+0x1f4>)
 800c370:	bb1b      	cbnz	r3, 800c3ba <_svfiprintf_r+0x1b2>
 800c372:	9b03      	ldr	r3, [sp, #12]
 800c374:	3307      	adds	r3, #7
 800c376:	f023 0307 	bic.w	r3, r3, #7
 800c37a:	3308      	adds	r3, #8
 800c37c:	9303      	str	r3, [sp, #12]
 800c37e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c380:	4433      	add	r3, r6
 800c382:	9309      	str	r3, [sp, #36]	; 0x24
 800c384:	e767      	b.n	800c256 <_svfiprintf_r+0x4e>
 800c386:	fb0c 3202 	mla	r2, ip, r2, r3
 800c38a:	460c      	mov	r4, r1
 800c38c:	2001      	movs	r0, #1
 800c38e:	e7a5      	b.n	800c2dc <_svfiprintf_r+0xd4>
 800c390:	2300      	movs	r3, #0
 800c392:	3401      	adds	r4, #1
 800c394:	9305      	str	r3, [sp, #20]
 800c396:	4619      	mov	r1, r3
 800c398:	f04f 0c0a 	mov.w	ip, #10
 800c39c:	4620      	mov	r0, r4
 800c39e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3a2:	3a30      	subs	r2, #48	; 0x30
 800c3a4:	2a09      	cmp	r2, #9
 800c3a6:	d903      	bls.n	800c3b0 <_svfiprintf_r+0x1a8>
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d0c5      	beq.n	800c338 <_svfiprintf_r+0x130>
 800c3ac:	9105      	str	r1, [sp, #20]
 800c3ae:	e7c3      	b.n	800c338 <_svfiprintf_r+0x130>
 800c3b0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	2301      	movs	r3, #1
 800c3b8:	e7f0      	b.n	800c39c <_svfiprintf_r+0x194>
 800c3ba:	ab03      	add	r3, sp, #12
 800c3bc:	9300      	str	r3, [sp, #0]
 800c3be:	462a      	mov	r2, r5
 800c3c0:	4b0f      	ldr	r3, [pc, #60]	; (800c400 <_svfiprintf_r+0x1f8>)
 800c3c2:	a904      	add	r1, sp, #16
 800c3c4:	4638      	mov	r0, r7
 800c3c6:	f7fc f927 	bl	8008618 <_printf_float>
 800c3ca:	1c42      	adds	r2, r0, #1
 800c3cc:	4606      	mov	r6, r0
 800c3ce:	d1d6      	bne.n	800c37e <_svfiprintf_r+0x176>
 800c3d0:	89ab      	ldrh	r3, [r5, #12]
 800c3d2:	065b      	lsls	r3, r3, #25
 800c3d4:	f53f af2c 	bmi.w	800c230 <_svfiprintf_r+0x28>
 800c3d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c3da:	b01d      	add	sp, #116	; 0x74
 800c3dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c3e0:	ab03      	add	r3, sp, #12
 800c3e2:	9300      	str	r3, [sp, #0]
 800c3e4:	462a      	mov	r2, r5
 800c3e6:	4b06      	ldr	r3, [pc, #24]	; (800c400 <_svfiprintf_r+0x1f8>)
 800c3e8:	a904      	add	r1, sp, #16
 800c3ea:	4638      	mov	r0, r7
 800c3ec:	f7fc fbb8 	bl	8008b60 <_printf_i>
 800c3f0:	e7eb      	b.n	800c3ca <_svfiprintf_r+0x1c2>
 800c3f2:	bf00      	nop
 800c3f4:	0800d164 	.word	0x0800d164
 800c3f8:	0800d16e 	.word	0x0800d16e
 800c3fc:	08008619 	.word	0x08008619
 800c400:	0800c151 	.word	0x0800c151
 800c404:	0800d16a 	.word	0x0800d16a

0800c408 <_read_r>:
 800c408:	b538      	push	{r3, r4, r5, lr}
 800c40a:	4d07      	ldr	r5, [pc, #28]	; (800c428 <_read_r+0x20>)
 800c40c:	4604      	mov	r4, r0
 800c40e:	4608      	mov	r0, r1
 800c410:	4611      	mov	r1, r2
 800c412:	2200      	movs	r2, #0
 800c414:	602a      	str	r2, [r5, #0]
 800c416:	461a      	mov	r2, r3
 800c418:	f7f6 fd14 	bl	8002e44 <_read>
 800c41c:	1c43      	adds	r3, r0, #1
 800c41e:	d102      	bne.n	800c426 <_read_r+0x1e>
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	b103      	cbz	r3, 800c426 <_read_r+0x1e>
 800c424:	6023      	str	r3, [r4, #0]
 800c426:	bd38      	pop	{r3, r4, r5, pc}
 800c428:	20004f74 	.word	0x20004f74
 800c42c:	00000000 	.word	0x00000000

0800c430 <nan>:
 800c430:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c438 <nan+0x8>
 800c434:	4770      	bx	lr
 800c436:	bf00      	nop
 800c438:	00000000 	.word	0x00000000
 800c43c:	7ff80000 	.word	0x7ff80000

0800c440 <strncmp>:
 800c440:	b510      	push	{r4, lr}
 800c442:	b17a      	cbz	r2, 800c464 <strncmp+0x24>
 800c444:	4603      	mov	r3, r0
 800c446:	3901      	subs	r1, #1
 800c448:	1884      	adds	r4, r0, r2
 800c44a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c44e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c452:	4290      	cmp	r0, r2
 800c454:	d101      	bne.n	800c45a <strncmp+0x1a>
 800c456:	42a3      	cmp	r3, r4
 800c458:	d101      	bne.n	800c45e <strncmp+0x1e>
 800c45a:	1a80      	subs	r0, r0, r2
 800c45c:	bd10      	pop	{r4, pc}
 800c45e:	2800      	cmp	r0, #0
 800c460:	d1f3      	bne.n	800c44a <strncmp+0xa>
 800c462:	e7fa      	b.n	800c45a <strncmp+0x1a>
 800c464:	4610      	mov	r0, r2
 800c466:	e7f9      	b.n	800c45c <strncmp+0x1c>

0800c468 <__ascii_wctomb>:
 800c468:	b149      	cbz	r1, 800c47e <__ascii_wctomb+0x16>
 800c46a:	2aff      	cmp	r2, #255	; 0xff
 800c46c:	bf85      	ittet	hi
 800c46e:	238a      	movhi	r3, #138	; 0x8a
 800c470:	6003      	strhi	r3, [r0, #0]
 800c472:	700a      	strbls	r2, [r1, #0]
 800c474:	f04f 30ff 	movhi.w	r0, #4294967295
 800c478:	bf98      	it	ls
 800c47a:	2001      	movls	r0, #1
 800c47c:	4770      	bx	lr
 800c47e:	4608      	mov	r0, r1
 800c480:	4770      	bx	lr
	...

0800c484 <__assert_func>:
 800c484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c486:	4614      	mov	r4, r2
 800c488:	461a      	mov	r2, r3
 800c48a:	4b09      	ldr	r3, [pc, #36]	; (800c4b0 <__assert_func+0x2c>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	4605      	mov	r5, r0
 800c490:	68d8      	ldr	r0, [r3, #12]
 800c492:	b14c      	cbz	r4, 800c4a8 <__assert_func+0x24>
 800c494:	4b07      	ldr	r3, [pc, #28]	; (800c4b4 <__assert_func+0x30>)
 800c496:	9100      	str	r1, [sp, #0]
 800c498:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c49c:	4906      	ldr	r1, [pc, #24]	; (800c4b8 <__assert_func+0x34>)
 800c49e:	462b      	mov	r3, r5
 800c4a0:	f000 f80e 	bl	800c4c0 <fiprintf>
 800c4a4:	f000 fa80 	bl	800c9a8 <abort>
 800c4a8:	4b04      	ldr	r3, [pc, #16]	; (800c4bc <__assert_func+0x38>)
 800c4aa:	461c      	mov	r4, r3
 800c4ac:	e7f3      	b.n	800c496 <__assert_func+0x12>
 800c4ae:	bf00      	nop
 800c4b0:	200001f8 	.word	0x200001f8
 800c4b4:	0800d175 	.word	0x0800d175
 800c4b8:	0800d182 	.word	0x0800d182
 800c4bc:	0800d1b0 	.word	0x0800d1b0

0800c4c0 <fiprintf>:
 800c4c0:	b40e      	push	{r1, r2, r3}
 800c4c2:	b503      	push	{r0, r1, lr}
 800c4c4:	4601      	mov	r1, r0
 800c4c6:	ab03      	add	r3, sp, #12
 800c4c8:	4805      	ldr	r0, [pc, #20]	; (800c4e0 <fiprintf+0x20>)
 800c4ca:	f853 2b04 	ldr.w	r2, [r3], #4
 800c4ce:	6800      	ldr	r0, [r0, #0]
 800c4d0:	9301      	str	r3, [sp, #4]
 800c4d2:	f000 f879 	bl	800c5c8 <_vfiprintf_r>
 800c4d6:	b002      	add	sp, #8
 800c4d8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4dc:	b003      	add	sp, #12
 800c4de:	4770      	bx	lr
 800c4e0:	200001f8 	.word	0x200001f8

0800c4e4 <memmove>:
 800c4e4:	4288      	cmp	r0, r1
 800c4e6:	b510      	push	{r4, lr}
 800c4e8:	eb01 0402 	add.w	r4, r1, r2
 800c4ec:	d902      	bls.n	800c4f4 <memmove+0x10>
 800c4ee:	4284      	cmp	r4, r0
 800c4f0:	4623      	mov	r3, r4
 800c4f2:	d807      	bhi.n	800c504 <memmove+0x20>
 800c4f4:	1e43      	subs	r3, r0, #1
 800c4f6:	42a1      	cmp	r1, r4
 800c4f8:	d008      	beq.n	800c50c <memmove+0x28>
 800c4fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c502:	e7f8      	b.n	800c4f6 <memmove+0x12>
 800c504:	4402      	add	r2, r0
 800c506:	4601      	mov	r1, r0
 800c508:	428a      	cmp	r2, r1
 800c50a:	d100      	bne.n	800c50e <memmove+0x2a>
 800c50c:	bd10      	pop	{r4, pc}
 800c50e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c512:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c516:	e7f7      	b.n	800c508 <memmove+0x24>

0800c518 <_realloc_r>:
 800c518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c51c:	4680      	mov	r8, r0
 800c51e:	4614      	mov	r4, r2
 800c520:	460e      	mov	r6, r1
 800c522:	b921      	cbnz	r1, 800c52e <_realloc_r+0x16>
 800c524:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c528:	4611      	mov	r1, r2
 800c52a:	f7fb bf61 	b.w	80083f0 <_malloc_r>
 800c52e:	b92a      	cbnz	r2, 800c53c <_realloc_r+0x24>
 800c530:	f7ff fdc2 	bl	800c0b8 <_free_r>
 800c534:	4625      	mov	r5, r4
 800c536:	4628      	mov	r0, r5
 800c538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c53c:	f000 faa0 	bl	800ca80 <_malloc_usable_size_r>
 800c540:	4284      	cmp	r4, r0
 800c542:	4607      	mov	r7, r0
 800c544:	d802      	bhi.n	800c54c <_realloc_r+0x34>
 800c546:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c54a:	d812      	bhi.n	800c572 <_realloc_r+0x5a>
 800c54c:	4621      	mov	r1, r4
 800c54e:	4640      	mov	r0, r8
 800c550:	f7fb ff4e 	bl	80083f0 <_malloc_r>
 800c554:	4605      	mov	r5, r0
 800c556:	2800      	cmp	r0, #0
 800c558:	d0ed      	beq.n	800c536 <_realloc_r+0x1e>
 800c55a:	42bc      	cmp	r4, r7
 800c55c:	4622      	mov	r2, r4
 800c55e:	4631      	mov	r1, r6
 800c560:	bf28      	it	cs
 800c562:	463a      	movcs	r2, r7
 800c564:	f7fb ff0d 	bl	8008382 <memcpy>
 800c568:	4631      	mov	r1, r6
 800c56a:	4640      	mov	r0, r8
 800c56c:	f7ff fda4 	bl	800c0b8 <_free_r>
 800c570:	e7e1      	b.n	800c536 <_realloc_r+0x1e>
 800c572:	4635      	mov	r5, r6
 800c574:	e7df      	b.n	800c536 <_realloc_r+0x1e>

0800c576 <__sfputc_r>:
 800c576:	6893      	ldr	r3, [r2, #8]
 800c578:	3b01      	subs	r3, #1
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	b410      	push	{r4}
 800c57e:	6093      	str	r3, [r2, #8]
 800c580:	da08      	bge.n	800c594 <__sfputc_r+0x1e>
 800c582:	6994      	ldr	r4, [r2, #24]
 800c584:	42a3      	cmp	r3, r4
 800c586:	db01      	blt.n	800c58c <__sfputc_r+0x16>
 800c588:	290a      	cmp	r1, #10
 800c58a:	d103      	bne.n	800c594 <__sfputc_r+0x1e>
 800c58c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c590:	f000 b94a 	b.w	800c828 <__swbuf_r>
 800c594:	6813      	ldr	r3, [r2, #0]
 800c596:	1c58      	adds	r0, r3, #1
 800c598:	6010      	str	r0, [r2, #0]
 800c59a:	7019      	strb	r1, [r3, #0]
 800c59c:	4608      	mov	r0, r1
 800c59e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5a2:	4770      	bx	lr

0800c5a4 <__sfputs_r>:
 800c5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5a6:	4606      	mov	r6, r0
 800c5a8:	460f      	mov	r7, r1
 800c5aa:	4614      	mov	r4, r2
 800c5ac:	18d5      	adds	r5, r2, r3
 800c5ae:	42ac      	cmp	r4, r5
 800c5b0:	d101      	bne.n	800c5b6 <__sfputs_r+0x12>
 800c5b2:	2000      	movs	r0, #0
 800c5b4:	e007      	b.n	800c5c6 <__sfputs_r+0x22>
 800c5b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5ba:	463a      	mov	r2, r7
 800c5bc:	4630      	mov	r0, r6
 800c5be:	f7ff ffda 	bl	800c576 <__sfputc_r>
 800c5c2:	1c43      	adds	r3, r0, #1
 800c5c4:	d1f3      	bne.n	800c5ae <__sfputs_r+0xa>
 800c5c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c5c8 <_vfiprintf_r>:
 800c5c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5cc:	460d      	mov	r5, r1
 800c5ce:	b09d      	sub	sp, #116	; 0x74
 800c5d0:	4614      	mov	r4, r2
 800c5d2:	4698      	mov	r8, r3
 800c5d4:	4606      	mov	r6, r0
 800c5d6:	b118      	cbz	r0, 800c5e0 <_vfiprintf_r+0x18>
 800c5d8:	6983      	ldr	r3, [r0, #24]
 800c5da:	b90b      	cbnz	r3, 800c5e0 <_vfiprintf_r+0x18>
 800c5dc:	f7fb fe0c 	bl	80081f8 <__sinit>
 800c5e0:	4b89      	ldr	r3, [pc, #548]	; (800c808 <_vfiprintf_r+0x240>)
 800c5e2:	429d      	cmp	r5, r3
 800c5e4:	d11b      	bne.n	800c61e <_vfiprintf_r+0x56>
 800c5e6:	6875      	ldr	r5, [r6, #4]
 800c5e8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c5ea:	07d9      	lsls	r1, r3, #31
 800c5ec:	d405      	bmi.n	800c5fa <_vfiprintf_r+0x32>
 800c5ee:	89ab      	ldrh	r3, [r5, #12]
 800c5f0:	059a      	lsls	r2, r3, #22
 800c5f2:	d402      	bmi.n	800c5fa <_vfiprintf_r+0x32>
 800c5f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c5f6:	f7fb fec2 	bl	800837e <__retarget_lock_acquire_recursive>
 800c5fa:	89ab      	ldrh	r3, [r5, #12]
 800c5fc:	071b      	lsls	r3, r3, #28
 800c5fe:	d501      	bpl.n	800c604 <_vfiprintf_r+0x3c>
 800c600:	692b      	ldr	r3, [r5, #16]
 800c602:	b9eb      	cbnz	r3, 800c640 <_vfiprintf_r+0x78>
 800c604:	4629      	mov	r1, r5
 800c606:	4630      	mov	r0, r6
 800c608:	f000 f960 	bl	800c8cc <__swsetup_r>
 800c60c:	b1c0      	cbz	r0, 800c640 <_vfiprintf_r+0x78>
 800c60e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c610:	07dc      	lsls	r4, r3, #31
 800c612:	d50e      	bpl.n	800c632 <_vfiprintf_r+0x6a>
 800c614:	f04f 30ff 	mov.w	r0, #4294967295
 800c618:	b01d      	add	sp, #116	; 0x74
 800c61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c61e:	4b7b      	ldr	r3, [pc, #492]	; (800c80c <_vfiprintf_r+0x244>)
 800c620:	429d      	cmp	r5, r3
 800c622:	d101      	bne.n	800c628 <_vfiprintf_r+0x60>
 800c624:	68b5      	ldr	r5, [r6, #8]
 800c626:	e7df      	b.n	800c5e8 <_vfiprintf_r+0x20>
 800c628:	4b79      	ldr	r3, [pc, #484]	; (800c810 <_vfiprintf_r+0x248>)
 800c62a:	429d      	cmp	r5, r3
 800c62c:	bf08      	it	eq
 800c62e:	68f5      	ldreq	r5, [r6, #12]
 800c630:	e7da      	b.n	800c5e8 <_vfiprintf_r+0x20>
 800c632:	89ab      	ldrh	r3, [r5, #12]
 800c634:	0598      	lsls	r0, r3, #22
 800c636:	d4ed      	bmi.n	800c614 <_vfiprintf_r+0x4c>
 800c638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c63a:	f7fb fea1 	bl	8008380 <__retarget_lock_release_recursive>
 800c63e:	e7e9      	b.n	800c614 <_vfiprintf_r+0x4c>
 800c640:	2300      	movs	r3, #0
 800c642:	9309      	str	r3, [sp, #36]	; 0x24
 800c644:	2320      	movs	r3, #32
 800c646:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c64a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c64e:	2330      	movs	r3, #48	; 0x30
 800c650:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c814 <_vfiprintf_r+0x24c>
 800c654:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c658:	f04f 0901 	mov.w	r9, #1
 800c65c:	4623      	mov	r3, r4
 800c65e:	469a      	mov	sl, r3
 800c660:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c664:	b10a      	cbz	r2, 800c66a <_vfiprintf_r+0xa2>
 800c666:	2a25      	cmp	r2, #37	; 0x25
 800c668:	d1f9      	bne.n	800c65e <_vfiprintf_r+0x96>
 800c66a:	ebba 0b04 	subs.w	fp, sl, r4
 800c66e:	d00b      	beq.n	800c688 <_vfiprintf_r+0xc0>
 800c670:	465b      	mov	r3, fp
 800c672:	4622      	mov	r2, r4
 800c674:	4629      	mov	r1, r5
 800c676:	4630      	mov	r0, r6
 800c678:	f7ff ff94 	bl	800c5a4 <__sfputs_r>
 800c67c:	3001      	adds	r0, #1
 800c67e:	f000 80aa 	beq.w	800c7d6 <_vfiprintf_r+0x20e>
 800c682:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c684:	445a      	add	r2, fp
 800c686:	9209      	str	r2, [sp, #36]	; 0x24
 800c688:	f89a 3000 	ldrb.w	r3, [sl]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	f000 80a2 	beq.w	800c7d6 <_vfiprintf_r+0x20e>
 800c692:	2300      	movs	r3, #0
 800c694:	f04f 32ff 	mov.w	r2, #4294967295
 800c698:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c69c:	f10a 0a01 	add.w	sl, sl, #1
 800c6a0:	9304      	str	r3, [sp, #16]
 800c6a2:	9307      	str	r3, [sp, #28]
 800c6a4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6a8:	931a      	str	r3, [sp, #104]	; 0x68
 800c6aa:	4654      	mov	r4, sl
 800c6ac:	2205      	movs	r2, #5
 800c6ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6b2:	4858      	ldr	r0, [pc, #352]	; (800c814 <_vfiprintf_r+0x24c>)
 800c6b4:	f7f3 fda4 	bl	8000200 <memchr>
 800c6b8:	9a04      	ldr	r2, [sp, #16]
 800c6ba:	b9d8      	cbnz	r0, 800c6f4 <_vfiprintf_r+0x12c>
 800c6bc:	06d1      	lsls	r1, r2, #27
 800c6be:	bf44      	itt	mi
 800c6c0:	2320      	movmi	r3, #32
 800c6c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6c6:	0713      	lsls	r3, r2, #28
 800c6c8:	bf44      	itt	mi
 800c6ca:	232b      	movmi	r3, #43	; 0x2b
 800c6cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6d0:	f89a 3000 	ldrb.w	r3, [sl]
 800c6d4:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d6:	d015      	beq.n	800c704 <_vfiprintf_r+0x13c>
 800c6d8:	9a07      	ldr	r2, [sp, #28]
 800c6da:	4654      	mov	r4, sl
 800c6dc:	2000      	movs	r0, #0
 800c6de:	f04f 0c0a 	mov.w	ip, #10
 800c6e2:	4621      	mov	r1, r4
 800c6e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6e8:	3b30      	subs	r3, #48	; 0x30
 800c6ea:	2b09      	cmp	r3, #9
 800c6ec:	d94e      	bls.n	800c78c <_vfiprintf_r+0x1c4>
 800c6ee:	b1b0      	cbz	r0, 800c71e <_vfiprintf_r+0x156>
 800c6f0:	9207      	str	r2, [sp, #28]
 800c6f2:	e014      	b.n	800c71e <_vfiprintf_r+0x156>
 800c6f4:	eba0 0308 	sub.w	r3, r0, r8
 800c6f8:	fa09 f303 	lsl.w	r3, r9, r3
 800c6fc:	4313      	orrs	r3, r2
 800c6fe:	9304      	str	r3, [sp, #16]
 800c700:	46a2      	mov	sl, r4
 800c702:	e7d2      	b.n	800c6aa <_vfiprintf_r+0xe2>
 800c704:	9b03      	ldr	r3, [sp, #12]
 800c706:	1d19      	adds	r1, r3, #4
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	9103      	str	r1, [sp, #12]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	bfbb      	ittet	lt
 800c710:	425b      	neglt	r3, r3
 800c712:	f042 0202 	orrlt.w	r2, r2, #2
 800c716:	9307      	strge	r3, [sp, #28]
 800c718:	9307      	strlt	r3, [sp, #28]
 800c71a:	bfb8      	it	lt
 800c71c:	9204      	strlt	r2, [sp, #16]
 800c71e:	7823      	ldrb	r3, [r4, #0]
 800c720:	2b2e      	cmp	r3, #46	; 0x2e
 800c722:	d10c      	bne.n	800c73e <_vfiprintf_r+0x176>
 800c724:	7863      	ldrb	r3, [r4, #1]
 800c726:	2b2a      	cmp	r3, #42	; 0x2a
 800c728:	d135      	bne.n	800c796 <_vfiprintf_r+0x1ce>
 800c72a:	9b03      	ldr	r3, [sp, #12]
 800c72c:	1d1a      	adds	r2, r3, #4
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	9203      	str	r2, [sp, #12]
 800c732:	2b00      	cmp	r3, #0
 800c734:	bfb8      	it	lt
 800c736:	f04f 33ff 	movlt.w	r3, #4294967295
 800c73a:	3402      	adds	r4, #2
 800c73c:	9305      	str	r3, [sp, #20]
 800c73e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c824 <_vfiprintf_r+0x25c>
 800c742:	7821      	ldrb	r1, [r4, #0]
 800c744:	2203      	movs	r2, #3
 800c746:	4650      	mov	r0, sl
 800c748:	f7f3 fd5a 	bl	8000200 <memchr>
 800c74c:	b140      	cbz	r0, 800c760 <_vfiprintf_r+0x198>
 800c74e:	2340      	movs	r3, #64	; 0x40
 800c750:	eba0 000a 	sub.w	r0, r0, sl
 800c754:	fa03 f000 	lsl.w	r0, r3, r0
 800c758:	9b04      	ldr	r3, [sp, #16]
 800c75a:	4303      	orrs	r3, r0
 800c75c:	3401      	adds	r4, #1
 800c75e:	9304      	str	r3, [sp, #16]
 800c760:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c764:	482c      	ldr	r0, [pc, #176]	; (800c818 <_vfiprintf_r+0x250>)
 800c766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c76a:	2206      	movs	r2, #6
 800c76c:	f7f3 fd48 	bl	8000200 <memchr>
 800c770:	2800      	cmp	r0, #0
 800c772:	d03f      	beq.n	800c7f4 <_vfiprintf_r+0x22c>
 800c774:	4b29      	ldr	r3, [pc, #164]	; (800c81c <_vfiprintf_r+0x254>)
 800c776:	bb1b      	cbnz	r3, 800c7c0 <_vfiprintf_r+0x1f8>
 800c778:	9b03      	ldr	r3, [sp, #12]
 800c77a:	3307      	adds	r3, #7
 800c77c:	f023 0307 	bic.w	r3, r3, #7
 800c780:	3308      	adds	r3, #8
 800c782:	9303      	str	r3, [sp, #12]
 800c784:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c786:	443b      	add	r3, r7
 800c788:	9309      	str	r3, [sp, #36]	; 0x24
 800c78a:	e767      	b.n	800c65c <_vfiprintf_r+0x94>
 800c78c:	fb0c 3202 	mla	r2, ip, r2, r3
 800c790:	460c      	mov	r4, r1
 800c792:	2001      	movs	r0, #1
 800c794:	e7a5      	b.n	800c6e2 <_vfiprintf_r+0x11a>
 800c796:	2300      	movs	r3, #0
 800c798:	3401      	adds	r4, #1
 800c79a:	9305      	str	r3, [sp, #20]
 800c79c:	4619      	mov	r1, r3
 800c79e:	f04f 0c0a 	mov.w	ip, #10
 800c7a2:	4620      	mov	r0, r4
 800c7a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7a8:	3a30      	subs	r2, #48	; 0x30
 800c7aa:	2a09      	cmp	r2, #9
 800c7ac:	d903      	bls.n	800c7b6 <_vfiprintf_r+0x1ee>
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d0c5      	beq.n	800c73e <_vfiprintf_r+0x176>
 800c7b2:	9105      	str	r1, [sp, #20]
 800c7b4:	e7c3      	b.n	800c73e <_vfiprintf_r+0x176>
 800c7b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7ba:	4604      	mov	r4, r0
 800c7bc:	2301      	movs	r3, #1
 800c7be:	e7f0      	b.n	800c7a2 <_vfiprintf_r+0x1da>
 800c7c0:	ab03      	add	r3, sp, #12
 800c7c2:	9300      	str	r3, [sp, #0]
 800c7c4:	462a      	mov	r2, r5
 800c7c6:	4b16      	ldr	r3, [pc, #88]	; (800c820 <_vfiprintf_r+0x258>)
 800c7c8:	a904      	add	r1, sp, #16
 800c7ca:	4630      	mov	r0, r6
 800c7cc:	f7fb ff24 	bl	8008618 <_printf_float>
 800c7d0:	4607      	mov	r7, r0
 800c7d2:	1c78      	adds	r0, r7, #1
 800c7d4:	d1d6      	bne.n	800c784 <_vfiprintf_r+0x1bc>
 800c7d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7d8:	07d9      	lsls	r1, r3, #31
 800c7da:	d405      	bmi.n	800c7e8 <_vfiprintf_r+0x220>
 800c7dc:	89ab      	ldrh	r3, [r5, #12]
 800c7de:	059a      	lsls	r2, r3, #22
 800c7e0:	d402      	bmi.n	800c7e8 <_vfiprintf_r+0x220>
 800c7e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7e4:	f7fb fdcc 	bl	8008380 <__retarget_lock_release_recursive>
 800c7e8:	89ab      	ldrh	r3, [r5, #12]
 800c7ea:	065b      	lsls	r3, r3, #25
 800c7ec:	f53f af12 	bmi.w	800c614 <_vfiprintf_r+0x4c>
 800c7f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7f2:	e711      	b.n	800c618 <_vfiprintf_r+0x50>
 800c7f4:	ab03      	add	r3, sp, #12
 800c7f6:	9300      	str	r3, [sp, #0]
 800c7f8:	462a      	mov	r2, r5
 800c7fa:	4b09      	ldr	r3, [pc, #36]	; (800c820 <_vfiprintf_r+0x258>)
 800c7fc:	a904      	add	r1, sp, #16
 800c7fe:	4630      	mov	r0, r6
 800c800:	f7fc f9ae 	bl	8008b60 <_printf_i>
 800c804:	e7e4      	b.n	800c7d0 <_vfiprintf_r+0x208>
 800c806:	bf00      	nop
 800c808:	0800cd2c 	.word	0x0800cd2c
 800c80c:	0800cd4c 	.word	0x0800cd4c
 800c810:	0800cd0c 	.word	0x0800cd0c
 800c814:	0800d164 	.word	0x0800d164
 800c818:	0800d16e 	.word	0x0800d16e
 800c81c:	08008619 	.word	0x08008619
 800c820:	0800c5a5 	.word	0x0800c5a5
 800c824:	0800d16a 	.word	0x0800d16a

0800c828 <__swbuf_r>:
 800c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82a:	460e      	mov	r6, r1
 800c82c:	4614      	mov	r4, r2
 800c82e:	4605      	mov	r5, r0
 800c830:	b118      	cbz	r0, 800c83a <__swbuf_r+0x12>
 800c832:	6983      	ldr	r3, [r0, #24]
 800c834:	b90b      	cbnz	r3, 800c83a <__swbuf_r+0x12>
 800c836:	f7fb fcdf 	bl	80081f8 <__sinit>
 800c83a:	4b21      	ldr	r3, [pc, #132]	; (800c8c0 <__swbuf_r+0x98>)
 800c83c:	429c      	cmp	r4, r3
 800c83e:	d12b      	bne.n	800c898 <__swbuf_r+0x70>
 800c840:	686c      	ldr	r4, [r5, #4]
 800c842:	69a3      	ldr	r3, [r4, #24]
 800c844:	60a3      	str	r3, [r4, #8]
 800c846:	89a3      	ldrh	r3, [r4, #12]
 800c848:	071a      	lsls	r2, r3, #28
 800c84a:	d52f      	bpl.n	800c8ac <__swbuf_r+0x84>
 800c84c:	6923      	ldr	r3, [r4, #16]
 800c84e:	b36b      	cbz	r3, 800c8ac <__swbuf_r+0x84>
 800c850:	6923      	ldr	r3, [r4, #16]
 800c852:	6820      	ldr	r0, [r4, #0]
 800c854:	1ac0      	subs	r0, r0, r3
 800c856:	6963      	ldr	r3, [r4, #20]
 800c858:	b2f6      	uxtb	r6, r6
 800c85a:	4283      	cmp	r3, r0
 800c85c:	4637      	mov	r7, r6
 800c85e:	dc04      	bgt.n	800c86a <__swbuf_r+0x42>
 800c860:	4621      	mov	r1, r4
 800c862:	4628      	mov	r0, r5
 800c864:	f7fe fb68 	bl	800af38 <_fflush_r>
 800c868:	bb30      	cbnz	r0, 800c8b8 <__swbuf_r+0x90>
 800c86a:	68a3      	ldr	r3, [r4, #8]
 800c86c:	3b01      	subs	r3, #1
 800c86e:	60a3      	str	r3, [r4, #8]
 800c870:	6823      	ldr	r3, [r4, #0]
 800c872:	1c5a      	adds	r2, r3, #1
 800c874:	6022      	str	r2, [r4, #0]
 800c876:	701e      	strb	r6, [r3, #0]
 800c878:	6963      	ldr	r3, [r4, #20]
 800c87a:	3001      	adds	r0, #1
 800c87c:	4283      	cmp	r3, r0
 800c87e:	d004      	beq.n	800c88a <__swbuf_r+0x62>
 800c880:	89a3      	ldrh	r3, [r4, #12]
 800c882:	07db      	lsls	r3, r3, #31
 800c884:	d506      	bpl.n	800c894 <__swbuf_r+0x6c>
 800c886:	2e0a      	cmp	r6, #10
 800c888:	d104      	bne.n	800c894 <__swbuf_r+0x6c>
 800c88a:	4621      	mov	r1, r4
 800c88c:	4628      	mov	r0, r5
 800c88e:	f7fe fb53 	bl	800af38 <_fflush_r>
 800c892:	b988      	cbnz	r0, 800c8b8 <__swbuf_r+0x90>
 800c894:	4638      	mov	r0, r7
 800c896:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c898:	4b0a      	ldr	r3, [pc, #40]	; (800c8c4 <__swbuf_r+0x9c>)
 800c89a:	429c      	cmp	r4, r3
 800c89c:	d101      	bne.n	800c8a2 <__swbuf_r+0x7a>
 800c89e:	68ac      	ldr	r4, [r5, #8]
 800c8a0:	e7cf      	b.n	800c842 <__swbuf_r+0x1a>
 800c8a2:	4b09      	ldr	r3, [pc, #36]	; (800c8c8 <__swbuf_r+0xa0>)
 800c8a4:	429c      	cmp	r4, r3
 800c8a6:	bf08      	it	eq
 800c8a8:	68ec      	ldreq	r4, [r5, #12]
 800c8aa:	e7ca      	b.n	800c842 <__swbuf_r+0x1a>
 800c8ac:	4621      	mov	r1, r4
 800c8ae:	4628      	mov	r0, r5
 800c8b0:	f000 f80c 	bl	800c8cc <__swsetup_r>
 800c8b4:	2800      	cmp	r0, #0
 800c8b6:	d0cb      	beq.n	800c850 <__swbuf_r+0x28>
 800c8b8:	f04f 37ff 	mov.w	r7, #4294967295
 800c8bc:	e7ea      	b.n	800c894 <__swbuf_r+0x6c>
 800c8be:	bf00      	nop
 800c8c0:	0800cd2c 	.word	0x0800cd2c
 800c8c4:	0800cd4c 	.word	0x0800cd4c
 800c8c8:	0800cd0c 	.word	0x0800cd0c

0800c8cc <__swsetup_r>:
 800c8cc:	4b32      	ldr	r3, [pc, #200]	; (800c998 <__swsetup_r+0xcc>)
 800c8ce:	b570      	push	{r4, r5, r6, lr}
 800c8d0:	681d      	ldr	r5, [r3, #0]
 800c8d2:	4606      	mov	r6, r0
 800c8d4:	460c      	mov	r4, r1
 800c8d6:	b125      	cbz	r5, 800c8e2 <__swsetup_r+0x16>
 800c8d8:	69ab      	ldr	r3, [r5, #24]
 800c8da:	b913      	cbnz	r3, 800c8e2 <__swsetup_r+0x16>
 800c8dc:	4628      	mov	r0, r5
 800c8de:	f7fb fc8b 	bl	80081f8 <__sinit>
 800c8e2:	4b2e      	ldr	r3, [pc, #184]	; (800c99c <__swsetup_r+0xd0>)
 800c8e4:	429c      	cmp	r4, r3
 800c8e6:	d10f      	bne.n	800c908 <__swsetup_r+0x3c>
 800c8e8:	686c      	ldr	r4, [r5, #4]
 800c8ea:	89a3      	ldrh	r3, [r4, #12]
 800c8ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c8f0:	0719      	lsls	r1, r3, #28
 800c8f2:	d42c      	bmi.n	800c94e <__swsetup_r+0x82>
 800c8f4:	06dd      	lsls	r5, r3, #27
 800c8f6:	d411      	bmi.n	800c91c <__swsetup_r+0x50>
 800c8f8:	2309      	movs	r3, #9
 800c8fa:	6033      	str	r3, [r6, #0]
 800c8fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c900:	81a3      	strh	r3, [r4, #12]
 800c902:	f04f 30ff 	mov.w	r0, #4294967295
 800c906:	e03e      	b.n	800c986 <__swsetup_r+0xba>
 800c908:	4b25      	ldr	r3, [pc, #148]	; (800c9a0 <__swsetup_r+0xd4>)
 800c90a:	429c      	cmp	r4, r3
 800c90c:	d101      	bne.n	800c912 <__swsetup_r+0x46>
 800c90e:	68ac      	ldr	r4, [r5, #8]
 800c910:	e7eb      	b.n	800c8ea <__swsetup_r+0x1e>
 800c912:	4b24      	ldr	r3, [pc, #144]	; (800c9a4 <__swsetup_r+0xd8>)
 800c914:	429c      	cmp	r4, r3
 800c916:	bf08      	it	eq
 800c918:	68ec      	ldreq	r4, [r5, #12]
 800c91a:	e7e6      	b.n	800c8ea <__swsetup_r+0x1e>
 800c91c:	0758      	lsls	r0, r3, #29
 800c91e:	d512      	bpl.n	800c946 <__swsetup_r+0x7a>
 800c920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c922:	b141      	cbz	r1, 800c936 <__swsetup_r+0x6a>
 800c924:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c928:	4299      	cmp	r1, r3
 800c92a:	d002      	beq.n	800c932 <__swsetup_r+0x66>
 800c92c:	4630      	mov	r0, r6
 800c92e:	f7ff fbc3 	bl	800c0b8 <_free_r>
 800c932:	2300      	movs	r3, #0
 800c934:	6363      	str	r3, [r4, #52]	; 0x34
 800c936:	89a3      	ldrh	r3, [r4, #12]
 800c938:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c93c:	81a3      	strh	r3, [r4, #12]
 800c93e:	2300      	movs	r3, #0
 800c940:	6063      	str	r3, [r4, #4]
 800c942:	6923      	ldr	r3, [r4, #16]
 800c944:	6023      	str	r3, [r4, #0]
 800c946:	89a3      	ldrh	r3, [r4, #12]
 800c948:	f043 0308 	orr.w	r3, r3, #8
 800c94c:	81a3      	strh	r3, [r4, #12]
 800c94e:	6923      	ldr	r3, [r4, #16]
 800c950:	b94b      	cbnz	r3, 800c966 <__swsetup_r+0x9a>
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c958:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c95c:	d003      	beq.n	800c966 <__swsetup_r+0x9a>
 800c95e:	4621      	mov	r1, r4
 800c960:	4630      	mov	r0, r6
 800c962:	f000 f84d 	bl	800ca00 <__smakebuf_r>
 800c966:	89a0      	ldrh	r0, [r4, #12]
 800c968:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c96c:	f010 0301 	ands.w	r3, r0, #1
 800c970:	d00a      	beq.n	800c988 <__swsetup_r+0xbc>
 800c972:	2300      	movs	r3, #0
 800c974:	60a3      	str	r3, [r4, #8]
 800c976:	6963      	ldr	r3, [r4, #20]
 800c978:	425b      	negs	r3, r3
 800c97a:	61a3      	str	r3, [r4, #24]
 800c97c:	6923      	ldr	r3, [r4, #16]
 800c97e:	b943      	cbnz	r3, 800c992 <__swsetup_r+0xc6>
 800c980:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c984:	d1ba      	bne.n	800c8fc <__swsetup_r+0x30>
 800c986:	bd70      	pop	{r4, r5, r6, pc}
 800c988:	0781      	lsls	r1, r0, #30
 800c98a:	bf58      	it	pl
 800c98c:	6963      	ldrpl	r3, [r4, #20]
 800c98e:	60a3      	str	r3, [r4, #8]
 800c990:	e7f4      	b.n	800c97c <__swsetup_r+0xb0>
 800c992:	2000      	movs	r0, #0
 800c994:	e7f7      	b.n	800c986 <__swsetup_r+0xba>
 800c996:	bf00      	nop
 800c998:	200001f8 	.word	0x200001f8
 800c99c:	0800cd2c 	.word	0x0800cd2c
 800c9a0:	0800cd4c 	.word	0x0800cd4c
 800c9a4:	0800cd0c 	.word	0x0800cd0c

0800c9a8 <abort>:
 800c9a8:	b508      	push	{r3, lr}
 800c9aa:	2006      	movs	r0, #6
 800c9ac:	f000 f898 	bl	800cae0 <raise>
 800c9b0:	2001      	movs	r0, #1
 800c9b2:	f7f6 fa3d 	bl	8002e30 <_exit>

0800c9b6 <__swhatbuf_r>:
 800c9b6:	b570      	push	{r4, r5, r6, lr}
 800c9b8:	460e      	mov	r6, r1
 800c9ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c9be:	2900      	cmp	r1, #0
 800c9c0:	b096      	sub	sp, #88	; 0x58
 800c9c2:	4614      	mov	r4, r2
 800c9c4:	461d      	mov	r5, r3
 800c9c6:	da08      	bge.n	800c9da <__swhatbuf_r+0x24>
 800c9c8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	602a      	str	r2, [r5, #0]
 800c9d0:	061a      	lsls	r2, r3, #24
 800c9d2:	d410      	bmi.n	800c9f6 <__swhatbuf_r+0x40>
 800c9d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9d8:	e00e      	b.n	800c9f8 <__swhatbuf_r+0x42>
 800c9da:	466a      	mov	r2, sp
 800c9dc:	f000 f89c 	bl	800cb18 <_fstat_r>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	dbf1      	blt.n	800c9c8 <__swhatbuf_r+0x12>
 800c9e4:	9a01      	ldr	r2, [sp, #4]
 800c9e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c9ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c9ee:	425a      	negs	r2, r3
 800c9f0:	415a      	adcs	r2, r3
 800c9f2:	602a      	str	r2, [r5, #0]
 800c9f4:	e7ee      	b.n	800c9d4 <__swhatbuf_r+0x1e>
 800c9f6:	2340      	movs	r3, #64	; 0x40
 800c9f8:	2000      	movs	r0, #0
 800c9fa:	6023      	str	r3, [r4, #0]
 800c9fc:	b016      	add	sp, #88	; 0x58
 800c9fe:	bd70      	pop	{r4, r5, r6, pc}

0800ca00 <__smakebuf_r>:
 800ca00:	898b      	ldrh	r3, [r1, #12]
 800ca02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca04:	079d      	lsls	r5, r3, #30
 800ca06:	4606      	mov	r6, r0
 800ca08:	460c      	mov	r4, r1
 800ca0a:	d507      	bpl.n	800ca1c <__smakebuf_r+0x1c>
 800ca0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca10:	6023      	str	r3, [r4, #0]
 800ca12:	6123      	str	r3, [r4, #16]
 800ca14:	2301      	movs	r3, #1
 800ca16:	6163      	str	r3, [r4, #20]
 800ca18:	b002      	add	sp, #8
 800ca1a:	bd70      	pop	{r4, r5, r6, pc}
 800ca1c:	ab01      	add	r3, sp, #4
 800ca1e:	466a      	mov	r2, sp
 800ca20:	f7ff ffc9 	bl	800c9b6 <__swhatbuf_r>
 800ca24:	9900      	ldr	r1, [sp, #0]
 800ca26:	4605      	mov	r5, r0
 800ca28:	4630      	mov	r0, r6
 800ca2a:	f7fb fce1 	bl	80083f0 <_malloc_r>
 800ca2e:	b948      	cbnz	r0, 800ca44 <__smakebuf_r+0x44>
 800ca30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca34:	059a      	lsls	r2, r3, #22
 800ca36:	d4ef      	bmi.n	800ca18 <__smakebuf_r+0x18>
 800ca38:	f023 0303 	bic.w	r3, r3, #3
 800ca3c:	f043 0302 	orr.w	r3, r3, #2
 800ca40:	81a3      	strh	r3, [r4, #12]
 800ca42:	e7e3      	b.n	800ca0c <__smakebuf_r+0xc>
 800ca44:	4b0d      	ldr	r3, [pc, #52]	; (800ca7c <__smakebuf_r+0x7c>)
 800ca46:	62b3      	str	r3, [r6, #40]	; 0x28
 800ca48:	89a3      	ldrh	r3, [r4, #12]
 800ca4a:	6020      	str	r0, [r4, #0]
 800ca4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca50:	81a3      	strh	r3, [r4, #12]
 800ca52:	9b00      	ldr	r3, [sp, #0]
 800ca54:	6163      	str	r3, [r4, #20]
 800ca56:	9b01      	ldr	r3, [sp, #4]
 800ca58:	6120      	str	r0, [r4, #16]
 800ca5a:	b15b      	cbz	r3, 800ca74 <__smakebuf_r+0x74>
 800ca5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ca60:	4630      	mov	r0, r6
 800ca62:	f000 f86b 	bl	800cb3c <_isatty_r>
 800ca66:	b128      	cbz	r0, 800ca74 <__smakebuf_r+0x74>
 800ca68:	89a3      	ldrh	r3, [r4, #12]
 800ca6a:	f023 0303 	bic.w	r3, r3, #3
 800ca6e:	f043 0301 	orr.w	r3, r3, #1
 800ca72:	81a3      	strh	r3, [r4, #12]
 800ca74:	89a0      	ldrh	r0, [r4, #12]
 800ca76:	4305      	orrs	r5, r0
 800ca78:	81a5      	strh	r5, [r4, #12]
 800ca7a:	e7cd      	b.n	800ca18 <__smakebuf_r+0x18>
 800ca7c:	08008191 	.word	0x08008191

0800ca80 <_malloc_usable_size_r>:
 800ca80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca84:	1f18      	subs	r0, r3, #4
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	bfbc      	itt	lt
 800ca8a:	580b      	ldrlt	r3, [r1, r0]
 800ca8c:	18c0      	addlt	r0, r0, r3
 800ca8e:	4770      	bx	lr

0800ca90 <_raise_r>:
 800ca90:	291f      	cmp	r1, #31
 800ca92:	b538      	push	{r3, r4, r5, lr}
 800ca94:	4604      	mov	r4, r0
 800ca96:	460d      	mov	r5, r1
 800ca98:	d904      	bls.n	800caa4 <_raise_r+0x14>
 800ca9a:	2316      	movs	r3, #22
 800ca9c:	6003      	str	r3, [r0, #0]
 800ca9e:	f04f 30ff 	mov.w	r0, #4294967295
 800caa2:	bd38      	pop	{r3, r4, r5, pc}
 800caa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800caa6:	b112      	cbz	r2, 800caae <_raise_r+0x1e>
 800caa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800caac:	b94b      	cbnz	r3, 800cac2 <_raise_r+0x32>
 800caae:	4620      	mov	r0, r4
 800cab0:	f000 f830 	bl	800cb14 <_getpid_r>
 800cab4:	462a      	mov	r2, r5
 800cab6:	4601      	mov	r1, r0
 800cab8:	4620      	mov	r0, r4
 800caba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cabe:	f000 b817 	b.w	800caf0 <_kill_r>
 800cac2:	2b01      	cmp	r3, #1
 800cac4:	d00a      	beq.n	800cadc <_raise_r+0x4c>
 800cac6:	1c59      	adds	r1, r3, #1
 800cac8:	d103      	bne.n	800cad2 <_raise_r+0x42>
 800caca:	2316      	movs	r3, #22
 800cacc:	6003      	str	r3, [r0, #0]
 800cace:	2001      	movs	r0, #1
 800cad0:	e7e7      	b.n	800caa2 <_raise_r+0x12>
 800cad2:	2400      	movs	r4, #0
 800cad4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cad8:	4628      	mov	r0, r5
 800cada:	4798      	blx	r3
 800cadc:	2000      	movs	r0, #0
 800cade:	e7e0      	b.n	800caa2 <_raise_r+0x12>

0800cae0 <raise>:
 800cae0:	4b02      	ldr	r3, [pc, #8]	; (800caec <raise+0xc>)
 800cae2:	4601      	mov	r1, r0
 800cae4:	6818      	ldr	r0, [r3, #0]
 800cae6:	f7ff bfd3 	b.w	800ca90 <_raise_r>
 800caea:	bf00      	nop
 800caec:	200001f8 	.word	0x200001f8

0800caf0 <_kill_r>:
 800caf0:	b538      	push	{r3, r4, r5, lr}
 800caf2:	4d07      	ldr	r5, [pc, #28]	; (800cb10 <_kill_r+0x20>)
 800caf4:	2300      	movs	r3, #0
 800caf6:	4604      	mov	r4, r0
 800caf8:	4608      	mov	r0, r1
 800cafa:	4611      	mov	r1, r2
 800cafc:	602b      	str	r3, [r5, #0]
 800cafe:	f7f6 f987 	bl	8002e10 <_kill>
 800cb02:	1c43      	adds	r3, r0, #1
 800cb04:	d102      	bne.n	800cb0c <_kill_r+0x1c>
 800cb06:	682b      	ldr	r3, [r5, #0]
 800cb08:	b103      	cbz	r3, 800cb0c <_kill_r+0x1c>
 800cb0a:	6023      	str	r3, [r4, #0]
 800cb0c:	bd38      	pop	{r3, r4, r5, pc}
 800cb0e:	bf00      	nop
 800cb10:	20004f74 	.word	0x20004f74

0800cb14 <_getpid_r>:
 800cb14:	f7f6 b974 	b.w	8002e00 <_getpid>

0800cb18 <_fstat_r>:
 800cb18:	b538      	push	{r3, r4, r5, lr}
 800cb1a:	4d07      	ldr	r5, [pc, #28]	; (800cb38 <_fstat_r+0x20>)
 800cb1c:	2300      	movs	r3, #0
 800cb1e:	4604      	mov	r4, r0
 800cb20:	4608      	mov	r0, r1
 800cb22:	4611      	mov	r1, r2
 800cb24:	602b      	str	r3, [r5, #0]
 800cb26:	f7f6 f9d2 	bl	8002ece <_fstat>
 800cb2a:	1c43      	adds	r3, r0, #1
 800cb2c:	d102      	bne.n	800cb34 <_fstat_r+0x1c>
 800cb2e:	682b      	ldr	r3, [r5, #0]
 800cb30:	b103      	cbz	r3, 800cb34 <_fstat_r+0x1c>
 800cb32:	6023      	str	r3, [r4, #0]
 800cb34:	bd38      	pop	{r3, r4, r5, pc}
 800cb36:	bf00      	nop
 800cb38:	20004f74 	.word	0x20004f74

0800cb3c <_isatty_r>:
 800cb3c:	b538      	push	{r3, r4, r5, lr}
 800cb3e:	4d06      	ldr	r5, [pc, #24]	; (800cb58 <_isatty_r+0x1c>)
 800cb40:	2300      	movs	r3, #0
 800cb42:	4604      	mov	r4, r0
 800cb44:	4608      	mov	r0, r1
 800cb46:	602b      	str	r3, [r5, #0]
 800cb48:	f7f6 f9d1 	bl	8002eee <_isatty>
 800cb4c:	1c43      	adds	r3, r0, #1
 800cb4e:	d102      	bne.n	800cb56 <_isatty_r+0x1a>
 800cb50:	682b      	ldr	r3, [r5, #0]
 800cb52:	b103      	cbz	r3, 800cb56 <_isatty_r+0x1a>
 800cb54:	6023      	str	r3, [r4, #0]
 800cb56:	bd38      	pop	{r3, r4, r5, pc}
 800cb58:	20004f74 	.word	0x20004f74

0800cb5c <roundf>:
 800cb5c:	ee10 0a10 	vmov	r0, s0
 800cb60:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800cb64:	3a7f      	subs	r2, #127	; 0x7f
 800cb66:	2a16      	cmp	r2, #22
 800cb68:	dc15      	bgt.n	800cb96 <roundf+0x3a>
 800cb6a:	2a00      	cmp	r2, #0
 800cb6c:	da08      	bge.n	800cb80 <roundf+0x24>
 800cb6e:	3201      	adds	r2, #1
 800cb70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800cb74:	d101      	bne.n	800cb7a <roundf+0x1e>
 800cb76:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800cb7a:	ee00 3a10 	vmov	s0, r3
 800cb7e:	4770      	bx	lr
 800cb80:	4907      	ldr	r1, [pc, #28]	; (800cba0 <roundf+0x44>)
 800cb82:	4111      	asrs	r1, r2
 800cb84:	4208      	tst	r0, r1
 800cb86:	d0fa      	beq.n	800cb7e <roundf+0x22>
 800cb88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800cb8c:	4113      	asrs	r3, r2
 800cb8e:	4403      	add	r3, r0
 800cb90:	ea23 0301 	bic.w	r3, r3, r1
 800cb94:	e7f1      	b.n	800cb7a <roundf+0x1e>
 800cb96:	2a80      	cmp	r2, #128	; 0x80
 800cb98:	d1f1      	bne.n	800cb7e <roundf+0x22>
 800cb9a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cb9e:	4770      	bx	lr
 800cba0:	007fffff 	.word	0x007fffff

0800cba4 <_init>:
 800cba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cba6:	bf00      	nop
 800cba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbaa:	bc08      	pop	{r3}
 800cbac:	469e      	mov	lr, r3
 800cbae:	4770      	bx	lr

0800cbb0 <_fini>:
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	bf00      	nop
 800cbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbb6:	bc08      	pop	{r3}
 800cbb8:	469e      	mov	lr, r3
 800cbba:	4770      	bx	lr
